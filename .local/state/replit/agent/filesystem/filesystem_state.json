{"file_contents":{"modules/saleFlow/responseHandler.js":{"content":"// modules/saleFlow/responseHandler.js - GÜNCELLENDİ\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendSaleResponse(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Satış cevabı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\n// Satış cevabını işleme - GÜNCELLENDİ\nasync function handleSaleResponse(message, response, services) {\n  const cleanResponse = response.toLowerCase().trim();\n  \n  console.log(`💰 Satış cevabı işleniyor: \"${cleanResponse}\"`);\n  \n  // Olumlu cevaplar\n  const positiveResponses = ['evet', 'yes', 'ok', 'tamam', 'başla', 'başlayalım', 'oluştur', 'yapalım', '✅', '👍'];\n  \n  // Olumsuz cevaplar\n  const negativeResponses = ['hayır', 'no', 'yok', 'later', 'sonra', '❌', '👎'];\n  \n  if (isPositiveResponse(cleanResponse, positiveResponses)) {\n    // Olumlu cevap - Yeşil Sigorta soru-cevap akışını başlat\n    await handlePositiveResponse(message, services);\n    \n  } else if (isNegativeResponse(cleanResponse, negativeResponses)) {\n    // Olumsuz cevap\n    await handleNegativeResponse(message);\n    \n  } else {\n    // Anlaşılamayan cevap\n    await handleUnknownResponse(message);\n  }\n}\n\n// Olumlu cevap kontrolü\nfunction isPositiveResponse(response, positiveResponses) {\n  return positiveResponses.some(pos => response.includes(pos));\n}\n\n// Olumsuz cevap kontrolü\nfunction isNegativeResponse(response, negativeResponses) {\n  return negativeResponses.some(neg => response.includes(neg));\n}\n\n// Olumlu cevap işleme - GÜNCELLENDİ\nasync function handlePositiveResponse(message, services) {\n  await sendSaleResponse(message, '🎉 Harika! Yeşil Sigorta poliçenizi oluşturmaya başlıyorum...');\n  \n  // Yeşil Sigorta servisini bul\n  const serviceFinder = require('./serviceFinder');\n  const yesilSigortaService = serviceFinder.findYesilSigortaService(services);\n  \n  if (yesilSigortaService) {\n    // Satış zamanlayıcısını temizle\n    const timeoutManager = require('./timeoutManager');\n    timeoutManager.clearSaleTimer(message.from);\n    \n    // Yeşil Sigorta akışını başlat\n    const serviceFlow = require('../serviceFlow');\n    await serviceFlow.startServiceFlow(message, yesilSigortaService);\n  } else {\n    await sendSaleResponse(message, '❌ Yeşil Sigorta servisi bulunamadı. Lütfen daha sonra tekrar deneyin.');\n    await endConversation(message);\n  }\n}\n\n// Olumsuz cevap işleme - GÜNCELLENDİ\nasync function handleNegativeResponse(message) {\n  await sendSaleResponse(message, '👍 Anladım. Yeşil Sigorta ihtiyacınız olduğunda buradayım! 🛡️');\n  await endConversation(message);\n}\n\n// Anlaşılamayan cevap işleme - GÜNCELLENDİ\nasync function handleUnknownResponse(message) {\n  await sendSaleResponse(message, '❌ Anlayamadım. Lütfen *Evet* veya *Hayır* olarak cevap verin.\\n\\n' +\n                     '✅ *Evet* - Poliçe oluşturmaya başlayalım\\n' +\n                     '❌ *Hayır* - Şimdilik sadece fiyat bilgisi yeterli');\n}\n\n// Konuşmayı bitir\nasync function endConversation(message) {\n  const conversationManager = require('./conversationManager');\n  await conversationManager.endSaleConversation(message.from);\n  \n  const serviceLoader = require('../serviceLoader');\n  const menuHandler = require('../menuHandler');\n  \n  setTimeout(async () => {\n    await menuHandler.showMainMenu(message, serviceLoader.loadAllServices());\n  }, 3000);\n}\n\nmodule.exports = {\n  handleSaleResponse,\n  isPositiveResponse,\n  isNegativeResponse,\n  handlePositiveResponse,\n  handleNegativeResponse,\n  handleUnknownResponse,\n  endConversation\n};","size_bytes":3852},"micro-modules/utils/getTimeBasedGreeting.js":{"content":"// micro-modules/utils/getTimeBasedGreeting.js\nfunction getTimeBasedGreeting() {\n  const hour = new Date().getHours();\n  \n  if (hour >= 5 && hour < 11) {\n    return 'gunaydin';\n  } else if (hour >= 11 && hour < 17) {\n    return 'merhaba'; \n  } else {\n    return 'iyi_aksamlar';\n  }\n}\n\nmodule.exports = getTimeBasedGreeting;","size_bytes":323},"micro-modules/service/startServiceFlow.js":{"content":"// micro-modules/service/startServiceFlow.js\nconst sessionManager = require('../../core/sessionManager');\nconst handlePriceList = require('./handlePriceList');\nconst askNextQuestion = require('./askNextQuestion');\n\nasync function startServiceFlow(message, service) {\n  const serviceData = service.data;\n  \n  console.log(`🚀 Servis başlatılıyor: ${service.name}, Kategori: ${service.category}`);\n  \n  if (service.category === 'fiyat_listeleri') {\n    await handlePriceList(message, service);\n    return;\n  }\n  \n  sessionManager.updateUserSession(message.from, {\n    currentService: service,\n    currentQuestions: serviceData.questions || [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {},\n    serviceFlow: serviceData.service_name,\n    currentState: 'in_service'\n  });\n\n  await message.reply(serviceData.bot_greeting);\n  \n  const session = sessionManager.getUserSession(message.from);\n  if (session.currentQuestions.length > 0) {\n    await askNextQuestion(message, session);\n  } else {\n    const completeServiceFlow = require('./completeServiceFlow');\n    await completeServiceFlow(message, session);\n  }\n}\n\nmodule.exports = startServiceFlow;","size_bytes":1154},"modules/menuHandler.js":{"content":"// modules/menuHandler.js - ANA YÖNLENDİRİCİ DOSYA\nconst mainMenu = require('./menuHandler/mainMenu');\nconst subMenu = require('./menuHandler/subMenu');\nconst numberHandler = require('./menuHandler/numberHandler');\nconst serviceConverter = require('./menuHandler/serviceConverter');\nconst categoryManager = require('./menuHandler/categoryManager');\nconst navigation = require('./menuHandler/navigation');\n\n// Ana menü göster\nasync function showMainMenu(message, services) {\n  await mainMenu.showMainMenu(message, services);\n}\n\n// Sayı seçimini işle\nasync function handleNumberSelection(message, number, services) {\n  await numberHandler.handleNumberSelection(message, number, services);\n}\n\n// Alt menü seçimini işle\nasync function handleSubMenuSelection(message, number, categoryName, services) {\n  await subMenu.handleSubMenuSelection(message, number, categoryName, services);\n}\n\n// Kategori seçeneklerini göster\nasync function showCategoryOptions(message, category, services) {\n  await subMenu.showCategoryOptions(message, category, services);\n}\n\n// Servis anahtarını dönüştür\nfunction convertToServiceKey(categoryName) {\n  return serviceConverter.convertToServiceKey(categoryName);\n}\n\n// Ana menüye dön\nasync function returnToMainMenu(message, services, contactName = '') {\n  await navigation.returnToMainMenu(message, services, contactName);\n}\n\nmodule.exports = {\n  showMainMenu,\n  handleNumberSelection,\n  handleSubMenuSelection,\n  showCategoryOptions,\n  convertToServiceKey,\n  returnToMainMenu,\n  \n  // Alt modüllere erişim için\n  mainMenu,\n  subMenu,\n  numberHandler,\n  serviceConverter,\n  categoryManager,\n  navigation\n};","size_bytes":1654},"micro-modules/session/stopMenuTimer.js":{"content":"// micro-modules/session/stopMenuTimer.js\nconst sessionManager = require('../../core/sessionManager');\n\nfunction stopMenuTimer(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (session && session.menuTimer) {\n    clearTimeout(session.menuTimer);\n    sessionManager.updateUserSession(userId, { \n      waitingForResponse: false, \n      menuTimer: null\n    });\n  }\n}\n\nmodule.exports = stopMenuTimer;","size_bytes":419},"modules/serviceFlow.js":{"content":"// modules/serviceFlow.js - GÜNCELLENDİ\nconst fs = require('fs');\nconst path = require('path');\nconst logger = require('./logger');\nconst sessionManager = require('./sessionManager');\nconst validationUtils = require('./validationUtils');\nconst { sendMessageWithoutQuote } = require('./utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendServiceMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Servis mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\n// Servis akışını başlat - GÜNCELLENDİ\nasync function startServiceFlow(message, service) {\n  const serviceData = service.data;\n  \n  console.log(`🚀 Servis başlatılıyor: ${service.name}, Kategori: ${service.category}`);\n  \n  // FİYAT LİSTESİ İSE ÖZEL İŞLEM\n  if (service.category === 'fiyat_listeleri') {\n    await handlePriceList(message, service);\n    return;\n  }\n  \n  // NORMAL SERVİS İSE SORU-CEVAP AKIŞI\n  sessionManager.updateUserSession(message.from, {\n    currentService: service,\n    currentQuestions: serviceData.questions || [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {},\n    serviceFlow: serviceData.service_name,\n    currentState: 'in_service'\n  });\n\n  await sendServiceMessage(message, serviceData.bot_greeting);\n  \n  const session = sessionManager.getUserSession(message.from);\n  if (session.currentQuestions.length > 0) {\n    await askNextQuestion(message, session);\n  } else {\n    await completeServiceFlow(message, session);\n  }\n}\n\n// Fiyat listesi işleme - GÜNCELLENDİ\nasync function handlePriceList(message, service) {\n  const priceData = service.data;\n  \n  console.log(`💰 Fiyat listesi işleniyor: ${service.name}`, priceData);\n  \n  let priceText = `💰 *${service.name.replace(/_/g, ' ').toUpperCase()}*\\n\\n`;\n  \n  if (priceData.fiyat_tablosu) {\n    // Yeşil Sigorta fiyat formatı\n    for (const [aracTipi, fiyatlar] of Object.entries(priceData.fiyat_tablosu)) {\n      priceText += `*${aracTipi}:*\\n`;\n      for (const [sure, fiyat] of Object.entries(fiyatlar)) {\n        const sureText = sure.replace('_gun', ' gün').replace('15_gun', '15 gün').replace('30_gun', '30 gün').replace('90_gun', '90 gün');\n        priceText += `  • ${sureText}: ${fiyat}\\n`;\n      }\n      priceText += '\\n';\n    }\n  }\n  \n  // ÖNEMLİ BİLGİLENDİRME ekle\n  if (priceData.önemli_bilgilendirme) {\n    priceText += `⚠️ *Önemli Bilgilendirme:*\\n${priceData.önemli_bilgilendirme}\\n\\n`;\n  }\n  \n  // AÇIKLAMA ekle\n  if (priceData.aciklama) {\n    priceText += `📝 *Açıklama:* ${priceData.aciklama}\\n\\n`;\n  }\n  \n  await sendServiceMessage(message, priceText);\n  \n  // 2 saniye bekle ve satış teklifini göster\n  setTimeout(async () => {\n    try {\n      const saleFlow = require('./saleFlow');\n      await saleFlow.askForSale(message);\n    } catch (error) {\n      logger.error(`Satış teklifi hatası: ${error.message}`);\n      console.log('❌ Satış teklifi gösterilemedi:', error.message);\n      \n      // Fallback: Ana menüye dön\n      const serviceLoader = require('./serviceLoader');\n      const menuHandler = require('./menuHandler');\n      await menuHandler.showMainMenu(message, serviceLoader.loadAllServices());\n    }\n  }, 2000);\n}\n\n// Sonraki soruyu sor - GÜNCELLENDİ\nasync function askNextQuestion(message, session) {\n  const currentQuestion = session.currentQuestions[session.currentQuestionIndex];\n  \n  if (currentQuestion) {\n    let questionText = `📝 *Soru ${session.currentQuestionIndex + 1}/${session.currentQuestions.length}*\\n\\n`;\n    questionText += `${currentQuestion.question}`;\n    \n    if (currentQuestion.field_type === 'number') {\n      questionText += `\\n\\n💡 *Lütfen sadece sayı giriniz.*`;\n    } else if (currentQuestion.field_type === 'date') {\n      questionText += `\\n\\n💡 *Format: Gün/Ay/Yıl (Örnek: 15/01/2024)*`;\n    } else if (currentQuestion.field_type === 'phone') {\n      questionText += `\\n\\n💡 *Format: 5XX XXX XX XX*`;\n    }\n    \n    await sendServiceMessage(message, questionText);\n    \n    sessionManager.updateUserSession(message.from, {\n      currentState: 'collecting_answer',\n      waitingForResponse: true\n    });\n  } else {\n    await completeServiceFlow(message, session);\n  }\n}\n\n// Cevabı işle - GÜNCELLENDİ\nasync function handleAnswer(message, answer, session) {\n  const currentQuestion = session.currentQuestions[session.currentQuestionIndex];\n  const fieldName = currentQuestion.field_name;\n  \n  const validationResult = validationUtils.validateAnswer(answer, currentQuestion.field_type);\n  \n  if (!validationResult.isValid) {\n    await sendServiceMessage(message, `❌ ${validationResult.errorMessage}\\n\\nLütfen tekrar cevap verin:`);\n    return false;\n  }\n  \n  const updatedAnswers = {\n    ...session.collectedAnswers,\n    [fieldName]: validationResult.cleanedValue\n  };\n  \n  sessionManager.updateUserSession(message.from, {\n    collectedAnswers: updatedAnswers,\n    currentQuestionIndex: session.currentQuestionIndex + 1\n  });\n  \n  const updatedSession = sessionManager.getUserSession(message.from);\n  if (updatedSession.currentQuestionIndex < updatedSession.currentQuestions.length) {\n    await askNextQuestion(message, updatedSession);\n  } else {\n    await completeServiceFlow(message, updatedSession);\n  }\n  \n  return true;\n}\n\n// Servis akışını tamamla - GÜNCELLENDİ\nasync function completeServiceFlow(message, session) {\n  if (!session.currentService || !session.currentService.data) {\n    console.log('❌ Servis verisi bulunamadı');\n    await sendServiceMessage(message, '❌ Bir hata oluştu. Lütfen tekrar deneyin.');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    \n    const serviceLoader = require('./serviceLoader');\n    const menuHandler = require('./menuHandler');\n    await menuHandler.showMainMenu(message, serviceLoader.loadAllServices());\n    return;\n  }\n  \n  const serviceData = session.currentService.data;\n  const serviceName = serviceData.service_name || session.currentService.name || 'Servis';\n  \n  console.log(`✅ Servis tamamlandı: ${serviceName}`);\n  console.log(`📊 Toplanan cevaplar:`, session.collectedAnswers);\n  \n  let completionText = `🎉 *${serviceName}* başvurunuz tamamlandı!\\n\\n`;\n  \n  if (session.currentQuestions.length > 0) {\n    completionText += `✅ Toplam ${session.currentQuestions.length} soru cevaplandı.\\n\\n`;\n  }\n  \n  completionText += serviceData.completion_message || 'En kısa sürede size dönüş yapacağız.';\n\n  await sendServiceMessage(message, completionText);\n  \n  // Sadece normal servisler için kaydet (fiyat listeleri değil)\n  if (session.currentService.category !== 'fiyat_listeleri') {\n    await saveServiceApplication(session);\n  }\n  \n  sessionManager.updateUserSession(message.from, {\n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {},\n    serviceFlow: null\n  });\n  \n  const serviceLoader = require('./serviceLoader');\n  const menuHandler = require('./menuHandler');\n  \n  setTimeout(async () => {\n    await menuHandler.showMainMenu(message, serviceLoader.loadAllServices());\n  }, 2000);\n}\n\n// Servis başvurusunu kaydet\nasync function saveServiceApplication(session) {\n  try {\n    const applicationData = {\n      service: session.serviceFlow,\n      answers: session.collectedAnswers,\n      timestamp: new Date().toISOString(),\n      userId: session.userId\n    };\n    \n    const applicationsDir = './applications';\n    if (!fs.existsSync(applicationsDir)) {\n      fs.mkdirSync(applicationsDir, { recursive: true });\n    }\n    \n    const filename = `application_${Date.now()}_${session.userId.replace('@c.us', '')}.json`;\n    fs.writeFileSync(\n      path.join(applicationsDir, filename),\n      JSON.stringify(applicationData, null, 2),\n      'utf8'\n    );\n    \n    logger.info(`Başvuru kaydedildi: ${filename}`);\n    console.log(`📄 Başvuru kaydedildi: ${filename}`);\n    \n  } catch (error) {\n    logger.error(`Başvuru kaydetme hatası: ${error.message}`);\n    console.error('❌ Başvuru kaydetme hatası:', error);\n  }\n}\n\nmodule.exports = {\n  startServiceFlow,\n  handlePriceList,\n  askNextQuestion,\n  handleAnswer,\n  completeServiceFlow,\n  saveServiceApplication\n};","size_bytes":8353},"micro-modules/menu/showMainMenu.js":{"content":"// micro-modules/menu/showMainMenu.js\nconst sessionManager = require('../../core/sessionManager');\nconst startMenuTimer = require('../session/startMenuTimer');\n\nasync function showMainMenu(message, services) {\n  let menuText = `📋 *ANA HİZMET KATEGORİLERİ*\\n\\n`;\n  \n  const mainCategories = [\n    '🛡️  Sigorta Hizmetleri',\n    '💻 Yazılım Talepleri', \n    '🔒 Siber Güvenlik',\n    '🚚 Lojistik Hizmetleri',\n    '🌍 İthalat İhracat',\n    '📊 Profesyonel Denetleme',\n    '🏠 İnşaat Emlak',\n    '🤝 CRM Hizmetleri',\n    '👕 Tekstil Ürünleri',\n    '💄 Kozmetik Ürünleri',\n    '✈️  Tur Organizasyon',\n    '☀️  Güneş Enerjisi',\n    '🏢 Kurumsal Hizmetler'\n  ];\n  \n  mainCategories.forEach((category, index) => {\n    menuText += `${index + 1}. ${category}\\n`;\n  });\n  \n  menuText += `\\nİlgilendiğiniz hizmetin *numarasını* yazın veya *doğrudan hizmet adını* belirtin.`;\n  \n  await message.reply(menuText);\n  \n  startMenuTimer(message.from, message, services);\n}\n\nmodule.exports = showMainMenu;","size_bytes":1045},"modules/menuHandler/categoryManager.js":{"content":"// modules/menuHandler/categoryManager.js\nconst logger = require('../logger');\n\n// Kategori verilerini yükle\nfunction loadCategoryData(categoryName, services) {\n  console.log(`📁 Kategori yükleniyor: ${categoryName}`);\n  \n  // Önce ana kategorilerde ara\n  if (services[categoryName]) {\n    return services[categoryName];\n  }\n  \n  // Alternatif isimlerle dene\n  const alternativeNames = getAlternativeCategoryNames(categoryName);\n  for (const altName of alternativeNames) {\n    if (services[altName]) {\n      console.log(`🔄 Alternatif kategori bulundu: ${altName}`);\n      return services[altName];\n    }\n  }\n  \n  console.log(`❌ Kategori bulunamadı: ${categoryName}`);\n  return null;\n}\n\n// Alternatif kategori isimlerini getir\nfunction getAlternativeCategoryNames(categoryName) {\n  const alternatives = [];\n  \n  // \"_ana\" ekle/çıkar\n  if (categoryName.includes('_ana')) {\n    alternatives.push(categoryName.replace('_ana', ''));\n  } else {\n    alternatives.push(categoryName + '_ana');\n  }\n  \n  // \"_kategori\" ekle/çıkar\n  if (categoryName.includes('_kategori')) {\n    alternatives.push(categoryName.replace('_kategori', ''));\n  } else {\n    alternatives.push(categoryName + '_kategori');\n  }\n  \n  // \"_hizmetleri\" ekle/çıkar\n  if (categoryName.includes('_hizmetleri')) {\n    alternatives.push(categoryName.replace('_hizmetleri', ''));\n  } else {\n    alternatives.push(categoryName + '_hizmetleri');\n  }\n  \n  return alternatives.filter((value, index, self) => self.indexOf(value) === index);\n}\n\n// Kategori seçeneklerini doğrula\nfunction validateCategoryOptions(categoryData) {\n  if (!categoryData || !categoryData.category_options) {\n    return { isValid: false, error: 'Kategori seçenekleri bulunamadı' };\n  }\n  \n  const options = categoryData.category_options;\n  const validOptions = options.filter(opt => \n    opt.option_number && opt.category_name && opt.category_name.trim().length > 0\n  );\n  \n  if (validOptions.length === 0) {\n    return { isValid: false, error: 'Geçerli kategori seçenekleri bulunamadı' };\n  }\n  \n  return { \n    isValid: true, \n    options: validOptions,\n    count: validOptions.length \n  };\n}\n\n// Kategori bilgilerini getir\nfunction getCategoryInfo(categoryName, services) {\n  const categoryData = loadCategoryData(categoryName, services);\n  if (!categoryData) {\n    return null;\n  }\n  \n  return {\n    name: categoryName,\n    displayName: categoryData.bot_greeting || categoryName.replace(/_/g, ' '),\n    options: categoryData.category_options || [],\n    completionMessage: categoryData.completion_message || 'Lütfen bir numara seçin:'\n  };\n}\n\nmodule.exports = {\n  loadCategoryData,\n  getAlternativeCategoryNames,\n  validateCategoryOptions,\n  getCategoryInfo\n};","size_bytes":2714},"modules/messageHandler/sessionRouter.js":{"content":"// modules/messageHandler/sessionRouter.js - CALLBACK VERSİYON\nconst sessionManager = require('../sessionManager');\nconst serviceLoader = require('../serviceLoader');\nconst menuHandler = require('../menuHandler');\nconst serviceFlow = require('../serviceFlow');\nconst greetingManager = require('./greetingManager');\nconst serviceMatcher = require('./serviceMatcher');\nconst messageParser = require('./messageParser');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendResponse(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Alıntısız mesaj gönderme hatası, fallback kullanılıyor:', error.message);\n    // Fallback: normal reply\n    await message.reply(text);\n  }\n}\n\n// Ana route fonksiyonu - CALLBACK EKLENDİ\nasync function route(message, parsedMessage, contactName = '', onServiceFound = null) {\n  const { greetingPart, servicePart, cleanMessage, originalMessage } = parsedMessage;\n  const services = serviceLoader.loadAllServices();\n  const session = sessionManager.getUserSession(message.from);\n  \n  console.log(`🔍 Route: Durum=${session?.currentState}, Mesaj=${cleanMessage}`);\n  \n  // Servis bulundu callback'i\n  const serviceFound = () => {\n    if (onServiceFound && typeof onServiceFound === 'function') {\n      onServiceFound();\n    }\n  };\n  \n  // TEŞEKKÜR MESAJLARI - EN ÖNCELİKLİ\n  if (messageParser.isThanksMessage(cleanMessage)) {\n    console.log(`🙏 Teşekkür mesajı algılandı`);\n    serviceFound();\n    await greetingManager.handleThanks(message, contactName);\n    return;\n  }\n  \n  // VEDALAŞMA MESAJLARI - ÖNCELİKLİ\n  if (messageParser.isGoodbyeMessage(cleanMessage)) {\n    console.log(`👋 Vedalaşma mesajı algılandı`);\n    serviceFound();\n    await greetingManager.handleGoodbye(message, contactName);\n    return;\n  }\n  \n  // ÇIKIŞ KOMUTLARI - ÖNCELİKLİ\n  if (isExitCommand(cleanMessage)) {\n    console.log(`🚪 Çıkış komutu algılandı`);\n    serviceFound();\n    await handleExitCommand(message, services, contactName);\n    return;\n  }\n  \n  // DİĞER HİZMETLER İSTEĞİ - ÖNCELİKLİ\n  if (messageParser.isOtherServicesRequest(cleanMessage)) {\n    console.log(`🔄 Diğer hizmetler isteği algılandı`);\n    serviceFound();\n    await handleOtherServicesRequest(message, services, contactName);\n    return;\n  }\n  \n  // MENÜ İSTEĞİ - ÖNCELİKLİ\n  if (messageParser.isMenuRequest(cleanMessage)) {\n    console.log(`📋 Menü isteği algılandı`);\n    serviceFound();\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    await menuHandler.showMainMenu(message, services);\n    return;\n  }\n  \n  // ÖNCE: Satış cevabı durumunu kontrol et\n  if (session && session.currentState === 'waiting_for_sale_response') {\n    serviceFound();\n    const saleFlow = require('../saleFlow');\n    await saleFlow.handleSaleResponse(message, cleanMessage, services);\n    return;\n  }\n  \n  // SONRA: Soru-cevap akışı\n  if (session && session.currentState === 'collecting_answer') {\n    serviceFound();\n    const success = await serviceFlow.handleAnswer(message, cleanMessage, session);\n    return;\n  }\n  \n  // SAYI SEÇİMİ - ÖNCELİKLİ\n  if (messageParser.isNumberInput(cleanMessage)) {\n    const number = parseInt(cleanMessage);\n    console.log(`🔢 Sayı seçimi algılandı: ${number}, Durum: ${session?.currentState}`);\n    serviceFound();\n    await menuHandler.handleNumberSelection(message, number, services);\n    return;\n  }\n  \n  // YARDIM İSTEĞİ\n  if (messageParser.isHelpRequest(cleanMessage)) {\n    console.log(`❓ Yardım isteği algılandı`);\n    serviceFound();\n    await handleHelpRequest(message, services, contactName);\n    return;\n  }\n  \n  // İPTAL İSTEĞİ\n  if (messageParser.isCancelRequest(cleanMessage)) {\n    console.log(`⏹️ İptal isteği algılandı`);\n    serviceFound();\n    await handleCancelRequest(message, services, contactName);\n    return;\n  }\n  \n  // Eğer selamlama varsa, önce selamla\n  if (greetingPart && messageParser.isGreeting(greetingPart)) {\n    serviceFound();\n    await greetingManager.handleGreeting(message, services, contactName);\n    \n    // Eğer selamlamadan sonra işlem de varsa, 2 saniye bekle ve işlemi başlat\n    if (servicePart && servicePart.length > 0) {\n      setTimeout(async () => {\n        await processServiceRequest(message, servicePart, services, serviceFound);\n      }, 2000);\n      return;\n    }\n    return;\n  }\n  \n  // Sadece işlem varsa, direkt işlemi başlat\n  if (servicePart && servicePart.length > 0) {\n    await processServiceRequest(message, servicePart, services, serviceFound);\n    return;\n  }\n  \n  // Bilinmeyen mesaj - Hugging Face denenebilir (callback çağrılmaz)\n  console.log('🔍 Bilinmeyen mesaj türü - Hugging Face denenebilir');\n  await handleUnknownMessage(message, services, contactName);\n}\n\n// Process Service Request - CALLBACK EKLENDİ\nasync function processServiceRequest(message, serviceRequest, services, serviceFound = null) {\n  console.log(`🔍 Servis isteği işleniyor: \"${serviceRequest}\"`);\n  \n  // Özel durumlar - servis olarak aranmamalı\n  if (serviceRequest.toLowerCase().includes('menü') || serviceRequest.toLowerCase().includes('menu')) {\n    console.log(`📋 Menü isteği - servis olarak aranmayacak`);\n    if (serviceFound) serviceFound();\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    await menuHandler.showMainMenu(message, services);\n    return;\n  }\n  \n  // Anlamsız mesaj kontrolü\n  if (isMeaninglessMessage(serviceRequest)) {\n    console.log(`❓ Anlamsız mesaj algılandı`);\n    if (serviceFound) serviceFound();\n    await handleMeaninglessMessage(message, services);\n    return;\n  }\n  \n  const matchedService = serviceMatcher.findMatchingService(serviceRequest, services);\n  \n  if (matchedService) {\n    console.log(`✅ Servis eşleşti: ${matchedService.type} - ${matchedService.name}`);\n    if (serviceFound) serviceFound();\n    \n    // DİYALOG TİPİ CEVAPLAR İÇİN\n    if (matchedService.type === 'diyalog') {\n      await sendResponse(message, matchedService.data.cevap);\n      return;\n    }\n    \n    if (matchedService.type === 'category') {\n      await menuHandler.showCategoryOptions(message, matchedService, services);\n      sessionManager.updateUserSession(message.from, { currentState: `submenu_${matchedService.name}` });\n    } else {\n      await serviceFlow.startServiceFlow(message, matchedService);\n    }\n  } else {\n    console.log(`❌ Servis eşleşmedi: \"${serviceRequest}\"`);\n    // Servis bulunamadı - callback çağrılmaz (Hugging Face devreye girer)\n    await handleUnknownMessage(message, services);\n  }\n}\n\n// Kalan fonksiyonlar aynı kalacak...\n// [isExitCommand, handleExitCommand, handleOtherServicesRequest, handleHelpRequest, \n//  handleCancelRequest, isMeaninglessMessage, handleMeaninglessMessage, handleUnknownMessage]\n\n// Çıkış komutu kontrolü\nfunction isExitCommand(message) {\n  const exitCommands = ['çıkış', 'çıkıs', 'exit', 'quit', 'geri', 'ana menü', 'ana menu', 'menüye dön', 'menuye don', 'back', 'return'];\n  return exitCommands.some(cmd => message.includes(cmd));\n}\n\n// Çıkış komutu işleme\nasync function handleExitCommand(message, services, contactName = '') {\n  sessionManager.updateUserSession(message.from, { \n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {}\n  });\n  \n  const personalization = require('./personalization');\n  const exitText = contactName ? \n    `👋 ${contactName}, ana menüye döndünüz!` :\n    `👋 Ana menüye döndünüz!`;\n  \n  await sendResponse(message, exitText);\n  await menuHandler.showMainMenu(message, services);\n}\n\n// Diğer hizmetler isteği işleme\nasync function handleOtherServicesRequest(message, services, contactName = '') {\n  console.log(`🔍 Diğer hizmetler isteği algılandı`);\n  \n  const personalization = require('./personalization');\n  const otherServicesText = contactName ? \n    `🔄 ${contactName}, diğer hizmetlerimizi gösteriyorum...` :\n    `🔄 Diğer hizmetlerimizi gösteriyorum...`;\n  \n  await sendResponse(message, otherServicesText);\n  \n  // Ana menüyü göster\n  sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n  await menuHandler.showMainMenu(message, services);\n}\n\n// Yardım isteği işleme\nasync function handleHelpRequest(message, services, contactName = '') {\n  const personalization = require('./personalization');\n  const helpText = contactName ? \n    `❓ ${contactName}, size nasıl yardımcı olabilirim?\\n\\n` :\n    `❓ Size nasıl yardımcı olabilirim?\\n\\n`;\n  \n  await sendResponse(message, helpText +\n    `• Bir hizmet adı yazın (örnek: \"sigorta\", \"yazılım\")\\n` +\n    `• \"menü\" yazarak tüm seçenekleri görebilirsiniz\\n` +\n    `• Sayı yazarak seçim yapabilirsiniz\\n` +\n    `• \"çıkış\" yazarak ana menüye dönebilirsiniz\\n` +\n    `• \"teşekkür ederim\" diyerek konuşmayı bitirebilirsiniz`);\n}\n\n// İptal isteği işleme\nasync function handleCancelRequest(message, services, contactName = '') {\n  sessionManager.updateUserSession(message.from, { \n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {}\n  });\n  \n  const personalization = require('./personalization');\n  const cancelText = contactName ? \n    `⏹️ ${contactName}, işleminiz iptal edildi. Ana menüye döndünüz.` :\n    `⏹️ İşleminiz iptal edildi. Ana menüye döndünüz.`;\n  \n  await sendResponse(message, cancelText);\n  await menuHandler.showMainMenu(message, services);\n}\n\n// Anlamsız mesaj kontrolü\nfunction isMeaninglessMessage(message) {\n  const meaninglessPatterns = [\n    /^[\\u{1F600}-\\u{1F64F}]+$/u, // Sadece emoji\n    /^[^\\w\\s]+$/, // Sadece özel karakterler\n    /^.{1,2}$/, // 1-2 karakter\n    /^(.)\\1+$/, // Aynı karakterin tekrarı (aaa, ???)\n  ];\n  \n  return meaninglessPatterns.some(pattern => pattern.test(message));\n}\n\n// Anlamsız mesaj işleme\nasync function handleMeaninglessMessage(message, services) {\n  await sendResponse(message, `🤔 Anlayamadım. Lütfen:\\n\\n` +\n    `• Bir hizmet adı yazın\\n` +\n    `• \"menü\" yazarak seçenekleri görün\\n` +\n    `• \"yardım\" yazarak destek alın`);\n}\n\n// Bilinmeyen mesaj işleme\nasync function handleUnknownMessage(message, services, contactName = '') {\n  const personalization = require('./personalization');\n  const unknownText = personalization.createPersonalizedUnknownMessage(contactName);\n  \n  await sendResponse(message, `${unknownText}\\n\\n` +\n    `• \"sigorta\" - Sigorta hizmetleri\\n` +\n    `• \"yazılım\" - Yazılım geliştirme\\n` +\n    `• \"lojistik\" - Nakliye hizmetleri\\n` +\n    `• \"diğer hizmetler\" - Tüm seçenekleri görün\\n` +\n    `• Veya diğer hizmetlerimiz...\\n\\n` +\n    `Yardım için \"menü\" yazabilirsiniz.\\n` +\n    `Çıkmak için \"çıkış\" yazabilirsiniz.`);\n}\n\nmodule.exports = {\n  route,\n  processServiceRequest,\n  handleUnknownMessage,\n  handleExitCommand,\n  handleOtherServicesRequest,\n  handleHelpRequest,\n  handleCancelRequest\n};","size_bytes":11249},"modules/menuHandler/navigation.js":{"content":"// modules/menuHandler/navigation.js\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\n\n// Ana menüye dön\nasync function returnToMainMenu(message, services, contactName = '') {\n  console.log(`🏠 Ana menüye dönülüyor`);\n  \n  sessionManager.updateUserSession(message.from, { \n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {}\n  });\n  \n  const mainMenu = require('./mainMenu');\n  \n  if (contactName) {\n    await message.reply(`👋 ${contactName}, ana menüye döndünüz!`);\n  }\n  \n  await mainMenu.showMainMenu(message, services);\n}\n\n// Önceki menüye dön\nasync function goBackToPreviousMenu(message, services, currentState) {\n  console.log(`↩️ Önceki menüye dönülüyor: ${currentState}`);\n  \n  if (currentState.startsWith('submenu_')) {\n    const categoryName = currentState.replace('submenu_', '');\n    const categoryManager = require('./categoryManager');\n    const subMenu = require('./subMenu');\n    \n    const categoryData = categoryManager.loadCategoryData(categoryName, services);\n    if (categoryData) {\n      await subMenu.showCategoryOptions(message, { data: categoryData, name: categoryName }, services);\n      return;\n    }\n  }\n  \n  // Önceki menü bulunamazsa ana menüye dön\n  await returnToMainMenu(message, services);\n}\n\n// Menü geçmişini yönet\nfunction updateMenuHistory(userId, newState) {\n  const session = sessionManager.getUserSession(userId);\n  const history = session.menuHistory || [];\n  \n  // Son state'i history'e ekle (tekrarları önle)\n  if (history.length === 0 || history[history.length - 1] !== session.currentState) {\n    history.push(session.currentState);\n  }\n  \n  // History'yi sınırla (max 10)\n  if (history.length > 10) {\n    history.shift();\n  }\n  \n  sessionManager.updateUserSession(userId, { \n    menuHistory: history,\n    currentState: newState\n  });\n  \n  return history;\n}\n\n// Menü durumunu kontrol et\nfunction getMenuStateInfo(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (!session) return null;\n  \n  return {\n    currentState: session.currentState,\n    menuHistory: session.menuHistory || [],\n    inService: session.currentService !== null,\n    waitingForResponse: session.waitingForResponse || false\n  };\n}\n\n// Menü zaman aşımını kontrol et\nfunction checkMenuTimeout(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (!session || !session.lastActivity) return false;\n  \n  const timeoutDuration = 10 * 60 * 1000; // 10 dakika\n  const timeSinceLastActivity = Date.now() - session.lastActivity;\n  \n  return timeSinceLastActivity > timeoutDuration;\n}\n\nmodule.exports = {\n  returnToMainMenu,\n  goBackToPreviousMenu,\n  updateMenuHistory,\n  getMenuStateInfo,\n  checkMenuTimeout\n};","size_bytes":2827},"modules/menuHandler/numberHandler.js":{"content":"// modules/menuHandler/numberHandler.js - TAMAMEN GÜNCELLENDİ\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendNumberMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Sayı mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\n// Sayı seçimini işleme\nasync function handleNumberSelection(message, number, services) {\n  const session = sessionManager.getUserSession(message.from);\n  const currentState = session?.currentState || 'main_menu';\n\n  console.log(`🔢 Sayı işleniyor: ${number}, Durum: ${currentState}`);\n\n  // Alt menü durumu kontrolü\n  if (currentState.startsWith('submenu_')) {\n    const categoryName = currentState.replace('submenu_', '');\n    const subMenu = require('./subMenu');\n    await subMenu.handleSubMenuSelection(message, number, categoryName, services);\n    return;\n  }\n\n  // Ana menü durumu\n  const mainMenu = require('./mainMenu');\n  const mainCategories = mainMenu.getMainCategories();\n\n  // Sayı aralığını kontrol et\n  if (number >= 1 && number <= mainCategories.length) {\n    const selectedCategory = mainCategories[number - 1];\n    const categoryData = services[selectedCategory];\n    \n    if (categoryData) {\n      console.log(`✅ Kategori seçildi: ${selectedCategory}`);\n      const subMenu = require('./subMenu');\n      await subMenu.showCategoryOptions(message, { data: categoryData, name: selectedCategory }, services);\n      sessionManager.updateUserSession(message.from, { currentState: `submenu_${selectedCategory}` });\n    } else {\n      console.log(`❌ Kategori verisi bulunamadı: ${selectedCategory}`);\n      await sendNumberMessage(message, '❌ Bu kategori bulunamadı. Lütfen tekrar deneyin.');\n      \n      // Ana menüyü tekrar göster\n      setTimeout(async () => {\n        await mainMenu.showMainMenu(message, services);\n      }, 1000);\n    }\n  } else {\n    console.log(`❌ Geçersiz sayı aralığı: ${number}, Beklenen: 1-${mainCategories.length}`);\n    await sendNumberMessage(message, `❌ Geçersiz numara. Lütfen 1-${mainCategories.length} arası bir numara girin.`);\n    \n    // Ana menüyü tekrar göster\n    setTimeout(async () => {\n      await mainMenu.showMainMenu(message, services);\n    }, 1000);\n  }\n}\n\n// Sayı doğrulama\nfunction validateNumberInput(number, min, max) {\n  console.log(`🔍 Sayı doğrulanıyor: ${number}, Min: ${min}, Max: ${max}`);\n  \n  // Sayısal değilse\n  if (isNaN(number)) {\n    return { \n      isValid: false, \n      error: 'Geçersiz sayı formatı. Lütfen sadece rakam girin.' \n    };\n  }\n  \n  const parsedNumber = parseInt(number);\n  \n  // Aralık kontrolü\n  if (parsedNumber < min || parsedNumber > max) {\n    return { \n      isValid: false, \n      error: `Lütfen ${min}-${max} arası bir numara girin` \n    };\n  }\n  \n  return { \n    isValid: true, \n    number: parsedNumber \n  };\n}\n\n// Menü numaralarını formatla\nfunction formatMenuNumbers(options, startFrom = 1) {\n  console.log(`📝 Menü numaraları formatlanıyor: ${options.length} seçenek, Başlangıç: ${startFrom}`);\n  \n  const formattedOptions = options.map((option, index) => {\n    // Eğer option_number zaten varsa, onu kullan\n    if (option.option_number) {\n      return option;\n    }\n    \n    // Yoksa yeni numara ata\n    return {\n      ...option,\n      option_number: startFrom + index\n    };\n  });\n  \n  console.log(`✅ ${formattedOptions.length} seçenek formatlandı`);\n  return formattedOptions;\n}\n\n// Geçerli sayı aralığını getir\nfunction getValidNumberRange(session, services) {\n  const currentState = session?.currentState || 'main_menu';\n  \n  if (currentState.startsWith('submenu_')) {\n    const categoryName = currentState.replace('submenu_', '');\n    const categoryData = services[categoryName];\n    \n    if (categoryData && categoryData.category_options) {\n      const numbers = categoryData.category_options.map(opt => opt.option_number);\n      return {\n        min: Math.min(...numbers),\n        max: Math.max(...numbers),\n        count: numbers.length,\n        type: 'submenu'\n      };\n    }\n  } else {\n    // Ana menü\n    const mainMenu = require('./mainMenu');\n    const mainCategories = mainMenu.getMainCategories();\n    return {\n      min: 1,\n      max: mainCategories.length,\n      count: mainCategories.length,\n      type: 'main_menu'\n    };\n  }\n  \n  return {\n    min: 1,\n    max: 1,\n    count: 0,\n    type: 'unknown'\n  };\n}\n\n// Hata mesajı gönder\nasync function sendErrorMessage(message, session, services) {\n  const range = getValidNumberRange(session, services);\n  \n  let errorMessage = '';\n  \n  switch (range.type) {\n    case 'main_menu':\n      errorMessage = `❌ Geçersiz numara. Lütfen 1-${range.max} arası bir numara girin.`;\n      break;\n    case 'submenu':\n      errorMessage = `❌ Geçersiz numara. Lütfen ${range.min}-${range.max} arası bir numara girin.`;\n      break;\n    default:\n      errorMessage = '❌ Geçersiz seçim. Lütfen menüden bir numara seçin.';\n  }\n  \n  await sendNumberMessage(message, errorMessage);\n  \n  // Duruma göre uygun menüyü tekrar göster\n  setTimeout(async () => {\n    if (range.type === 'main_menu') {\n      const mainMenu = require('./mainMenu');\n      await mainMenu.showMainMenu(message, services);\n    } else if (range.type === 'submenu') {\n      const categoryName = session.currentState.replace('submenu_', '');\n      const categoryData = services[categoryName];\n      if (categoryData) {\n        const subMenu = require('./subMenu');\n        await subMenu.showCategoryOptions(message, { data: categoryData, name: categoryName }, services);\n      }\n    }\n  }, 1000);\n}\n\n// Sayı girişini işle (ana fonksiyon)\nasync function processNumberInput(message, input, services) {\n  const session = sessionManager.getUserSession(message.from);\n  const range = getValidNumberRange(session, services);\n  \n  console.log(`🔢 Sayı işleniyor: \"${input}\", Durum: ${session?.currentState}, Beklenen aralık: ${range.min}-${range.max}`);\n  \n  // Sayıyı doğrula\n  const validation = validateNumberInput(input, range.min, range.max);\n  \n  if (!validation.isValid) {\n    console.log(`❌ Sayı doğrulama başarısız: ${validation.error}`);\n    await sendNumberMessage(message, `❌ ${validation.error}`);\n    return false;\n  }\n  \n  const number = validation.number;\n  console.log(`✅ Sayı doğrulandı: ${number}`);\n  \n  // Sayıyı işle\n  await handleNumberSelection(message, number, services);\n  return true;\n}\n\n// Debug bilgilerini logla\nfunction logNumberProcessing(session, number, services) {\n  const range = getValidNumberRange(session, services);\n  \n  console.log('🔍 SAYI İŞLEME DEBUG:');\n  console.log(`- Mevcut durum: ${session?.currentState || 'main_menu'}`);\n  console.log(`- Girilen sayı: ${number}`);\n  console.log(`- Beklenen aralık: ${range.min}-${range.max}`);\n  console.log(`- Menü tipi: ${range.type}`);\n  console.log(`- Seçenek sayısı: ${range.count}`);\n  \n  if (range.type === 'submenu') {\n    const categoryName = session.currentState.replace('submenu_', '');\n    const categoryData = services[categoryName];\n    if (categoryData && categoryData.category_options) {\n      console.log(`- Mevcut seçenekler:`, categoryData.category_options.map(opt => ({\n        num: opt.option_number,\n        name: opt.category_name\n      })));\n    }\n  }\n}\n\nmodule.exports = {\n  handleNumberSelection,\n  validateNumberInput,\n  formatMenuNumbers,\n  getValidNumberRange,\n  sendErrorMessage,\n  processNumberInput,\n  logNumberProcessing\n};","size_bytes":7744},"micro-modules/message/handleSaleResponse.js":{"content":"// micro-modules/message/handleSaleResponse.js\nconst findYesilSigortaService = require('../service/findYesilSigortaService');\nconst startServiceFlow = require('../service/startServiceFlow');\nconst endConversation = require('./endConversation');\n\nasync function handleSaleResponse(message, response, services) {\n  const cleanResponse = response.toLowerCase().trim();\n  \n  const positiveResponses = ['evet', 'yes', 'ok', 'tamam', 'başla', 'başlayalım', 'oluştur', 'yapalım', '✅'];\n  const negativeResponses = ['hayır', 'no', 'yok', 'later', 'sonra', '❌'];\n  \n  if (positiveResponses.some(pos => cleanResponse.includes(pos))) {\n    await message.reply('🎉 Harika! Yeşil Sigorta poliçenizi oluşturmaya başlıyorum...');\n    \n    const yesilSigortaService = findYesilSigortaService(services);\n    if (yesilSigortaService) {\n      const sessionManager = require('../../core/sessionManager');\n      sessionManager.clearSaleTimer(message.from);\n      await startServiceFlow(message, yesilSigortaService);\n    } else {\n      await message.reply('❌ Yeşil Sigorta servisi bulunamadı. Lütfen daha sonra tekrar deneyin.');\n      await endConversation(message);\n    }\n    \n  } else if (negativeResponses.some(neg => cleanResponse.includes(neg))) {\n    await message.reply('👍 Anladım. Yeşil Sigorta ihtiyacınız olduğunda buradayım! 🛡️');\n    await endConversation(message);\n    \n  } else {\n    await message.reply('❌ Anlayamadım. Lütfen *Evet* veya *Hayır* olarak cevap verin.\\n\\n' +\n                       '✅ *Evet* - Poliçe oluşturmaya başlayalım\\n' +\n                       '❌ *Hayır* - Şimdilik sadece fiyat bilgisi yeterli');\n  }\n}\n\nmodule.exports = handleSaleResponse;","size_bytes":1709},"modules/menuHandler/mainMenu.js":{"content":"// modules/menuHandler/mainMenu.js - GÜNCELLENDİ\nconst logger = require('../logger');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Ana menü göster - GÜNCELLENDİ\nasync function showMainMenu(message, services) {\n  let menuText = `📋 *ANA HİZMET KATEGORİLERİ*\\n\\n`;\n  \n  const mainCategories = [\n    '🛡️  Sigorta Hizmetleri',\n    '💻 Yazılım Talepleri', \n    '🔒 Siber Güvenlik',\n    '🚚 Lojistik Hizmetleri',\n    '🌍 İthalat İhracat',\n    '📊 Profesyonel Denetleme',\n    '🏠 İnşaat Emlak',\n    '🤝 CRM Hizmetleri',\n    '👕 Tekstil Ürünleri',\n    '💄 Kozmetik Ürünleri',\n    '✈️  Tur Organizasyon',\n    '☀️  Güneş Enerjisi',\n    '🏢 Kurumsal Hizmetler'\n  ];\n  \n  mainCategories.forEach((category, index) => {\n    menuText += `${index + 1}. ${category}\\n`;\n  });\n  \n  menuText += `\\nİlgilendiğiniz hizmetin *numarasını* yazın veya *doğrudan hizmet adını* belirtin.`;\n  \n  try {\n    await sendMessageWithoutQuote(message.from, menuText);\n  } catch (error) {\n    console.error('Menü gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(menuText);\n  }\n  \n  // Menü gösterildikten sonra timer başlat\n  const sessionManager = require('../sessionManager');\n  sessionManager.startMenuTimer(message.from, message, services);\n}\n\n// Ana menü kategorilerini getir\nfunction getMainCategories() {\n  return [\n    'sigorta_ana_kategori',\n    'yazilim_talepleri_ana_kategori', \n    'siber_guvenlik_ana',\n    'lojistik_hizmetleri_ana',\n    'ithalat_ihracat_ana',\n    'profesyonel_denetleme_ana',\n    'insaat_emlak_ana',\n    'crm_hizmetleri_ana',\n    'tekstil_urunleri_ana',\n    'kozmetik_urunleri_ana',\n    'tur_organizasyon_ana',\n    'gunes_enerjisi_sistemleri_ana',\n    'kurumsal_hizmetler_ana'\n  ];\n}\n\nmodule.exports = {\n  showMainMenu,\n  getMainCategories\n};","size_bytes":1873},"modules/saleFlow/saleManager.js":{"content":"// modules/saleFlow/saleManager.js - GÜNCELLENDİ\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendSaleMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Satış mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\n// Satış teklifi sorma - GÜNCELLENDİ\nasync function askForSale(message) {\n  const saleQuestion = `🎯 *Yeşil Sigorta Poliçenizi hemen düzenleyelim mi?*\\n\\n` +\n                      `Poliçenizi oluşturmak için sadece birkaç bilgiye ihtiyacımız var.\\n\\n` +\n                      `✅ *Evet* - Poliçe oluşturmaya başlayalım\\n` +\n                      `❌ *Hayır* - Şimdilik sadece fiyat bilgisi yeterli`;\n  \n  await sendSaleMessage(message, saleQuestion);\n  \n  // Satış oturumu başlat\n  const timeoutManager = require('./timeoutManager');\n  timeoutManager.startSaleTimeout(message.from, message);\n}\n\n// Satış teklifi formatları\nfunction getSaleQuestions() {\n  return {\n    yesil_sigorta: {\n      question: `🎯 *Yeşil Sigorta Poliçenizi hemen düzenleyelim mi?*`,\n      options: `✅ *Evet* - Poliçe oluşturmaya başlayalım\\n❌ *Hayır* - Şimdilik sadece fiyat bilgisi yeterli`\n    },\n    trafik_sigortasi: {\n      question: `🎯 *Trafik Sigortası poliçenizi hemen oluşturalım mı?*`,\n      options: `✅ *Evet* - Poliçe oluşturmaya başlayalım\\n❌ *Hayır* - Şimdilik sadece fiyat bilgisi yeterli`\n    }\n  };\n}\n\n// Servise özel satış sorusu oluştur - GÜNCELLENDİ\nasync function askServiceSpecificSale(message, serviceName) {\n  const questions = getSaleQuestions();\n  const serviceQuestion = questions[serviceName] || questions['yesil_sigorta'];\n  \n  const saleQuestion = `${serviceQuestion.question}\\n\\n${serviceQuestion.options}`;\n  \n  await sendSaleMessage(message, saleQuestion);\n  \n  // Satış oturumu başlat\n  const timeoutManager = require('./timeoutManager');\n  timeoutManager.startSaleTimeout(message.from, message);\n}\n\nmodule.exports = {\n  askForSale,\n  askServiceSpecificSale,\n  getSaleQuestions\n};","size_bytes":2291},"modules/validationUtils.js":{"content":"// Cevap doğrulama\nfunction validateAnswer(answer, fieldType) {\n  const cleanAnswer = answer.trim();\n  \n  switch (fieldType) {\n    case 'number':\n      const number = parseInt(cleanAnswer);\n      if (isNaN(number)) {\n        return {\n          isValid: false,\n          errorMessage: 'Geçersiz sayı formatı. Lütfen sadece rakam girin.'\n        };\n      }\n      return { isValid: true, cleanedValue: number };\n      \n    case 'date':\n      const dateRegex = /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/;\n      const match = cleanAnswer.match(dateRegex);\n      if (!match) {\n        return {\n          isValid: false,\n          errorMessage: 'Geçersiz tarih formatı. Lütfen Gün/Ay/Yıl formatında girin (Örnek: 15/01/2024).'\n        };\n      }\n      return { isValid: true, cleanedValue: cleanAnswer };\n      \n    case 'phone':\n      const phoneRegex = /^[5][0-9]{2}\\s?[0-9]{3}\\s?[0-9]{2}\\s?[0-9]{2}$/;\n      const cleanPhone = cleanAnswer.replace(/\\s/g, '');\n      if (!phoneRegex.test(cleanPhone)) {\n        return {\n          isValid: false,\n          errorMessage: 'Geçersiz telefon formatı. Lütfen 5XX XXX XX XX formatında girin.'\n        };\n      }\n      return { isValid: true, cleanedValue: cleanAnswer };\n      \n    case 'text':\n    default:\n      if (cleanAnswer.length < 2) {\n        return {\n          isValid: false,\n          errorMessage: 'Cevap çok kısa. Lütfen daha detaylı bilgi verin.'\n        };\n      }\n      return { isValid: true, cleanedValue: cleanAnswer };\n  }\n}\n\nmodule.exports = {\n  validateAnswer\n};","size_bytes":1534},"modules/messageHandler/serviceMatcher.js":{"content":"// modules/messageHandler/serviceMatcher.js - TAMAMEN GÜNCELLENDİ\nconst logger = require('../logger');\nconst serviceLoader = require('../serviceLoader');\n\nfunction findMatchingService(message, services) {\n  const cleanMessage = message.toLowerCase().replace(/[.,!?]/g, '').trim();\n  \n  console.log(`🔍 Servis aranıyor: \"${cleanMessage}\"`);\n\n  // ÖNCE: KİMLİK VE TANITIM SORULARI\n  const kimlikSorulari = {\n    'sen kimsin': 'kimlik_tanitim',\n    'sen kimsiniz': 'kimlik_tanitim',\n    'siz kimsiniz': 'kimlik_tanitim',\n    'ne yapıyorsun': 'kimlik_tanitim',\n    'ne yapiyorsun': 'kimlik_tanitim',\n    'ne yapıyorsunuz': 'kimlik_tanitim',\n    'ne yapiyorsunuz': 'kimlik_tanitim',\n    'gerçek insan mısın': 'kimlik_tanitim',\n    'gercek insan misin': 'kimlik_tanitim',\n    'insan mısın': 'kimlik_tanitim',\n    'insan misin': 'kimlik_tanitim',\n    'robot musun': 'kimlik_tanitim',\n    'yapay zeka mısın': 'kimlik_tanitim',\n    'yapay zeka misin': 'kimlik_tanitim',\n    'ai mısın': 'kimlik_tanitim',\n    'ai misin': 'kimlik_tanitim'\n  };\n\n  // SONRA: İLETİŞİM VE DESTEK SORULARI\n  const iletisimSorulari = {\n    'insan ile görüş': 'iletisim_destek',\n    'insan ile gorus': 'iletisim_destek',\n    'telefon numarası': 'iletisim_destek',\n    'telefon numarasi': 'iletisim_destek',\n    'numara ver': 'iletisim_destek',\n    'web sitesi': 'iletisim_destek',\n    'web adresi': 'iletisim_destek',\n    'iletişim': 'iletisim_destek',\n    'iletisim': 'iletisim_destek',\n    'müşteri hizmetleri': 'iletisim_destek',\n    'musteri hizmetleri': 'iletisim_destek',\n    'destek': 'iletisim_destek',\n    'canlı destek': 'iletisim_destek',\n    'canli destek': 'iletisim_destek'\n  };\n\n  // FİRMA BİLGİSİ SORULARI\n  const firmaSorulari = {\n    'firma bilgisi': 'firma_bilgileri',\n    'şirket bilgisi': 'firma_bilgileri',\n    'sirket bilgisi': 'firma_bilgileri',\n    'hangi hizmetler': 'firma_bilgileri',\n    'hizmet alanları': 'firma_bilgileri',\n    'hizmet alanlari': 'firma_bilgileri',\n    'neler yapıyorsunuz': 'firma_bilgileri',\n    'neler yapiyorsunuz': 'firma_bilgileri',\n    'hangi sektörler': 'firma_bilgileri',\n    'hangi sektorler': 'firma_bilgileri'\n  };\n\n  // 1. ÖNCE KİMLİK SORULARINI KONTROL ET\n  for (const [soru, dosya] of Object.entries(kimlikSorulari)) {\n    if (cleanMessage.includes(soru)) {\n      console.log(`🎯 Kimlik sorusu eşleşti: \"${soru}\" -> ${dosya}`);\n      return createDiyalogCevabi(soru, dosya, 'kimlik');\n    }\n  }\n\n  // 2. İLETİŞİM SORULARINI KONTROL ET\n  for (const [soru, dosya] of Object.entries(iletisimSorulari)) {\n    if (cleanMessage.includes(soru)) {\n      console.log(`📞 İletişim sorusu eşleşti: \"${soru}\" -> ${dosya}`);\n      return createDiyalogCevabi(soru, dosya, 'iletisim');\n    }\n  }\n\n  // 3. FİRMA BİLGİSİ SORULARINI KONTROL ET\n  for (const [soru, dosya] of Object.entries(firmaSorulari)) {\n    if (cleanMessage.includes(soru)) {\n      console.log(`🏢 Firma sorusu eşleşti: \"${soru}\" -> ${dosya}`);\n      return createDiyalogCevabi(soru, dosya, 'firma');\n    }\n  }\n\n  // FİYAT SORGULARI\n  const priceQueries = {\n    'yeşil sigorta fiyat': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta fiyat': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta fiyatı': 'yesil_sigorta_fiyatlari', \n    'yesil sigorta fiyati': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta ne kadar': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta ne kadar': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta ücreti': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta ucreti': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta fiyatları': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta fiyatlari': 'yesil_sigorta_fiyatlari',\n    'trafik sigortası fiyat': 'trafik_sigortasi_fiyat_akisi',\n    'trafik sigortasi fiyat': 'trafik_sigortasi_fiyat_akisi'\n  };\n\n  for (const [priceQuery, serviceKey] of Object.entries(priceQueries)) {\n    if (cleanMessage.includes(priceQuery)) {\n      console.log(`💰 Fiyat sorgusu eşleşti: \"${priceQuery}\" -> ${serviceKey}`);\n      \n      if (services['fiyat_listeleri'] && services['fiyat_listeleri'][serviceKey]) {\n        return { \n          type: 'service', \n          data: services['fiyat_listeleri'][serviceKey], \n          category: 'fiyat_listeleri', \n          name: serviceKey \n        };\n      }\n    }\n  }\n\n  // TAM EŞLEŞMELER - TÜM SERVİSLER\n  const exactMatches = {\n    // === SİGORTA HİZMETLERİ ===\n    'yeşil sigorta': 'yesil_sigorta',\n    'yesil sigorta': 'yesil_sigorta',\n    'trafik sigortası': 'trafik_sigortasi',\n    'trafik sigortasi': 'trafik_sigortasi',\n    'kasko sigortası': 'kasko',\n    'kasko sigortasi': 'kasko',\n    'koltuk sigortası': 'koltuk_sigortasi',\n    'koltuk sigortasi': 'koltuk_sigortasi',\n    'dask sigortası': 'dask',\n    'dask sigortasi': 'dask',\n    'konut sigortası': 'konut_sigortasi',\n    'konut sigortasi': 'konut_sigortasi',\n    'işyeri sigortası': 'isyeri_sigortasi',\n    'isyeri sigortasi': 'isyeri_sigortasi',\n    'seyahat sağlık sigortası': 'seyahat_saglik_sigortasi',\n    'seyahat saglik sigortasi': 'seyahat_saglik_sigortasi',\n    'tamamlayıcı sağlık sigortası': 'tamamlayici_saglik_sigortasi',\n    'tamamlayici saglik sigortasi': 'tamamlayici_saglik_sigortasi',\n    'özel sağlık sigortası': 'ozel_saglik_sigortasi',\n    'ozel saglik sigortasi': 'ozel_saglik_sigortasi',\n\n    // === YAZILIM TALEPLERİ ===\n    'özel yazılım geliştirme': 'ozel_yazilim_gelistirme',\n    'ozel yazilim geliştirme': 'ozel_yazilim_gelistirme',\n    'yazılım geliştirme': 'ozel_yazilim_gelistirme',\n    'yazilim geliştirme': 'ozel_yazilim_gelistirme',\n    'mobil uygulama geliştirme': 'mobil_uygulama_gelistirme',\n    'mobil uygulama': 'mobil_uygulama_gelistirme',\n    'uygulama geliştirme': 'mobil_uygulama_gelistirme',\n\n    // === SİBER GÜVENLİK ===\n    'genel ağ güvenliği': 'genel_ag_guvenligi',\n    'genel ag guvenligi': 'genel_ag_guvenligi',\n    'kullanıcı güvenliği': 'kullanici_guvenligi',\n    'kullanici guvenligi': 'kullanici_guvenligi',\n    'veri güvenliği': 'veri_guvenligi',\n    'veri guvenligi': 'veri_guvenligi',\n    'uygulama güvenliği': 'uygulama_guvenligi',\n    'uygulama guvenligi': 'uygulama_guvenligi',\n    'kimlik ve erişim yönetimi': 'kimlik_erisim_yonetimi',\n    'kimlik erisim yonetimi': 'kimlik_erisim_yonetimi',\n    'güvenlik yönetimi': 'guvenlik_yonetimi',\n    'guvenlik yonetimi': 'guvenlik_yonetimi',\n    'penetrasyon test talebi': 'penetrasyon_test_talebi',\n    'penetrasyon test': 'penetrasyon_test_talebi',\n    'siber güvenlik eğitimi': 'egitim_talepleri',\n    'siber guvenlik egitimi': 'egitim_talepleri',\n\n    // === LOJİSTİK HİZMETLERİ ===\n    'yurtiçi yük nakli': 'yurtici_yuk_nakli',\n    'yurtici yuk nakli': 'yurtici_yuk_nakli',\n    'yurtiçi nakliye': 'yurtici_yuk_nakli',\n    'yurtdışı yük nakli': 'yurtdisi_yuk_nakli',\n    'yurtdisi yuk nakli': 'yurtdisi_yuk_nakli',\n    'yurtdışı nakliye': 'yurtdisi_yuk_nakli',\n    'depo antrepo hizmeti': 'depo_antrepo_hizmeti',\n    'depo hizmeti': 'depo_antrepo_hizmeti',\n    'antrepo hizmeti': 'depo_antrepo_hizmeti',\n\n    // === İTHALAT İHRACAT ===\n    'yurtdışı müşteri araştırma': 'yurtdisi_musteri_arastirma',\n    'yurtdisi musteri arastirma': 'yurtdisi_musteri_arastirma',\n    'yurtiçi tedarikçi araştırma': 'yurtici_tedarikci_arastirma',\n    'yurtici tedarikci arastirma': 'yurtici_tedarikci_arastirma',\n    'gümrük operasyon hizmetleri': 'gumruk_operasyon_hizmetleri',\n    'gumruk operasyon hizmetleri': 'gumruk_operasyon_hizmetleri',\n    'gümrük hizmetleri': 'gumruk_operasyon_hizmetleri',\n    'yurtiçi ürün araştırma': 'yurtici_urun_arastirma',\n    'yurtici urun arastirma': 'yurtici_urun_arastirma',\n    'yurtdışı pazar araştırma': 'yurtdisi_pazar_arastirma',\n    'yurtdisi pazar arastirma': 'yurtdisi_pazar_arastirma',\n\n    // === PROFESYONEL DENETLEME ===\n    'iç denetim hizmeti': 'ic_denetim_hizmeti',\n    'ic denetim hizmeti': 'ic_denetim_hizmeti',\n    'tedarikçi müşteri mali denetim': 'tedarikci_musteri_mali_denetim',\n    'tedarikci musteri mali denetim': 'tedarikci_musteri_mali_denetim',\n    'tedarikçi kalite denetim': 'tedarikci_kalite_denetim',\n    'tedarikci kalite denetim': 'tedarikci_kalite_denetim',\n    'tedarikçi üretim denetleme': 'tedarikci_uretim_denetleme',\n    'tedarikci uretim denetleme': 'tedarikci_uretim_denetleme',\n    'firma temsil hizmeti': 'firma_temsil_hizmeti',\n\n    // === İNŞAAT EMLAK ===\n    'satılık gayrimenkul': 'satilik_gayrimenkul',\n    'satilik gayrimenkul': 'satilik_gayrimenkul',\n    'kiralık gayrimenkul': 'kiralik_gayrimenkul',\n    'kiralik gayrimenkul': 'kiralik_gayrimenkul',\n    'yurtdışı gayrimenkul yatırım': 'yurtdisi_gayrimenkul_yatirim',\n    'yurtdisi gayrimenkul yatirim': 'yurtdisi_gayrimenkul_yatirim',\n    'inşaat taahhüt hizmeti': 'insaat_taahhut_hizmeti',\n    'insaat taahhut hizmeti': 'insaat_taahhut_hizmeti',\n\n    // === CRM HİZMETLERİ ===\n    'müşteri seçimi': 'musteri_secimi',\n    'musteri secimi': 'musteri_secimi',\n    'müşteri edinme': 'musteri_edinme',\n    'musteri edinme': 'musteri_edinme',\n    'müşteri koruma': 'musteri_koruma',\n    'musteri koruma': 'musteri_koruma',\n    'müşteri derinleştirme': 'musteri_derinlestirme',\n    'musteri derinlestirme': 'musteri_derinlestirme',\n\n    // === TEKSTİL ÜRÜNLERİ ===\n    'erkek giyim': 'erkek_giyim',\n    'kadın giyim': 'kadin_giyim',\n    'kadin giyim': 'kadin_giyim',\n    'ev tekstil ürünleri': 'ev_tekstil_urunleri',\n    'ev tekstil urunleri': 'ev_tekstil_urunleri',\n\n    // === KOZMETİK ÜRÜNLERİ ===\n    'parfüm': 'parfum',\n    'parfum': 'parfum',\n    'deodorant': 'deodorant',\n    'kişisel bakım': 'kisisel_bakim',\n    'kisisel bakim': 'kisisel_bakim',\n    'medikal kozmetik': 'medikal_kozmetik',\n\n    // === TUR ORGANİZASYON ===\n    'yurtiçi özel gezi talebi': 'yurtici_ozel_gezi_talebi',\n    'yurtici ozel gezi talebi': 'yurtici_ozel_gezi_talebi',\n    'yurtdışı özel gezi talebi': 'yurtdisi_ozel_gezi_talebi',\n    'yurtdisi ozel gezi talebi': 'yurtdisi_ozel_gezi_talebi',\n    'personel servis talebi': 'personel_servis_talebi',\n\n    // === GÜNEŞ ENERJİSİ SİSTEMLERİ ===\n    'güneş verimlilik hesabı': 'gunes_verimlilik_hesabi',\n    'gunes verimlilik hesabi': 'gunes_verimlilik_hesabi',\n    'ges üretim hesaplama': 'ges_uretim_hesaplama',\n    'ges uretim hesaplama': 'ges_uretim_hesaplama',\n    'ges kurulum hesaplama': 'ges_kurulum_hesaplama',\n\n    // === KURUMSAL HİZMETLER ===\n    'insan kaynakları danışmanlığı': 'insan_kaynaklari_danismanligi',\n    'stratejik planlama danışmanlığı': 'stratejik_planlama_danismanligi',\n    'finansal danışmanlık': 'finansal_danismanlik',\n    'operasyonel iyileştirme': 'operasyonel_iyilestirme',\n    'kurumsal iletişim danışmanlığı': 'kurumsal_iletisim_danismanligi',\n    'yasal danışmanlık': 'yasal_danismanlik',\n    'teknoloji danışmanlığı': 'teknoloji_danismanligi',\n    'kurumsal eğitim hizmetleri': 'kurumsal_egitim_hizmetleri'\n  };\n\n  for (const [exactPhrase, serviceKey] of Object.entries(exactMatches)) {\n    if (cleanMessage.includes(exactPhrase.toLowerCase())) {\n      console.log(`✅ Tam ifade eşleşti: \"${exactPhrase}\" -> ${serviceKey}`);\n      \n      // Önce servis olarak ara\n      for (const [categoryName, categoryServices] of Object.entries(services)) {\n        if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n          return { \n            type: 'service', \n            data: categoryServices[serviceKey], \n            category: categoryName, \n            name: serviceKey \n          };\n        }\n      }\n      \n      // Servis bulunamazsa kategori olarak ara\n      if (services[serviceKey]) {\n        return { type: 'category', data: services[serviceKey], name: serviceKey };\n      }\n    }\n  }\n\n  // ANAHTAR KELİMELER (kategori eşleştirme)\n  const keywordMatches = {\n    'sigorta': 'sigorta_ana_kategori',\n    'yazılım': 'yazilim_talepleri_ana_kategori',\n    'yazilim': 'yazilim_talepleri_ana_kategori',\n    'siber': 'siber_guvenlik_ana',\n    'güvenlik': 'siber_guvenlik_ana',\n    'lojistik': 'lojistik_hizmetleri_ana',\n    'nakliye': 'lojistik_hizmetleri_ana',\n    'ithalat': 'ithalat_ihracat_ana',\n    'ihracat': 'ithalat_ihracat_ana',\n    'denetim': 'profesyonel_denetleme_ana',\n    'denetleme': 'profesyonel_denetleme_ana',\n    'emlak': 'insaat_emlak_ana',\n    'inşaat': 'insaat_emlak_ana',\n    'crm': 'crm_hizmetleri_ana',\n    'tekstil': 'tekstil_urunleri_ana',\n    'kozmetik': 'kozmetik_urunleri_ana',\n    'tur': 'tur_organizasyon_ana',\n    'turizm': 'tur_organizasyon_ana',\n    'güneş': 'gunes_enerjisi_sistemleri_ana',\n    'enerji': 'gunes_enerjisi_sistemleri_ana',\n    'kurumsal': 'kurumsal_hizmetler_ana',\n    'danışmanlık': 'kurumsal_hizmetler_ana'\n  };\n\n  for (const [keyword, serviceKey] of Object.entries(keywordMatches)) {\n    if (cleanMessage.includes(keyword)) {\n      console.log(`✅ Anahtar kelime eşleşti: \"${keyword}\" -> ${serviceKey}`);\n      \n      const categoryData = services[serviceKey];\n      if (categoryData) {\n        console.log(`✅ Kategori bulundu: ${serviceKey}`);\n        return { type: 'category', data: categoryData, name: serviceKey };\n      } else {\n        console.log(`❌ Kategori bulunamadı: ${serviceKey}`);\n        // Alternatif kategori isimlerini dene\n        const alternativeKeys = Object.keys(services).filter(key => \n          key.includes(keyword.replace(/[^a-z0-9]/gi, ''))\n        );\n        if (alternativeKeys.length > 0) {\n          console.log(`🔄 Alternatif kategoriler:`, alternativeKeys);\n          const alternativeKey = alternativeKeys[0];\n          return { type: 'category', data: services[alternativeKey], name: alternativeKey };\n        }\n      }\n    }\n  }\n\n  console.log('❌ Eşleşme bulunamadı');\n  return null;\n}\n\n// Diyalog cevabı oluşturma fonksiyonu - GÜNCELLENDİ\nfunction createDiyalogCevabi(soru, dosyaAdi, tip) {\n  try {\n    console.log(`💬 Diyalog cevabı oluşturuluyor: ${dosyaAdi}.json, Tip: ${tip}`);\n    \n    const diyalogDosyasi = serviceLoader.loadJSON(`./genel_diyalog/${dosyaAdi}.json`);\n    \n    if (!diyalogDosyasi) {\n      console.log(`❌ Diyalog dosyası bulunamadı: ${dosyaAdi}`);\n      return createFallbackCevap(tip);\n    }\n\n    let cevap = '';\n    \n    switch (tip) {\n      case 'kimlik':\n        const kimlikCevaplari = diyalogDosyasi.kimlik_sorulari;\n        if (kimlikCevaplari) {\n          if (soru.includes('sen kimsin')) {\n            cevap = kimlikCevaplari.sen_kimsin;\n          } else if (soru.includes('ne yap')) {\n            cevap = kimlikCevaplari.ne_isyapiyorsun;\n          } else if (soru.includes('insan') || soru.includes('robot') || soru.includes('yapay zeka')) {\n            cevap = kimlikCevaplari.gercek_insan_misin;\n          }\n        }\n        break;\n        \n      case 'iletisim':\n        const iletisimCevaplari = diyalogDosyasi.insan_destegi;\n        if (iletisimCevaplari) {\n          if (soru.includes('insan ile') || soru.includes('canlı')) {\n            cevap = iletisimCevaplari.insan_ile_gorus;\n          } else if (soru.includes('telefon') || soru.includes('numara')) {\n            cevap = iletisimCevaplari.telefon_numarasi;\n          } else if (soru.includes('web') || soru.includes('site')) {\n            cevap = iletisimCevaplari.web_sitesi;\n          } else {\n            cevap = iletisimCevaplari.insan_ile_gorus;\n          }\n        }\n        break;\n        \n      case 'firma':\n        const firmaBilgisi = diyalogDosyasi;\n        if (firmaBilgisi && firmaBilgisi.hizmet_alanlari) {\n          cevap = `🏢 *${firmaBilgisi.firma_adi || 'PlanB Global Network Ltd Şti'}*\\n\\n` +\n                 `📋 *Hizmet Alanları:*\\n` +\n                 firmaBilgisi.hizmet_alanlari.map((hizmet, index) => `${index + 1}. ${hizmet}`).join('\\n') +\n                 `\\n\\n${firmaBilgisi.iletisim || 'İnsan desteğine ihtiyaç duyduğunuzda sizi ilgili departmanlara yönlendirebilirim.'}`;\n        }\n        break;\n    }\n\n    if (cevap) {\n      console.log(`✅ Diyalog cevabı oluşturuldu: ${tip}`);\n      return {\n        type: 'diyalog',\n        data: { cevap: cevap },\n        category: 'genel_diyalog',\n        name: dosyaAdi\n      };\n    }\n    \n  } catch (error) {\n    console.log(`❌ Diyalog cevabı oluşturma hatası: ${error.message}`);\n  }\n  \n  return createFallbackCevap(tip);\n}\n\n// Fallback cevap oluşturma\nfunction createFallbackCevap(tip) {\n  let cevap = '';\n  \n  switch (tip) {\n    case 'kimlik':\n      cevap = 'Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?';\n      break;\n    case 'iletisim':\n      cevap = 'İnsan desteğine ihtiyaç duyduğunuzda sizi ilgili departmanlara yönlendirebilirim. Hangi konuda yardıma ihtiyacınız var?';\n      break;\n    case 'firma':\n      cevap = `🏢 *PlanB Global Network Ltd Şti*\\n\\n` +\n             `📋 *Hizmet Alanları:*\\n` +\n             `1. Sigorta Hizmetleri\\n2. Yazılım Talepleri\\n3. Siber Güvenlik\\n4. Lojistik Hizmetleri\\n5. İthalat İhracat\\n6. Profesyonel Denetleme\\n7. İnşaat Emlak\\n8. CRM Hizmetleri\\n9. Tekstil Ürünleri\\n10. Kozmetik Ürünleri\\n11. Tur Organizasyon\\n12. Güneş Enerjisi Sistemleri\\n13. Kurumsal Hizmetler\\n\\n` +\n             `İnsan desteğine ihtiyaç duyduğunuzda sizi ilgili departmanlara yönlendirebilirim.`;\n      break;\n  }\n  \n  return {\n    type: 'diyalog',\n    data: { cevap: cevap },\n    category: 'genel_diyalog',\n    name: 'fallback'\n  };\n}\n\nmodule.exports = {\n  findMatchingService\n};","size_bytes":17535},"micro-modules/message/processServiceRequest.js":{"content":"// micro-modules/message/processServiceRequest.js\nconst findMatchingService = require('../utils/findMatchingService');\nconst showCategoryOptions = require('../menu/showCategoryOptions');\nconst startServiceFlow = require('../service/startServiceFlow');\nconst handleUnknownMessage = require('./handleUnknownMessage');\nconst sessionManager = require('../../core/sessionManager');\n\nasync function processServiceRequest(message, serviceRequest, services) {\n  const matchedService = findMatchingService(serviceRequest, services);\n  if (matchedService) {\n    if (matchedService.type === 'category') {\n      await showCategoryOptions(message, matchedService, services);\n      sessionManager.updateUserSession(message.from, { currentState: `submenu_${matchedService.name}` });\n    } else {\n      await startServiceFlow(message, matchedService);\n    }\n  } else {\n    await handleUnknownMessage(message, services);\n  }\n}\n\nmodule.exports = processServiceRequest;","size_bytes":950},"modules/messageHandler/errorHandler.js":{"content":"// modules/messageHandler/errorHandler.js - GÜNCELLENDİ\nconst logger = require('../logger');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendErrorMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Hata mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\nasync function handleError(message, error) {\n  logger.error(`Mesaj işleme hatası: ${error.message}`);\n  console.error('❌ Mesaj işlenirken hata:', error);\n  \n  try {\n    await sendErrorMessage(message, '❌ Üzgünüm, bir hata oluştu. Lütfen tekrar deneyin.');\n    \n    // Hata detayını logla\n    const errorDetails = {\n      userId: message.from,\n      message: message.body,\n      error: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    };\n    \n    logger.error(`Hata detayları: ${JSON.stringify(errorDetails)}`);\n    \n  } catch (replyError) {\n    logger.error(`Hata mesajı gönderilemedi: ${replyError.message}`);\n  }\n}\n\nasync function handleMediaError(message) {\n  try {\n    await sendErrorMessage(message, '📎 Şu anda sadece metin mesajlarını işleyebiliyorum. Lütfen metin olarak yazın.');\n  } catch (error) {\n    logger.error(`Medya hatası mesajı gönderilemedi: ${error.message}`);\n  }\n}\n\nasync function handleUnknownCommand(message, contactName = '') {\n  const personalization = require('./personalization');\n  const unknownText = personalization.createPersonalizedUnknownMessage(contactName);\n  \n  try {\n    await sendErrorMessage(message, `${unknownText}\\n\\n` +\n                       `• \"sigorta\" - Sigorta hizmetleri\\n` +\n                       `• \"yazılım\" - Yazılım geliştirme\\n` +\n                       `• \"lojistik\" - Nakliye hizmetleri\\n` +\n                       `• Veya diğer hizmetlerimiz...\\n\\n` +\n                       `Yardım için \"menü\" yazabilirsiniz.`);\n  } catch (error) {\n    logger.error(`Bilinmeyen komut mesajı gönderilemedi: ${error.message}`);\n  }\n}\n\nmodule.exports = {\n  handleError,\n  handleMediaError,\n  handleUnknownCommand\n};","size_bytes":2227},"micro-modules/service/askNextQuestion.js":{"content":"// micro-modules/service/askNextQuestion.js\nconst sessionManager = require('../../core/sessionManager');\n\nasync function askNextQuestion(message, session) {\n  const currentQuestion = session.currentQuestions[session.currentQuestionIndex];\n  \n  if (currentQuestion) {\n    let questionText = `📝 *Soru ${session.currentQuestionIndex + 1}/${session.currentQuestions.length}*\\n\\n`;\n    questionText += `${currentQuestion.question}`;\n    \n    if (currentQuestion.field_type === 'number') {\n      questionText += `\\n\\n💡 *Lütfen sadece sayı giriniz.*`;\n    } else if (currentQuestion.field_type === 'date') {\n      questionText += `\\n\\n💡 *Format: Gün/Ay/Yıl (Örnek: 15/01/2024)*`;\n    } else if (currentQuestion.field_type === 'phone') {\n      questionText += `\\n\\n💡 *Format: 5XX XXX XX XX*`;\n    }\n    \n    await message.reply(questionText);\n    \n    sessionManager.updateUserSession(message.from, {\n      currentState: 'collecting_answer',\n      waitingForResponse: true\n    });\n  } else {\n    const completeServiceFlow = require('./completeServiceFlow');\n    await completeServiceFlow(message, session);\n  }\n}\n\nmodule.exports = askNextQuestion;","size_bytes":1156},"micro-modules/service/handleAnswer.js":{"content":"// micro-modules/service/handleAnswer.js\nconst sessionManager = require('../../core/sessionManager');\nconst validationUtils = require('../../core/validationUtils');\nconst askNextQuestion = require('./askNextQuestion');\nconst completeServiceFlow = require('./completeServiceFlow');\n\nasync function handleAnswer(message, answer, session) {\n  const currentQuestion = session.currentQuestions[session.currentQuestionIndex];\n  const fieldName = currentQuestion.field_name;\n  \n  const validationResult = validationUtils.validateAnswer(answer, currentQuestion.field_type);\n  \n  if (!validationResult.isValid) {\n    await message.reply(`❌ ${validationResult.errorMessage}\\n\\nLütfen tekrar cevap verin:`);\n    return false;\n  }\n  \n  const updatedAnswers = {\n    ...session.collectedAnswers,\n    [fieldName]: validationResult.cleanedValue\n  };\n  \n  sessionManager.updateUserSession(message.from, {\n    collectedAnswers: updatedAnswers,\n    currentQuestionIndex: session.currentQuestionIndex + 1\n  });\n  \n  const updatedSession = sessionManager.getUserSession(message.from);\n  if (updatedSession.currentQuestionIndex < updatedSession.currentQuestions.length) {\n    await askNextQuestion(message, updatedSession);\n  } else {\n    await completeServiceFlow(message, updatedSession);\n  }\n  \n  return true;\n}\n\nmodule.exports = handleAnswer;","size_bytes":1327},"micro-modules/menu/handleNumberSelection.js":{"content":"// micro-modules/menu/handleNumberSelection.js\nconst sessionManager = require('../../core/sessionManager');\nconst handleSubMenuSelection = require('./handleSubMenuSelection');\nconst showCategoryOptions = require('./showCategoryOptions');\n\nasync function handleNumberSelection(message, number, services) {\n  const session = sessionManager.getUserSession(message.from);\n  const currentState = session?.currentState || 'main_menu';\n\n  console.log(`🔢 Sayı işleniyor: ${number}, Durum: ${currentState}`);\n\n  if (currentState.startsWith('submenu_')) {\n    const categoryName = currentState.replace('submenu_', '');\n    await handleSubMenuSelection(message, number, categoryName, services);\n    return;\n  }\n\n  const mainCategories = [\n    'sigorta_ana_kategori',\n    'yazilim_talepleri_ana_kategori', \n    'siber_guvenlik_ana',\n    'lojistik_hizmetleri_ana',\n    'ithalat_ihracat_ana',\n    'profesyonel_denetleme_ana',\n    'insaat_emlak_ana',\n    'crm_hizmetleri_ana',\n    'tekstil_urunleri_ana',\n    'kozmetik_urunleri_ana',\n    'tur_organizasyon_ana',\n    'gunes_enerjisi_sistemleri_ana',\n    'kurumsal_hizmetler_ana'\n  ];\n\n  if (number >= 1 && number <= mainCategories.length) {\n    const selectedCategory = mainCategories[number - 1];\n    const categoryData = services[selectedCategory];\n    \n    if (categoryData) {\n      await showCategoryOptions(message, { data: categoryData, name: selectedCategory }, services);\n      sessionManager.updateUserSession(message.from, { currentState: `submenu_${selectedCategory}` });\n    } else {\n      await message.reply('❌ Bu kategori bulunamadı. Lütfen tekrar deneyin.');\n    }\n  } else {\n    await message.reply('❌ Geçersiz numara. Lütfen 1-13 arası bir numara girin.');\n  }\n}\n\nmodule.exports = handleNumberSelection;","size_bytes":1769},"docs/MODULES.md":{"content":"","size_bytes":0},"micro-modules/service/completeServiceFlow.js":{"content":"// micro-modules/service/completeServiceFlow.js\nconst sessionManager = require('../../core/sessionManager');\nconst saveServiceApplication = require('./saveServiceApplication');\nconst serviceLoader = require('../../core/serviceLoader');\nconst showMainMenu = require('../menu/showMainMenu');\n\nasync function completeServiceFlow(message, session) {\n  if (!session.currentService || !session.currentService.data) {\n    console.log('❌ Servis verisi bulunamadı');\n    await message.reply('❌ Bir hata oluştu. Lütfen tekrar deneyin.');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    \n    await showMainMenu(message, serviceLoader.loadAllServices());\n    return;\n  }\n  \n  const serviceData = session.currentService.data;\n  const serviceName = serviceData.service_name || session.currentService.name || 'Servis';\n  \n  console.log(`✅ Servis tamamlandı: ${serviceName}`);\n  console.log(`📊 Toplanan cevaplar:`, session.collectedAnswers);\n  \n  let completionText = `🎉 *${serviceName}* başvurunuz tamamlandı!\\n\\n`;\n  \n  if (session.currentQuestions.length > 0) {\n    completionText += `✅ Toplam ${session.currentQuestions.length} soru cevaplandı.\\n\\n`;\n  }\n  \n  completionText += serviceData.completion_message || 'En kısa sürede size dönüş yapacağız.';\n\n  await message.reply(completionText);\n  \n  if (session.currentService.category !== 'fiyat_listeleri') {\n    await saveServiceApplication(session);\n  }\n  \n  sessionManager.updateUserSession(message.from, {\n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {},\n    serviceFlow: null\n  });\n  \n  setTimeout(async () => {\n    await showMainMenu(message, serviceLoader.loadAllServices());\n  }, 2000);\n}\n\nmodule.exports = completeServiceFlow;","size_bytes":1828},"modules/saleFlow/conversationManager.js":{"content":"// modules/saleFlow/conversationManager.js\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\n\n// Satış konuşmasını başlat\nfunction startSaleConversation(userId) {\n  console.log(`💰 Satış konuşması başlatılıyor: ${userId}`);\n  \n  sessionManager.updateUserSession(userId, {\n    currentState: 'waiting_for_sale_response',\n    inSaleConversation: true,\n    saleStartTime: Date.now()\n  });\n}\n\n// Satış konuşmasını bitir\nasync function endSaleConversation(userId) {\n  console.log(`💰 Satış konuşması bitiriliyor: ${userId}`);\n  \n  const session = sessionManager.getUserSession(userId);\n  const saleDuration = session?.saleStartTime ? Date.now() - session.saleStartTime : 0;\n  \n  logger.info(`Satış konuşması tamamlandı - Kullanıcı: ${userId}, Süre: ${saleDuration}ms`);\n  \n  sessionManager.updateUserSession(userId, {\n    currentState: 'main_menu',\n    inSaleConversation: false,\n    saleStartTime: null,\n    saleTimer: null\n  });\n}\n\n// Satış istatistiklerini kaydet\nfunction logSaleStatistics(userId, responseType, success = false) {\n  const session = sessionManager.getUserSession(userId);\n  const saleDuration = session?.saleStartTime ? Date.now() - session.saleStartTime : 0;\n  \n  const stats = {\n    userId: userId,\n    responseType: responseType,\n    success: success,\n    duration: saleDuration,\n    timestamp: new Date().toISOString()\n  };\n  \n  logger.info(`Satış istatistiği: ${JSON.stringify(stats)}`);\n  \n  // İsteğe bağlı: Veritabanına veya dosyaya kaydet\n  saveSaleStatsToFile(stats);\n}\n\n// Satış istatistiklerini dosyaya kaydet\nfunction saveSaleStatsToFile(stats) {\n  try {\n    const statsDir = './sales_stats';\n    if (!require('fs').existsSync(statsDir)) {\n      require('fs').mkdirSync(statsDir, { recursive: true });\n    }\n    \n    const filename = `sale_stats_${new Date().toISOString().split('T')[0]}.json`;\n    const filePath = require('path').join(statsDir, filename);\n    \n    let existingStats = [];\n    if (require('fs').existsSync(filePath)) {\n      const fileContent = require('fs').readFileSync(filePath, 'utf8');\n      existingStats = JSON.parse(fileContent);\n    }\n    \n    existingStats.push(stats);\n    require('fs').writeFileSync(filePath, JSON.stringify(existingStats, null, 2), 'utf8');\n    \n  } catch (error) {\n    logger.error(`Satış istatistiği kaydetme hatası: ${error.message}`);\n  }\n}\n\n// Satış başarı oranını hesapla\nfunction calculateSaleSuccessRate() {\n  // Bu fonksiyon istatistik dosyalarını analiz edebilir\n  // Şu anlık basit bir implementasyon\n  return {\n    totalConversations: 0,\n    successfulSales: 0,\n    successRate: 0\n  };\n}\n\nmodule.exports = {\n  startSaleConversation,\n  endSaleConversation,\n  logSaleStatistics,\n  saveSaleStatsToFile,\n  calculateSaleSuccessRate\n};","size_bytes":2816},"modules/saleFlow.js":{"content":"// modules/saleFlow.js - ANA YÖNLENDİRİCİ DOSYA\nconst saleManager = require('./saleFlow/saleManager');\nconst responseHandler = require('./saleFlow/responseHandler');\nconst serviceFinder = require('./saleFlow/serviceFinder');\nconst conversationManager = require('./saleFlow/conversationManager');\nconst timeoutManager = require('./saleFlow/timeoutManager');\n\n// Satış teklifi sorma\nasync function askForSale(message) {\n  await saleManager.askForSale(message);\n}\n\n// Servise özel satış teklifi sorma\nasync function askServiceSpecificSale(message, serviceName) {\n  await saleManager.askServiceSpecificSale(message, serviceName);\n}\n\n// Satış cevabını işleme\nasync function handleSaleResponse(message, response, services) {\n  await responseHandler.handleSaleResponse(message, response, services);\n}\n\n// Satış zaman aşımı işleme\nasync function handleSaleTimeout(userId) {\n  await timeoutManager.handleSaleTimeout(userId);\n}\n\n// Yeşil Sigorta servisini bul\nfunction findYesilSigortaService(services) {\n  return serviceFinder.findYesilSigortaService(services);\n}\n\n// Satış konuşmasını başlat\nfunction startSaleConversation(userId) {\n  conversationManager.startSaleConversation(userId);\n}\n\n// Satış konuşmasını bitir\nasync function endSaleConversation(userId) {\n  await conversationManager.endSaleConversation(userId);\n}\n\n// Satış timer'ını temizle\nfunction clearSaleTimer(userId) {\n  timeoutManager.clearSaleTimer(userId);\n}\n\n// Tüm satış timer'larını temizle\nfunction clearAllSaleTimers() {\n  timeoutManager.clearAllSaleTimers();\n}\n\n// Satış istatistiklerini kaydet\nfunction logSaleStatistics(userId, responseType, success = false) {\n  conversationManager.logSaleStatistics(userId, responseType, success);\n}\n\nmodule.exports = {\n  // Ana fonksiyonlar\n  askForSale,\n  askServiceSpecificSale,\n  handleSaleResponse,\n  handleSaleTimeout,\n  \n  // Yardımcı fonksiyonlar\n  findYesilSigortaService,\n  startSaleConversation,\n  endSaleConversation,\n  clearSaleTimer,\n  clearAllSaleTimers,\n  logSaleStatistics,\n  \n  // Alt modüllere erişim için\n  saleManager,\n  responseHandler,\n  serviceFinder,\n  conversationManager,\n  timeoutManager\n};","size_bytes":2167},"micro-modules/message/handleGreeting.js":{"content":"// micro-modules/message/handleGreeting.js\nconst serviceLoader = require('../../core/serviceLoader');\nconst sessionManager = require('../../core/sessionManager');\nconst getTimeBasedGreeting = require('../utils/getTimeBasedGreeting');\nconst startHelpTimer = require('../session/startHelpTimer');\n\nasync function handleGreeting(message, services) {\n  const greetings = serviceLoader.loadJSON('./data/genel_diyalog/selamlama_vedalasma.json');\n  const greetingType = getTimeBasedGreeting();\n  const greetingMsg = greetings?.selamlama?.[greetingType] || \n                     'Merhaba! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?';\n  \n  await message.reply(greetingMsg);\n  \n  setTimeout(async () => {\n    await message.reply('🤔 *Size yardımcı olabilmem için lütfen bana hangi konuda yardım istediğinizi yazarmısınız?*');\n    startHelpTimer(message.from, message, services);\n  }, 1000);\n  \n  return true;\n}\n\nmodule.exports = handleGreeting;","size_bytes":1022},"micro-modules/utils/messageFilters.js":{"content":"","size_bytes":0},"index.js":{"content":"// index.js - ARYA Bot Ana Dosyası (MODÜLER YAPILI - GÜNCELLENMİŞ)\nconst { Client, LocalAuth } = require('whatsapp-web.js');\nconst qrcode = require('qrcode-terminal');\nconst express = require('express');\nconst path = require('path');\n\n// Hugging Face Asistanını ekle - EN ÜSTE\nconst HuggingFaceAsistan = require('./huggingface-asistan');\nconst hfAsistan = new HuggingFaceAsistan();\n\n// Modülleri import et\nconst logger = require('./modules/logger');\nconst sessionManager = require('./modules/sessionManager');\nconst serviceLoader = require('./modules/serviceLoader');\nconst messageHandler = require('./modules/messageHandler');\nconst menuHandler = require('./modules/menuHandler');\n\n// Global client utility - EKLENDİ\nconst { setGlobalClient } = require('./modules/utils/globalClient');\n\n// WhatsApp client oluşturma\nconst client = new Client({\n  authStrategy: new LocalAuth({\n    dataPath: './session'\n  }),\n  puppeteer: {\n    headless: true,\n    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']\n  }\n});\n\n// Global client'ı başlat - EKLENDİ\nsetGlobalClient(client);\nconsole.log('🌐 Global client instance başlatıldı');\n\n// QR kodu oluşturma\nclient.on('qr', (qr) => {\n  console.log('\\n📱 WHATSAPP BAĞLANTI KODU:');\n  console.log('========================');\n  qrcode.generate(qr, { small: true });\n  console.log('========================');\n  logger.info('QR kodu oluşturuldu - WhatsApp Web\\'e bağlanmak için tarayın');\n});\n\n// Bağlantı başarılı\nclient.on('ready', () => {\n  console.log('\\n✅ ARYA BOT BAŞARIYLA BAĞLANDI!');\n  console.log('🤖 Bot: ARYA');\n  console.log('🏢 Firma: PlanB Global Network Ltd Şti');\n  console.log('🚀 Geliştirici: EurAsia Trade And Technology Bulgaria EOOD - ÆSIR Ekibi');\n  \n  // Client'ın gerçekten hazır olduğunu kontrol et\n  if (client.info) {\n    console.log(`📱 Bağlı kullanıcı: ${client.info.pushname}`);\n    console.log(`📞 Telefon: ${client.info.wid.user}`);\n  }\n  \n  logger.info('ARYA Bot başlatıldı ve WhatsApp\\'a bağlandı');\n});\n\n// Bağlantı hatası\nclient.on('auth_failure', (msg) => {\n  logger.error('WhatsApp bağlantı hatası: ' + msg);\n  console.log('❌ WhatsApp bağlantı hatası. Lütfen tekrar deneyin.');\n  console.log('💡 Oturum dosyalarını silmek için: rm -rf session/');\n});\n\n// Bağlantı kesildi - OTOMATİK YENİDEN BAĞLANMA\nclient.on('disconnected', (reason) => {\n  logger.warn('WhatsApp bağlantısı kesildi: ' + reason);\n  console.log('🔌 WhatsApp bağlantısı kesildi. 5 saniye sonra yeniden bağlanılıyor...');\n  \n  setTimeout(() => {\n    console.log('🔄 WhatsApp bağlantısı yeniden deneniyor...');\n    client.initialize().catch(err => {\n      logger.error('Yeniden bağlanma hatası: ' + err.message);\n      console.log('❌ Yeniden bağlanma başarısız. Lütfen manuel olarak kontrol edin.');\n    });\n  }, 5000);\n});\n\n// Mesaj alma - YENİ MANTIK (Hugging Face entegre edilmiş)\nclient.on('message', async (message) => {\n  try {\n    // Önce modüler mesaj işleyiciyi dene\n    await messageHandler.handleMessage(message);\n  } catch (error) {\n    logger.error(`Mesaj işleme hatası: ${error.message}`);\n    console.error('❌ Mesaj işlenirken hata:', error);\n    \n    // Modüler sistemde hata olursa, Hugging Face ile yanıt ver\n    try {\n      console.log(`📨 Hugging Face ile yanıt oluşturuluyor: ${message.body}`);\n      \n      // Hugging Face ile akıllı yanıt\n      const intelligentResponse = await hfAsistan.generateResponse(message.body);\n      await message.reply(intelligentResponse);\n      \n    } catch (hfError) {\n      console.error('❌ Hugging Face yanıt hatası:', hfError);\n      \n      // Son çare olarak genel hata mesajı\n      try {\n        await message.reply('❌ Üzgünüm, bir hata oluştu. Lütfen tekrar deneyin.');\n      } catch (replyError) {\n        logger.error(`Hata mesajı gönderilemedi: ${replyError.message}`);\n      }\n    }\n  }\n});\n\n// Express sunucusu\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Environment variable kontrolü\nif (!process.env.PORT) {\n  console.log('⚠️  PORT environment variable bulunamadı, varsayılan 3000 kullanılıyor');\n}\n\napp.use(express.json());\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  const botStatus = client.info ? 'connected' : 'disconnected';\n  \n  res.json({ \n    status: 'OK', \n    bot: 'ARYA', \n    version: '1.0.0',\n    company: 'PlanB Global Network Ltd Şti',\n    whatsapp_status: botStatus,\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory_usage: process.memoryUsage()\n  });\n});\n\n// Services endpoint\napp.get('/services', (req, res) => {\n  try {\n    const services = serviceLoader.loadAllServices();\n    res.json({\n      success: true,\n      data: services,\n      count: Object.keys(services).length,\n      loaded_at: new Date().toISOString()\n    });\n  } catch (error) {\n    logger.error(`Services endpoint hatası: ${error.message}`);\n    res.status(500).json({\n      success: false,\n      error: 'Servisler yüklenirken hata oluştu'\n    });\n  }\n});\n\n// Root endpoint\napp.get('/', (req, res) => {\n  res.json({\n    message: 'ARYA Bot API Service',\n    endpoints: {\n      health: '/health',\n      services: '/services'\n    },\n    documentation: 'ARYA Bot için REST API servisi'\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    error: 'Endpoint bulunamadı',\n    available_endpoints: ['/health', '/services']\n  });\n});\n\n// Sunucuyu başlat\napp.listen(PORT, () => {\n  console.log(`🌐 ARYA Bot API http://localhost:${PORT} adresinde çalışıyor`);\n  console.log(`📊 Health check: http://localhost:${PORT}/health`);\n  console.log(`📋 Servisler: http://localhost:${PORT}/services`);\n  logger.info(`ARYA Bot API ${PORT} portunda başlatıldı`);\n});\n\n// Botu başlat\nconsole.log('🚀 ARYA Bot başlatılıyor...');\nconsole.log('📁 Modüler yapı yükleniyor...');\nconsole.log('🤖 Hugging Face Asistanı aktif!');\n\nclient.initialize().catch(error => {\n  logger.error(`Bot başlatma hatası: ${error.message}`);\n  console.log('❌ Bot başlatılamadı:', error.message);\n  process.exit(1);\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.log('\\n🛑 ARYA Bot kapatılıyor...');\n  \n  // Tüm timer'ları temizle - GÜNCELLENDİ\n  const timeoutManager = require('./modules/saleFlow/timeoutManager');\n  timeoutManager.clearAllSaleTimers();\n  \n  sessionManager.userSessions.forEach(session => {\n    if (session.menuTimer) clearTimeout(session.menuTimer);\n    if (session.helpTimer) clearTimeout(session.helpTimer);\n    if (session.goodbyeTimer) clearTimeout(session.goodbyeTimer);\n  });\n  \n  // Client'ı temizle\n  try {\n    await client.destroy();\n    console.log('✅ WhatsApp client temizlendi');\n  } catch (error) {\n    console.log('⚠️  Client temizleme hatası:', error.message);\n  }\n  \n  logger.info('ARYA Bot kapatıldı');\n  console.log('👋 ARYA Bot başarıyla kapatıldı');\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('\\n🛑 ARYA Bot SIGTERM sinyali aldı, kapatılıyor...');\n  await client.destroy();\n  process.exit(0);\n});\n\n// Beklenmeyen hatalar\nprocess.on('uncaughtException', (error) => {\n  logger.error(`Beklenmeyen hata: ${error.message}`);\n  console.log('❌ Kritik hata oluştu:', error.message);\n  console.log('🔄 Bot yeniden başlatılabilir...');\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error(`İşlenmemiş Promise: ${reason}`);\n  console.log('⚠️  İşlenmemiş Promise hatası:', reason);\n});\n\n// Başlangıç kontrolü\nsetTimeout(() => {\n  if (!client.info) {\n    console.log('⏳ WhatsApp bağlantısı bekleniyor... QR kodu tarayın.');\n  }\n}, 3000);","size_bytes":7762},"test.js":{"content":"// bert-test.js\nconst HuggingFaceAsistan = require('./huggingface-asistan');\nconst asistan = new HuggingFaceAsistan();\n\nasync function testBert() {\n  const testMesajlari = [\n    \"Merhaba, trafik sigortası fiyatı almak istiyorum\",\n    \"Kiralık daire ilanı vermek istiyorum\", \n    \"Yazılım geliştirme hizmetiniz var mı?\",\n    \"Güneş enerjisi kurulum fiyatı nedir?\",\n    \"Nasılsınız?\"\n  ];\n\n  for (let mesaj of testMesajlari) {\n    console.log(`\\n🧪 Test: \"${mesaj}\"`);\n    const yanit = await asistan.generateResponse(mesaj);\n    console.log(`🤖 Yanıt: \"${yanit}\"`);\n    await new Promise(resolve => setTimeout(resolve, 3000)); // 3 sn bekle\n  }\n}\n\ntestBert();","size_bytes":677},"micro-modules/session/startMenuTimer.js":{"content":"// micro-modules/session/startMenuTimer.js\nconst logger = require('../../core/logger');\nconst sessionManager = require('../../core/sessionManager');\nconst showMainMenu = require('../menu/showMainMenu');\n\nfunction startMenuTimer(userId, message, services) {\n  const session = sessionManager.getUserSession(userId);\n  if (session && session.menuTimer) {\n    clearTimeout(session.menuTimer);\n  }\n\n  const timer = setTimeout(async () => {\n    const currentSession = sessionManager.getUserSession(userId);\n    if (currentSession && currentSession.waitingForResponse) {\n      logger.info(`⏰ Menü zaman aşımı - Kullanıcı: ${userId}`);\n      await showMainMenu(message, services);\n      sessionManager.updateUserSession(userId, { \n        waitingForResponse: false, \n        menuTimer: null,\n        currentState: 'main_menu'\n      });\n    }\n  }, 60000);\n\n  sessionManager.updateUserSession(userId, { \n    waitingForResponse: true, \n    menuTimer: timer,\n    currentState: 'waiting_for_service'\n  });\n}\n\nmodule.exports = startMenuTimer;","size_bytes":1036},"micro-modules/utils/parseMessage.js":{"content":"// micro-modules/utils/parseMessage.js\nfunction parseMessage(message) {\n  const cleanMessage = message.toLowerCase().trim();\n  \n  let greetingPart = '';\n  let servicePart = '';\n  \n  const greetingWords = ['merhaba', 'selam', 'hi', 'hello', 'hey', 'günaydın', 'iyi günler', 'iyi akşamlar', 'naber', 'slm', 'sa'];\n  \n  for (const word of greetingWords) {\n    if (cleanMessage.includes(word)) {\n      const index = cleanMessage.indexOf(word);\n      greetingPart = message.substring(0, index + word.length);\n      servicePart = message.substring(index + word.length).trim();\n      break;\n    }\n  }\n  \n  if (!greetingPart) {\n    servicePart = message;\n  }\n  \n  return { greetingPart, servicePart };\n}\n\nmodule.exports = parseMessage;","size_bytes":731},"modules/utils/globalClient.js":{"content":"// modules/utils/globalClient.js - GÜNCELLENDİ\nlet globalClient = null;\n\nfunction setGlobalClient(client) {\n  globalClient = client;\n}\n\nfunction getGlobalClient() {\n  return globalClient;\n}\n\n// Alıntısız mesaj gönderme fonksiyonu ekle\nasync function sendMessageWithoutQuote(chatId, message) {\n  if (!globalClient) {\n    throw new Error('Global client başlatılmamış');\n  }\n  \n  try {\n    const chat = await globalClient.getChatById(chatId);\n    await chat.sendMessage(message);\n    return true;\n  } catch (error) {\n    console.error('Mesaj gönderme hatası:', error);\n    throw error;\n  }\n}\n\nmodule.exports = {\n  setGlobalClient,\n  getGlobalClient,\n  sendMessageWithoutQuote\n};","size_bytes":687},"modules/messageHandler/validation.js":{"content":"const logger = require('../logger');\n\nfunction validateMessage(message) {\n  // Temel validasyonlar\n  if (message.fromMe) {\n    return { isValid: false, reason: 'fromMe' };\n  }\n  \n  if (message.from === 'status@broadcast') {\n    return { isValid: false, reason: 'status_broadcast' };\n  }\n  \n  if (message.isGroupMsg) {\n    return { isValid: false, reason: 'group_message' };\n  }\n  \n  const messageBody = message.body?.toLowerCase().trim();\n  if (!messageBody || messageBody.length === 0) {\n    return { isValid: false, reason: 'empty_message' };\n  }\n  \n  if (message.hasMedia) {\n    return { isValid: false, reason: 'has_media' };\n  }\n  \n  return { isValid: true, messageBody };\n}\n\nfunction validateInput(message, expectedType) {\n  const cleanMessage = message.trim();\n  \n  switch (expectedType) {\n    case 'number':\n      const number = parseInt(cleanMessage);\n      if (isNaN(number)) {\n        return {\n          isValid: false,\n          errorMessage: 'Geçersiz sayı formatı. Lütfen sadece rakam girin.'\n        };\n      }\n      return { isValid: true, value: number };\n      \n    case 'text':\n      if (cleanMessage.length < 2) {\n        return {\n          isValid: false,\n          errorMessage: 'Cevap çok kısa. Lütfen daha detaylı bilgi verin.'\n        };\n      }\n      return { isValid: true, value: cleanMessage };\n      \n    default:\n      return { isValid: true, value: cleanMessage };\n  }\n}\n\nmodule.exports = {\n  validateMessage,\n  validateInput\n};","size_bytes":1468},"modules/saleFlow/serviceFinder.js":{"content":"// modules/saleFlow/serviceFinder.js\nconst logger = require('../logger');\n\n// Yeşil Sigorta servisini bul - DÜZELTİLDİ\nfunction findYesilSigortaService(services) {\n  console.log(`🔍 Yeşil Sigorta servisi aranıyor...`);\n  \n  for (const [categoryName, categoryServices] of Object.entries(services)) {\n    if (typeof categoryServices === 'object' && categoryServices['yesil_sigorta']) { // yesil_sigortasi → yesil_sigorta\n      console.log(`✅ Yeşil Sigorta bulundu: ${categoryName}/yesil_sigorta`);\n      return {\n        type: 'service',\n        data: categoryServices['yesil_sigorta'],\n        category: categoryName,\n        name: 'yesil_sigorta'\n      };\n    }\n  }\n  \n  console.log(`❌ Yeşil Sigorta servisi bulunamadı`);\n  \n  // Alternatif servisleri kontrol et\n  const alternativeServices = findAlternativeServices(services);\n  if (alternativeServices.length > 0) {\n    console.log(`💡 Alternatif servisler bulundu:`, alternativeServices);\n  }\n  \n  return null;\n}\n\n// Alternatif servisleri bul\nfunction findAlternativeServices(services) {\n  const alternatives = [];\n  const targetServices = ['yesil_sigorta', 'trafik_sigortasi', 'kasko']; // yesil_sigortasi → yesil_sigorta\n  \n  for (const serviceKey of targetServices) {\n    for (const [categoryName, categoryServices] of Object.entries(services)) {\n      if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n        alternatives.push({\n          name: serviceKey,\n          category: categoryName,\n          displayName: categoryServices[serviceKey].service_name || serviceKey\n        });\n      }\n    }\n  }\n  \n  return alternatives;\n}\n\n// Tüm sigorta servislerini listele\nfunction getAllInsuranceServices(services) {\n  const insuranceServices = [];\n  \n  // Sigorta kategorilerinde ara\n  const insuranceCategories = ['sigorta_hizmetleri', 'sigorta_ana_kategori'];\n  \n  for (const category of insuranceCategories) {\n    if (services[category]) {\n      for (const [serviceKey, serviceData] of Object.entries(services[category])) {\n        if (typeof serviceData === 'object' && serviceData.service_name) {\n          insuranceServices.push({\n            key: serviceKey,\n            name: serviceData.service_name,\n            category: category\n          });\n        }\n      }\n    }\n  }\n  \n  return insuranceServices;\n}\n\n// Servis öncelik sıralaması - DÜZELTİLDİ\nfunction getServicePriority(serviceName) {\n  const priorityMap = {\n    'yesil_sigorta': 1, // yesil_sigortasi → yesil_sigorta\n    'trafik_sigortasi': 2,\n    'kasko': 3,\n    'konut_sigortasi': 4,\n    'dask': 5\n  };\n  \n  return priorityMap[serviceName] || 999;\n}\n\nmodule.exports = {\n  findYesilSigortaService,\n  findAlternativeServices,\n  getAllInsuranceServices,\n  getServicePriority\n};","size_bytes":2752},"modules/saleFlow/timeoutManager.js":{"content":"// modules/saleFlow/timeoutManager.js\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\nconst { getGlobalClient } = require('../utils/globalClient');\n\n// Satış zaman aşımı başlat\nfunction startSaleTimeout(userId, message) {\n  const session = sessionManager.getUserSession(userId);\n  \n  // Önceki timer'ı temizle\n  if (session && session.saleTimer) {\n    clearTimeout(session.saleTimer);\n  }\n  \n  console.log(`⏰ Satış zaman aşımı başlatıldı: ${userId}`);\n  \n  const saleTimer = setTimeout(async () => {\n    await handleSaleTimeout(userId);\n  }, 5 * 60 * 1000); // 5 dakika\n  \n  // Konuşmayı başlat\n  const conversationManager = require('./conversationManager');\n  conversationManager.startSaleConversation(userId);\n  \n  sessionManager.updateUserSession(userId, {\n    saleTimer: saleTimer,\n    currentState: 'waiting_for_sale_response'\n  });\n}\n\n// Satış zaman aşımı işleme - CLIENT FIX İLE GÜNCELLENDİ\nasync function handleSaleTimeout(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (session && session.currentState === 'waiting_for_sale_response') {\n    logger.info(`⏰ Satış zaman aşımı - Kullanıcı: ${userId}`);\n    \n    try {\n      // Global client instance'ını kullan\n      const client = getGlobalClient();\n      \n      if (client && client.info) {\n        const chat = await client.getChatById(userId);\n        await chat.sendMessage('⏰ *Cevap süresi doldu*\\n\\n' +\n                              'Yeşil Sigorta ihtiyacınız olduğunda tekrar \"yeşil sigorta\" yazabilirsiniz. 🛡️\\n\\n' +\n                              'İyi günler dilerim! ✨');\n        logger.info(`Zaman aşımı mesajı gönderildi: ${userId}`);\n      } else {\n        logger.warn('Client instance hazır değil, zaman aşımı mesajı gönderilemedi');\n      }\n      \n    } catch (error) {\n      logger.error(`Zaman aşımı mesajı gönderme hatası: ${error.message}`);\n    }\n    \n    // Konuşmayı bitir\n    const conversationManager = require('./conversationManager');\n    await conversationManager.endSaleConversation(userId);\n    conversationManager.logSaleStatistics(userId, 'timeout', false);\n  }\n}\n\n// Satış timer'ını temizle\nfunction clearSaleTimer(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (session && session.saleTimer) {\n    clearTimeout(session.saleTimer);\n    sessionManager.updateUserSession(userId, { saleTimer: null });\n    console.log(`⏰ Satış timer temizlendi: ${userId}`);\n  }\n}\n\n// Tüm satış timer'larını temizle (shutdown için)\nfunction clearAllSaleTimers() {\n  const sessions = sessionManager.userSessions;\n  let clearedCount = 0;\n  \n  sessions.forEach((session, userId) => {\n    if (session.saleTimer) {\n      clearTimeout(session.saleTimer);\n      clearedCount++;\n    }\n  });\n  \n  console.log(`⏰ ${clearedCount} satış timer temizlendi`);\n}\n\nmodule.exports = {\n  startSaleTimeout,\n  handleSaleTimeout,\n  clearSaleTimer,\n  clearAllSaleTimers\n};","size_bytes":3005},"modules/menuHandler/serviceConverter.js":{"content":"// modules/menuHandler/serviceConverter.js\nconst logger = require('../logger');\n\n// Servis anahtarını dönüştürme - DÜZELTİLDİ\nfunction convertToServiceKey(categoryName) {\n  const conversions = {\n    // === SİGORTA HİZMETLERİ ===\n    'Yeşil Sigorta': 'yesil_sigorta', // yesil_sigortasi → yesil_sigorta\n    'Trafik Sigortası': 'trafik_sigortasi',\n    'KASKO': 'kasko',\n    'Koltuk Sigortası': 'koltuk_sigortasi',\n    'DASK': 'dask',\n    'Konut Sigortası': 'konut_sigortasi',\n    'İşyeri Sigortası': 'isyeri_sigortasi',\n    'Seyahat Sağlık Sigortası': 'seyahat_saglik_sigortasi',\n    'Tamamlayıcı Sağlık Sigortası': 'tamamlayici_saglik_sigortasi',\n    'Özel Sağlık Sigortası': 'ozel_saglik_sigortasi',\n\n    // === YAZILIM TALEPLERİ ===\n    'Özel Yazılım Geliştirme': 'ozel_yazilim_gelistirme',\n    'Mobil Uygulama Geliştirme': 'mobil_uygulama_gelistirme',\n\n    // === SİBER GÜVENLİK ===\n    'Genel Ağ Güvenliği': 'genel_ag_guvenligi',\n    'Kullanıcı Güvenliği': 'kullanici_guvenligi',\n    'Veri Güvenliği': 'veri_guvenligi',\n    'Uygulama Güvenliği': 'uygulama_guvenligi',\n    'Kimlik ve Erişim Yönetimi': 'kimlik_erisim_yonetimi',\n    'Güvenlik Yönetimi': 'guvenlik_yonetimi',\n    'Penetrasyon Test Talebi': 'penetrasyon_test_talebi',\n    'Eğitim Talepleri': 'egitim_talepleri',\n\n    // === LOJİSTİK HİZMETLERİ ===\n    'Yurtiçi Yük Nakli': 'yurtici_yuk_nakli',\n    'Yurtdışı Yük Nakli': 'yurtdisi_yuk_nakli',\n    'Depo/Antrepo Hizmeti': 'depo_antrepo_hizmeti',\n\n    // === İTHALAT İHRACAT ===\n    'Yurtdışı Müşteri Araştırma': 'yurtdisi_musteri_arastirma',\n    'Yurtiçi Tedarikçi Araştırma': 'yurtici_tedarikci_arastirma',\n    'Gümrük Operasyon Hizmetleri': 'gumruk_operasyon_hizmetleri',\n    'Yurtiçi Ürün Araştırma': 'yurtici_urun_arastirma',\n    'Yurtdışı Pazar Araştırma': 'yurtdisi_pazar_arastirma',\n\n    // === PROFESYONEL DENETLEME ===\n    'İç Denetim Hizmeti': 'ic_denetim_hizmeti',\n    'Tedarikçi Müşteri Mali Denetim': 'tedarikci_musteri_mali_denetim',\n    'Tedarikçi Kalite Denetim': 'tedarikci_kalite_denetim',\n    'Tedarikçi Üretim Denetleme': 'tedarikci_uretim_denetleme',\n    'Firma Temsil Hizmeti': 'firma_temsil_hizmeti',\n\n    // === İNŞAAT EMLAK ===\n    'Satılık Gayrimenkul': 'satilik_gayrimenkul',\n    'Kiralık Gayrimenkul': 'kiralik_gayrimenkul',\n    'Yurtdışı Gayrimenkul Yatırım': 'yurtdisi_gayrimenkul_yatirim',\n    'İnşaat Taahhüt Hizmeti': 'insaat_taahhut_hizmeti',\n\n    // === CRM HİZMETLERİ ===\n    'Müşteri Seçimi': 'musteri_secimi',\n    'Müşteri Edinme': 'musteri_edinme',\n    'Müşteri Koruma': 'musteri_koruma',\n    'Müşteri Derinleştirme': 'musteri_derinlestirme',\n\n    // === TEKSTİL ÜRÜNLERİ ===\n    'Erkek Giyim': 'erkek_giyim',\n    'Kadın Giyim': 'kadin_giyim',\n    'Ev Tekstil Ürünleri': 'ev_tekstil_urunleri',\n\n    // === KOZMETİK ÜRÜNLERİ ===\n    'Parfüm': 'parfum',\n    'Deodorant': 'deodorant',\n    'Kişisel Bakım': 'kisisel_bakim',\n    'Medikal Kozmetik': 'medikal_kozmetik',\n\n    // === TUR ORGANİZASYON ===\n    'Yurtiçi Özel Gezi Talebi': 'yurtici_ozel_gezi_talebi',\n    'Yurtdışı Özel Gezi Talebi': 'yurtdisi_ozel_gezi_talebi',\n    'Personel Servis Talebi': 'personel_servis_talebi',\n\n    // === GÜNEŞ ENERJİSİ SİSTEMLERİ ===\n    'Güneş Verimlilik Hesabı': 'gunes_verimlilik_hesabi',\n    'GES Üretim Hesaplama': 'ges_uretim_hesaplama',\n    'GES Kurulum Hesaplama': 'ges_kurulum_hesaplama',\n\n    // === KURUMSAL HİZMETLER ===\n    'İnsan Kaynakları Danışmanlığı': 'insan_kaynaklari_danismanligi',\n    'Stratejik Planlama Danışmanlığı': 'stratejik_planlama_danismanligi',\n    'Finansal Danışmanlık': 'finansal_danismanlik',\n    'Operasyonel İyileştirme': 'operasyonel_iyilestirme',\n    'Kurumsal İletişim Danışmanlığı': 'kurumsal_iletisim_danismanligi',\n    'Yasal Danışmanlık': 'yasal_danismanlik',\n    'Teknoloji Danışmanlığı': 'teknoloji_danismanlik',\n    'Kurumsal Eğitim Hizmetleri': 'kurumsal_egitim_hizmetleri'\n  };\n\n  const serviceKey = conversions[categoryName];\n  \n  if (serviceKey) {\n    console.log(`🔄 Servis dönüşümü: \"${categoryName}\" -> \"${serviceKey}\"`);\n    return serviceKey;\n  } else {\n    // Fallback: otomatik dönüşüm\n    const autoConverted = categoryName.toLowerCase()\n      .replace(/ /g, '_')\n      .replace(/[ıİ]/g, 'i')\n      .replace(/[şŞ]/g, 's')\n      .replace(/[ğĞ]/g, 'g')\n      .replace(/[üÜ]/g, 'u')\n      .replace(/[çÇ]/g, 'c')\n      .replace(/[öÖ]/g, 'o');\n    \n    console.log(`⚠️  Servis bulunamadı, otomatik dönüşüm: \"${categoryName}\" -> \"${autoConverted}\"`);\n    return autoConverted;\n  }\n}\n\n// Tüm mevcut servis anahtarlarını listele - DÜZELTİLDİ\nfunction getAllServiceKeys() {\n  return {\n    sigorta: [\n      'yesil_sigorta', // yesil_sigortasi → yesil_sigorta\n      'trafik_sigortasi',\n      'kasko',\n      'koltuk_sigortasi',\n      'dask',\n      'konut_sigortasi',\n      'isyeri_sigortasi',\n      'seyahat_saglik_sigortasi',\n      'tamamlayici_saglik_sigortasi',\n      'ozel_saglik_sigortasi'\n    ],\n    // ... diğer kategoriler aynı kalacak\n    yazilim: [\n      'ozel_yazilim_gelistirme', 'mobil_uygulama_gelistirme'\n    ],\n    siber_guvenlik: [\n      'genel_ag_guvenligi',\n      'kullanici_guvenligi',\n      'veri_guvenligi',\n      'uygulama_guvenligi',\n      'kimlik_erisim_yonetimi',\n      'guvenlik_yonetimi',\n      'penetrasyon_test_talebi',\n      'egitim_talepleri'\n    ],\n    lojistik: [\n      'yurtici_yuk_nakli', 'yurtdisi_yuk_nakli', 'depo_antrepo_hizmeti'\n    ],\n    ithalat_ihracat: [\n      'yurtdisi_musteri_arastirma',\n      'yurtici_tedarikci_arastirma',\n      'gumruk_operasyon_hizmetleri',\n      'yurtici_urun_arastirma',\n      'yurtdisi_pazar_arastirma'\n    ],\n    profesyonel_denetleme: [\n      'ic_denetim_hizmeti',\n      'tedarikci_musteri_mali_denetim',\n      'tedarikci_kalite_denetim',\n      'tedarikci_uretim_denetleme',\n      'firma_temsil_hizmeti'\n    ],\n    insaat_emlak: [\n      'satilik_gayrimenkul',\n      'kiralik_gayrimenkul',\n      'yurtdisi_gayrimenkul_yatirim',\n      'insaat_taahhut_hizmeti'\n    ],\n    crm: [\n      'musteri_secimi',\n      'musteri_edinme',\n      'musteri_koruma',\n      'musteri_derinlestirme'\n    ],\n    tekstil: [ 'erkek_giyim', 'kadin_giyim', 'ev_tekstil_urunleri' ],\n    kozmetik: [ 'parfum', 'deodorant', 'kisisel_bakim', 'medikal_kozmetik' ],\n    tur: [\n      'yurtici_ozel_gezi_talebi',\n      'yurtdisi_ozel_gezi_talebi',\n      'personel_servis_talebi'\n    ],\n    gunes_enerjisi: [\n      'gunes_verimlilik_hesabi',\n      'ges_uretim_hesaplama',\n      'ges_kurulum_hesaplama'\n    ],\n    kurumsal: [\n      'insan_kaynaklari_danismanligi',\n      'stratejik_planlama_danismanligi',\n      'finansal_danismanlik',\n      'operasyonel_iyilestirme',\n      'kurumsal_iletisim_danismanligi',\n      'yasal_danismanlik',\n      'teknoloji_danismanlik',\n      'kurumsal_egitim_hizmetleri'\n    ]\n  };\n}\n\n// Servis anahtarını doğrula\nfunction validateServiceKey(serviceKey, services) {\n  for (const [category, categoryServices] of Object.entries(services)) {\n    if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n      return {\n        isValid: true,\n        category: category,\n        serviceData: categoryServices[serviceKey]\n      };\n    }\n  }\n  \n  return {\n    isValid: false,\n    error: `Servis bulunamadı: ${serviceKey}`\n  };\n}\n\nmodule.exports = {\n  convertToServiceKey,\n  getAllServiceKeys,\n  validateServiceKey\n};","size_bytes":7517},"micro-modules/session/startHelpTimer.js":{"content":"// micro-modules/session/startHelpTimer.js\nconst logger = require('../../core/logger');\nconst sessionManager = require('../../core/sessionManager');\nconst showMainMenu = require('../menu/showMainMenu');\nconst handleGoodbye = require('./handleGoodbye');\n\nfunction startHelpTimer(userId, message, services) {\n  const session = sessionManager.getUserSession(userId);\n  if (session && session.helpTimer) {\n    clearTimeout(session.helpTimer);\n  }\n  if (session && session.goodbyeTimer) {\n    clearTimeout(session.goodbyeTimer);\n  }\n\n  logger.info(`⏰ Yardım timer başlatıldı - Kullanıcı: ${userId}`);\n\n  const helpTimer = setTimeout(async () => {\n    const currentSession = sessionManager.getUserSession(userId);\n    if (currentSession && currentSession.waitingForHelp) {\n      logger.info(`⏰ Yardım zaman aşımı - Menü gösteriliyor: ${userId}`);\n      \n      await showMainMenu(message, services);\n      \n      const goodbyeTimer = setTimeout(async () => {\n        await handleGoodbye(message);\n      }, 3 * 60 * 1000);\n      \n      sessionManager.updateUserSession(userId, { \n        waitingForHelp: false, \n        helpTimer: null,\n        goodbyeTimer: goodbyeTimer\n      });\n    }\n  }, 3 * 60 * 1000);\n\n  sessionManager.updateUserSession(userId, { \n    waitingForHelp: true, \n    helpTimer: helpTimer\n  });\n}\n\nmodule.exports = startHelpTimer;","size_bytes":1357},"modules/messageHandler/greetingManager.js":{"content":"// modules/messageHandler/greetingManager.js - GÜNCELLENDİ\nconst serviceLoader = require('../serviceLoader');\nconst personalization = require('./personalization');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendGreetingMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Selamlama mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\nfunction getTimeBasedGreeting() {\n  const hour = new Date().getHours();\n  \n  if (hour >= 5 && hour < 11) return 'gunaydin';\n  if (hour >= 11 && hour < 17) return 'merhaba';\n  return 'iyi_aksamlar';\n}\n\nasync function handleGreeting(message, services, contactName = '') {\n  const greetingType = getTimeBasedGreeting();\n  const greetingMsg = personalization.createPersonalizedGreeting(contactName, greetingType);\n  \n  await sendGreetingMessage(message, greetingMsg);\n  \n  // Hemen ardından yardım sorusunu sor\n  setTimeout(async () => {\n    const helpQuestion = contactName ? \n      `🤔 ${contactName}, size yardımcı olabilmem için lütfen bana hangi konuda yardım istediğinizi yazarmısınız?` :\n      `🤔 Size yardımcı olabilmem için lütfen bana hangi konuda yardım istediğinizi yazarmısınız?`;\n    \n    await sendGreetingMessage(message, helpQuestion);\n    \n    const sessionManager = require('../sessionManager');\n    sessionManager.startHelpTimer(message.from, message, services);\n  }, 1000);\n  \n  return true;\n}\n\n// Teşekkür mesajını işle - GÜNCELLENDİ\nasync function handleThanks(message, contactName = '') {\n  const greetings = serviceLoader.loadJSON('./genel_diyalog/selamlama_vedalasma.json');\n  const thanksResponses = greetings?.tesekkur?.tesekkur_cevaplari || [\n    '🙏 Rica ederim! Size yardımcı olabildiğim için ben teşekkür ederim. 🎯'\n  ];\n  \n  // Rastgele bir teşekkür cevabı seç\n  const randomThanks = thanksResponses[Math.floor(Math.random() * thanksResponses.length)];\n  \n  let thanksMsg = randomThanks;\n  if (contactName) {\n    thanksMsg = `${contactName}, ${randomThanks.toLowerCase()}`;\n  }\n  \n  thanksMsg += `\\n\\nBaşka bir konuda yardıma ihtiyacınız varsa \"menü\" yazabilirsiniz.`;\n  \n  await sendGreetingMessage(message, thanksMsg);\n  return true;\n}\n\n// Vedalaşma mesajını işle - GÜNCELLENDİ\nasync function handleGoodbye(message, contactName = '') {\n  const greetings = serviceLoader.loadJSON('./genel_diyalog/selamlama_vedalasma.json');\n  const goodbyeResponses = greetings?.vedalasma?.hoscakal || [\n    '👋 Hoşça kalın! PlanB Global Network Ltd Şti adına iyi günler dilerim.'\n  ];\n  \n  // Rastgele bir vedalaşma mesajı seç\n  const randomGoodbye = goodbyeResponses[Math.floor(Math.random() * goodbyeResponses.length)];\n  \n  let goodbyeMsg = randomGoodbye;\n  if (contactName) {\n    goodbyeMsg = `${contactName}, ${randomGoodbye}`;\n  }\n  \n  await sendGreetingMessage(message, goodbyeMsg);\n  \n  // Oturumu temizle\n  const sessionManager = require('../sessionManager');\n  sessionManager.updateUserSession(message.from, {\n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {}\n  });\n  \n  return true;\n}\n\nmodule.exports = {\n  getTimeBasedGreeting,\n  handleGreeting,\n  handleThanks,\n  handleGoodbye\n};","size_bytes":3426},"README.md":{"content":"# ARYA Bot 🤖\n\n**PlanB Global Network Ltd Şti için WhatsApp Business Otomasyon Sistemi**\n\n## 📋 Genel Bakış\n\nARYA Bot, 12 ana kategori ve 70+ alt hizmet sunan kapsamlı bir WhatsApp Business otomasyon çözümüdür. Müşteri etkileşimlerini otomatikleştirir ve iş süreçlerini optimize eder.\n\n## 🚀 Özellikler\n\n### Ana Hizmet Kategorileri\n- 🛡️ **Sigorta Hizmetleri** (Trafik, Kasko, DASK, Konut, vb.)\n- 💻 **Yazılım Talepleri** (Özel Yazılım, Mobil Uygulama)\n- 🔒 **Siber Güvenlik** (Ağ Güvenliği, Penetrasyon Testi, Eğitim)\n- 🚚 **Lojistik Hizmetleri** (Yurtiçi/Yurtdışı Nakliye, Depolama)\n- 🌍 **İthalat İhracat** (Pazar Araştırması, Gümrük Hizmetleri)\n- 📊 **Profesyonel Denetleme** (İç Denetim, Tedarikçi Denetimi)\n- 🏠 **İnşaat Emlak** (Gayrimenkul, Taahhüt Hizmetleri)\n- 🤝 **CRM Hizmetleri** (Müşteri Seçimi, Edinme, Koruma)\n- 👕 **Tekstil Ürünleri** (Erkek/Kadın Giyim, Ev Tekstili)\n- 💄 **Kozmetik Ürünleri** (Parfüm, Kişisel Bakım, Medikal)\n- ✈️ **Tur Organizasyon** (Yurtiçi/Yurtdışı Gezi, Servis)\n- ☀️ **Güneş Enerjisi** (GES Kurulum, Verimlilik Hesaplama)\n- 🏢 **Kurumsal Hizmetler** (Danışmanlık, Eğitim, Strateji)\n\n## 🛠️ Kurulum\n\n### Gereksinimler\n- Node.js 16.0.0 veya üzeri\n- WhatsApp Business API erişimi\n\n### Adımlar\n1. Depoyu klonlayın:\n```bash\ngit clone https://github.com/planb-global/arya-bot.git\ncd arya-bot","size_bytes":1438},"modules/messageHandler.js":{"content":"// modules/messageHandler.js - BASİTLEŞTİRİLMİŞ VERSİYON\nconst logger = require('./logger');\nconst messageParser = require('./messageHandler/messageParser');\nconst sessionRouter = require('./messageHandler/sessionRouter');\nconst contactManager = require('./messageHandler/contactManager');\nconst validation = require('./messageHandler/validation');\nconst errorHandler = require('./messageHandler/errorHandler');\nconst { sendMessageWithoutQuote } = require('./utils/globalClient');\n\n// Hugging Face Asistanını ekle\nconst HuggingFaceAsistan = require('../huggingface-asistan');\nconst hfAsistan = new HuggingFaceAsistan();\n\n// Global servis durumu değişkeni - basit çözüm\nlet serviceFound = false;\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendReply(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n    logger.info(`📤 Mesaj gönderildi (alıntısız): ${message.from}`);\n  } catch (error) {\n    logger.error(`Mesaj gönderme hatası: ${error.message}`);\n    // Fallback: normal reply kullan\n    try {\n      await message.reply(text);\n    } catch (fallbackError) {\n      logger.error(`Fallback mesaj gönderme de başarısız: ${fallbackError.message}`);\n    }\n  }\n}\n\n// Hugging Face ile yanıt oluştur\nasync function generateHuggingFaceResponse(message) {\n  try {\n    console.log('🤖 Hugging Face ile yanıt oluşturuluyor...');\n    const hfResponse = await hfAsistan.generateResponse(message.body);\n    console.log(`💬 Hugging Face Yanıtı: \"${hfResponse}\"`);\n    await sendReply(message, hfResponse);\n    return true;\n  } catch (hfError) {\n    console.error('❌ Hugging Face yanıt hatası:', hfError);\n    return false;\n  }\n}\n\n// Servis durumunu kontrol et (basit fonksiyon)\nfunction checkServiceFound() {\n  return serviceFound;\n}\n\n// Ana mesaj işleme fonksiyonu - BASİTLEŞTİRİLMİŞ\nasync function handleMessage(message) {\n  try {\n    // Servis bulma durumunu sıfırla\n    serviceFound = false;\n    console.log(`🔍 Servis bulundu durumu: ${serviceFound}`);\n    \n    // 1. Mesajı doğrula\n    const validationResult = validation.validateMessage(message);\n    if (!validationResult.isValid) {\n      if (validationResult.reason === 'has_media') {\n        await errorHandler.handleMediaError(message);\n      }\n      return;\n    }\n\n    // 2. Müşteri bilgilerini al ve logla\n    const contactInfo = await contactManager.logContactInteraction(message, 'Mesaj alındı');\n    \n    // 3. Oturumu başlat/güncelle\n    const sessionManager = require('./sessionManager');\n    let session = sessionManager.getUserSession(message.from);\n    \n    console.log(`🔍 Oturum durumu: ${session.currentState}, Mesaj: \"${validationResult.messageBody}\"`);\n    \n    // 4. Kullanıcı cevap verdiğinde tüm timer'ları durdur\n    sessionManager.stopHelpTimer(message.from);\n    sessionManager.stopMenuTimer(message.from);\n    \n    // 5. Mesajı ayrıştır\n    const parsedMessage = messageParser.parseMessage(validationResult.messageBody);\n    \n    console.log(`📝 Mesaj ayrıştırma: Orijinal=\"${validationResult.messageBody}\", Selamlama=\"${parsedMessage.greetingPart}\", İşlem=\"${parsedMessage.servicePart}\"`);\n    \n    // 6. Oturum durumuna göre yönlendir\n    await sessionRouter.route(message, parsedMessage, contactInfo.name, () => {\n      // Callback: servis bulunduğunda çağrılacak\n      serviceFound = true;\n      console.log('✅ Servis bulundu - Hugging Face atlanacak');\n    });\n    \n    // 7. Eğer modüler sistem servis bulamazsa, Hugging Face'e yönlendir\n    if (!serviceFound) {\n      console.log('🔍 Modüler sistem servis bulamadı, Hugging Face deneniyor...');\n      const hfSuccess = await generateHuggingFaceResponse(message);\n      \n      if (!hfSuccess) {\n        // Hugging Face de başarısız olursa genel hata mesajı\n        await sendReply(message, '❌ Üzgünüm, bu konuda size yardımcı olamadım. Lütfen başka bir soru sormayı deneyin veya \"yardım\" yazarak hizmetlerimizi görün.');\n      }\n    }\n    \n  } catch (error) {\n    console.log(`❌ Mesaj işleme hatası: ${error.message}`);\n    \n    // Hata durumunda Hugging Face'i dene\n    console.log('🔄 Hata durumunda Hugging Face deneniyor...');\n    try {\n      const hfSuccess = await generateHuggingFaceResponse(message);\n      if (!hfSuccess) {\n        await errorHandler.handleError(message, error);\n      }\n    } catch (finalError) {\n      await errorHandler.handleError(message, finalError);\n    }\n  }\n}\n\nmodule.exports = {\n  handleMessage,\n  sendReply,\n  checkServiceFound,\n  generateHuggingFaceResponse,\n  getTimeBasedGreeting: require('./messageHandler/greetingManager').getTimeBasedGreeting,\n  isGreeting: messageParser.isGreeting,\n  parseMessage: messageParser.parseMessage,\n  handleGreeting: require('./messageHandler/greetingManager').handleGreeting,\n  findMatchingService: require('./messageHandler/serviceMatcher').findMatchingService,\n  createPersonalizedGreeting: require('./messageHandler/personalization').createPersonalizedGreeting\n};","size_bytes":5034},"micro-modules/session/handleGoodbye.js":{"content":"// micro-modules/session/handleGoodbye.js\nconst serviceLoader = require('../../core/serviceLoader');\nconst sessionManager = require('../../core/sessionManager');\nconst logger = require('../../core/logger');\n\nasync function handleGoodbye(message) {\n  const greetings = serviceLoader.loadJSON('./data/genel_diyalog/selamlama_vedalasma.json');\n  const goodbyeMsg = greetings?.vedalasma?.hoscakal?.[0] || \n                    'Hoşça kalın! PlanB Global Network Ltd Şti adına iyi günler dilerim.';\n  \n  await message.reply(goodbyeMsg);\n  \n  logger.info(`👋 Vedalaşma mesajı gönderildi - Kullanıcı: ${message.from}`);\n  \n  sessionManager.updateUserSession(message.from, {\n    currentState: 'main_menu',\n    waitingForHelp: false,\n    helpTimer: null,\n    goodbyeTimer: null\n  });\n}\n\nmodule.exports = handleGoodbye;","size_bytes":821},"huggingface-asistan.js":{"content":"// huggingface-asistan.js - TÜRKÇE BERT İLE\nconst fetch = require('node-fetch');\n\nclass HuggingFaceAsistan {\n  constructor() {\n    this.apiKey = \"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\"; // Token'ınız burada\n    this.model = \"akdeniz27/bert-base-turkish-cased-ner\"; // TÜRKÇE BERT\n  }\n\n  async generateResponse(userMessage, userId = \"default\") {\n    try {\n      console.log(`🤖 Türkçe BERT'e sorgu: \"${userMessage}\"`);\n\n      // BERT için farklı bir API endpoint'i kullanıyoruz\n      const response = await fetch(\n        `https://api-inference.huggingface.co/models/${this.model}`,\n        {\n          method: \"POST\",\n          headers: { \n            \"Authorization\": `Bearer ${this.apiKey}`,\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            inputs: {\n              \"source_sentence\": userMessage,\n              \"sentences\": [\n                \"sigorta talebi\",\n                \"emlak ilanı\", \n                \"yazılım hizmeti\",\n                \"enerji danışmanlığı\",\n                \"genel soru\"\n              ]\n            }\n          })\n        }\n      );\n\n      console.log(\"📡 Status:\", response.status);\n      \n      if (response.status === 200) {\n        const data = await response.json();\n        console.log(\"📊 BERT Yanıtı:\", data);\n        \n        // BERT benzerlik skorlarını işle\n        return this.processBertResponse(data, userMessage);\n      } else {\n        console.log(\"❌ BERT Hatası:\", response.status);\n        return this.getSmartFallback(userMessage);\n      }\n      \n    } catch (error) {\n      console.error(\"❌ BERT Bağlantı Hatası:\", error.message);\n      return this.getSmartFallback(userMessage);\n    }\n  }\n\n  processBertResponse(bertScores, userMessage) {\n    // BERT benzerlik skorlarını işle\n    // bertScores: [0.8, 0.6, 0.3, 0.2, 0.1] gibi bir dizi\n    \n    if (!bertScores || !Array.isArray(bertScores)) {\n      return this.getSmartFallback(userMessage);\n    }\n\n    const categories = [\"sigorta\", \"emlak\", \"yazilim\", \"enerji\", \"genel\"];\n    const maxScore = Math.max(...bertScores);\n    const bestMatchIndex = bertScores.indexOf(maxScore);\n    const bestCategory = categories[bestMatchIndex];\n\n    console.log(`🎯 BERT Tahmini: ${bestCategory} (skor: ${maxScore})`);\n\n    // En yüksek skora göre yanıt ver\n    return this.getCategoryResponse(bestCategory, userMessage);\n  }\n\n  getCategoryResponse(category, message) {\n    const lowerMessage = message.toLowerCase();\n    \n    switch(category) {\n      case \"sigorta\":\n        if (lowerMessage.includes('trafik')) {\n          return 'Trafik sigortası teklifi için aracınızın plakasını öğrenebilir miyim? 🚗';\n        }\n        if (lowerMessage.includes('kasko')) {\n          return 'Kasko sigortası için aracınızın marka ve modelini sorabilir miyim? 🛡️';\n        }\n        return 'Sigorta hizmetlerimiz hakkında size nasıl yardımcı olabilirim? 🛡️ Trafik, kasko veya DASK?';\n      \n      case \"emlak\":\n        if (lowerMessage.includes('kira')) {\n          return 'Kiralık konut için hangi lokasyonda ve ne büyüklükte daire arıyorsunuz? 🏠';\n        }\n        return 'Emlak hizmetlerimizle ilgili yardımcı olabilirim. 🏠 Kiralık mı satılık mı?';\n      \n      case \"yazilim\":\n        return 'Yazılım geliştirme hizmetlerimiz için size özel çözüm sunabiliriz! 💻 Mobil uygulama mı web sitesi mi?';\n      \n      case \"enerji\":\n        return 'Güneş enerjisi çözümlerimiz hakkında detaylı bilgi verebilirim ☀️ Kurulum mu danışmanlık mı?';\n      \n      default:\n        return 'Size nasıl yardımcı olabilirim? 🌟 Sigorta, emlak, enerji veya yazılım hizmetlerimiz hakkında bilgi alabilirsiniz.';\n    }\n  }\n\n  getSmartFallback(message) {\n    const lowerMessage = message.toLowerCase();\n    \n    if (lowerMessage.includes('sigorta')) {\n      return 'Sigorta hizmetlerimiz hakkında bilgi verebilirim! 🛡️';\n    }\n    if (lowerMessage.includes('kira') || lowerMessage.includes('emlak')) {\n      return 'Emlak hizmetlerimizle ilgili yardımcı olabilirim. 🏠';\n    }\n    if (lowerMessage.includes('yazılım') || lowerMessage.includes('yazilim')) {\n      return 'Yazılım geliştirme hizmetlerimiz için bilgi alabilirsiniz! 💻';\n    }\n    if (lowerMessage.includes('enerji') || lowerMessage.includes('güneş')) {\n      return 'Güneş enerjisi çözümlerimiz hakkında detaylı bilgi verebilirim ☀️';\n    }\n    \n    return 'Size nasıl yardımcı olabilirim? 🌟';\n  }\n}\n\nmodule.exports = HuggingFaceAsistan;","size_bytes":4580},"micro-modules/service/handlePriceList.js":{"content":"// micro-modules/service/handlePriceList.js\nconst saleFlow = require('../../handlers/saleFlow');\n\nasync function handlePriceList(message, service) {\n  const priceData = service.data;\n  \n  console.log(`💰 Fiyat listesi işleniyor: ${service.name}`, priceData);\n  \n  let priceText = `💰 *${service.name.replace(/_/g, ' ').toUpperCase()}*\\n\\n`;\n  \n  if (priceData.fiyat_tablosu) {\n    for (const [aracTipi, fiyatlar] of Object.entries(priceData.fiyat_tablosu)) {\n      priceText += `*${aracTipi}:*\\n`;\n      for (const [sure, fiyat] of Object.entries(fiyatlar)) {\n        const sureText = sure.replace('_gun', ' gün').replace('15_gun', '15 gün').replace('30_gun', '30 gün').replace('90_gun', '90 gün');\n        priceText += `  • ${sureText}: ${fiyat}\\n`;\n      }\n      priceText += '\\n';\n    }\n  }\n  \n  if (priceData.önemli_bilgilendirme) {\n    priceText += `⚠️ *Önemli Bilgilendirme:*\\n${priceData.önemli_bilgilendirme}\\n\\n`;\n  }\n  \n  if (priceData.aciklama) {\n    priceText += `📝 *Açıklama:* ${priceData.aciklama}\\n\\n`;\n  }\n  \n  await message.reply(priceText);\n  \n  setTimeout(async () => {\n    await saleFlow.askForSale(message);\n  }, 2000);\n}\n\nmodule.exports = handlePriceList;","size_bytes":1200},"modules/menuHandler/subMenu.js":{"content":"// modules/menuHandler/subMenu.js\nconst logger = require('../logger');\nconst serviceConverter = require('./serviceConverter');\n\n// Alt menü seçimini işleme\nasync function handleSubMenuSelection(message, number, categoryName, services) {\n  console.log(`🎯 Alt menü seçimi: Kategori: ${categoryName}, Sayı: ${number}`);\n  \n  const categoryData = services[categoryName];\n  \n  if (!categoryData || !categoryData.category_options) {\n    await message.reply('❌ Alt menü bulunamadı. Ana menüye dönülüyor.');\n    const sessionManager = require('../sessionManager');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    const mainMenu = require('./mainMenu');\n    await mainMenu.showMainMenu(message, services);\n    return;\n  }\n\n  const selectedOption = categoryData.category_options.find(opt => opt.option_number === number);\n  \n  if (selectedOption) {\n    console.log(`✅ Alt menü seçildi: ${selectedOption.category_name}`);\n    \n    const serviceKey = serviceConverter.convertToServiceKey(selectedOption.category_name);\n    \n    // Servis anahtarını doğrula\n    const validation = serviceConverter.validateServiceKey(serviceKey, services);\n    \n    if (validation.isValid) {\n      const foundService = {\n        type: 'service',\n        data: validation.serviceData,\n        category: validation.category,\n        name: serviceKey\n      };\n      \n      console.log(`✅ Servis bulundu: ${validation.category}/${serviceKey}`);\n      const serviceFlow = require('../serviceFlow');\n      await serviceFlow.startServiceFlow(message, foundService);\n    } else {\n      console.log(`❌ Servis bulunamadı: ${serviceKey}`);\n      \n      // Debug için tüm servisleri listele\n      const allServices = serviceConverter.getAllServiceKeys();\n      console.log('📋 Mevcut servisler:', allServices);\n      \n      // Hangi kategoride aradığını göster\n      console.log(`🔍 Arama yapılan kategoriler:`, Object.keys(services).filter(key => \n        key.includes('sigorta') || key.includes('yazilim') || key.includes('lojistik')\n      ));\n      \n      await message.reply(`✅ *${selectedOption.category_name}* seçildi!\\n\\n` +\n                         `Bu hizmetle ilgili detaylı bilgi için en kısa sürede sizinle iletişime geçeceğiz.\\n\\n` +\n                         `_Servis dosyası henüz hazırlanıyor, yakında aktif olacaktır._`);\n      \n      const sessionManager = require('../sessionManager');\n      sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n      const mainMenu = require('./mainMenu');\n      await mainMenu.showMainMenu(message, services);\n    }\n  } else {\n    const validNumbers = categoryData.category_options.map(opt => opt.option_number);\n    await message.reply(`❌ Geçersiz numara. Lütfen ${Math.min(...validNumbers)}-${Math.max(...validNumbers)} arası bir numara girin.`);\n  }\n}\n\n// Kategori seçeneklerini göster\nasync function showCategoryOptions(message, category, services) {\n  const categoryData = category.data;\n  \n  if (!categoryData) {\n    await message.reply('❌ Kategori verileri bulunamadı. Ana menüye dönülüyor.');\n    const sessionManager = require('../sessionManager');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    const mainMenu = require('./mainMenu');\n    await mainMenu.showMainMenu(message, services);\n    return;\n  }\n  \n  let optionsText = `🎯 *${categoryData.bot_greeting || category.name.replace(/_/g, ' ').toUpperCase()}*\\n\\n`;\n  \n  if (categoryData.category_options && categoryData.category_options.length > 0) {\n    categoryData.category_options.forEach(option => {\n      optionsText += `${option.option_number}. ${option.category_name}\\n`;\n    });\n    \n    optionsText += `\\n${categoryData.completion_message || 'Lütfen bir numara seçin:'}`;\n    \n    await message.reply(optionsText);\n  } else {\n    await message.reply('❌ Bu kategoride henüz hizmet bulunmuyor. Ana menüye dönülüyor.');\n    const sessionManager = require('../sessionManager');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    const mainMenu = require('./mainMenu');\n    await mainMenu.showMainMenu(message, services);\n  }\n}\n\n// Kategori seçeneklerini doğrula\nfunction validateCategoryOptions(categoryData) {\n  if (!categoryData || !categoryData.category_options) {\n    return { isValid: false, error: 'Kategori seçenekleri bulunamadı' };\n  }\n  \n  const validOptions = categoryData.category_options.filter(opt => \n    opt.option_number && opt.category_name && opt.category_name.trim().length > 0\n  );\n  \n  if (validOptions.length === 0) {\n    return { isValid: false, error: 'Geçerli kategori seçenekleri bulunamadı' };\n  }\n  \n  // Sayıların sıralı olup olmadığını kontrol et\n  const numbers = validOptions.map(opt => opt.option_number).sort((a, b) => a - b);\n  const isSequential = numbers.every((num, index) => num === index + 1);\n  \n  if (!isSequential) {\n    console.log('⚠️  Kategori numaraları sıralı değil:', numbers);\n  }\n  \n  return { \n    isValid: true, \n    options: validOptions,\n    count: validOptions.length,\n    isSequential: isSequential\n  };\n}\n\n// Kategori bilgilerini getir\nfunction getCategoryInfo(categoryName, services) {\n  const categoryData = services[categoryName];\n  if (!categoryData) {\n    return null;\n  }\n  \n  const validation = validateCategoryOptions(categoryData);\n  \n  return {\n    name: categoryName,\n    displayName: categoryData.bot_greeting || categoryName.replace(/_/g, ' '),\n    options: validation.isValid ? validation.options : [],\n    optionCount: validation.isValid ? validation.count : 0,\n    isValid: validation.isValid,\n    error: validation.error,\n    completionMessage: categoryData.completion_message || 'Lütfen bir numara seçin:'\n  };\n}\n\n// Servis arama (debug için)\nfunction searchServiceInAllCategories(serviceKey, services) {\n  console.log(`🔍 Servis aranıyor: ${serviceKey}`);\n  \n  const foundIn = [];\n  \n  for (const [categoryName, categoryServices] of Object.entries(services)) {\n    if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n      foundIn.push({\n        category: categoryName,\n        service: categoryServices[serviceKey]\n      });\n    }\n  }\n  \n  if (foundIn.length > 0) {\n    console.log(`✅ Servis bulundu:`, foundIn.map(f => f.category));\n    return foundIn;\n  } else {\n    console.log(`❌ Servis hiçbir kategoride bulunamadı: ${serviceKey}`);\n    \n    // Benzer servisleri öner\n    const similarServices = findSimilarServices(serviceKey, services);\n    if (similarServices.length > 0) {\n      console.log(`💡 Benzer servisler:`, similarServices);\n    }\n    \n    return [];\n  }\n}\n\n// Benzer servisleri bul\nfunction findSimilarServices(serviceKey, services) {\n  const similar = [];\n  const searchTerm = serviceKey.toLowerCase();\n  \n  for (const [categoryName, categoryServices] of Object.entries(services)) {\n    if (typeof categoryServices === 'object') {\n      for (const [key, serviceData] of Object.entries(categoryServices)) {\n        if (key.toLowerCase().includes(searchTerm) || \n            (serviceData.service_name && serviceData.service_name.toLowerCase().includes(searchTerm))) {\n          similar.push({\n            category: categoryName,\n            key: key,\n            name: serviceData.service_name || key\n          });\n        }\n      }\n    }\n  }\n  \n  return similar;\n}\n\nmodule.exports = {\n  handleSubMenuSelection,\n  showCategoryOptions,\n  validateCategoryOptions,\n  getCategoryInfo,\n  searchServiceInAllCategories,\n  findSimilarServices\n};","size_bytes":7597},"guncelaryakodlar.js":{"content":"// GÜNCELLENMİŞ ARYA BOT KODLARI - TEK DOSYA\n// Tüm JavaScript dosyaları burada birleştirilmiştir\n============================================================\n\n\n============================================================\n// DOSYA: modules/utils/globalclient.js\n============================================================\n\n// modules/utils/globalClient.js - GÜNCELLENDİ\nlet globalClient = null;\n\nfunction setGlobalClient(client) {\n  globalClient = client;\n}\n\nfunction getGlobalClient() {\n  return globalClient;\n}\n\n// Alıntısız mesaj gönderme fonksiyonu ekle\nasync function sendMessageWithoutQuote(chatId, message) {\n  if (!globalClient) {\n    throw new Error('Global client başlatılmamış');\n  }\n  \n  try {\n    const chat = await globalClient.getChatById(chatId);\n    await chat.sendMessage(message);\n    return true;\n  } catch (error) {\n    console.error('Mesaj gönderme hatası:', error);\n    throw error;\n  }\n}\n\nmodule.exports = {\n  setGlobalClient,\n  getGlobalClient,\n  sendMessageWithoutQuote\n};\n\n\n============================================================\n// DOSYA: modules/logger.js\n============================================================\n\n// Basit logger fonksiyonu\nconst logger = {\n  info: (message) => console.log(`[INFO] ${new Date().toISOString()}: ${message}`),\n  error: (message) => console.error(`[ERROR] ${new Date().toISOString()}: ${message}`),\n  warn: (message) => console.warn(`[WARN] ${new Date().toISOString()}: ${message}`)\n};\n\nmodule.exports = logger;\n\n\n============================================================\n// DOSYA: modules/validationutils.js\n============================================================\n\n// Cevap doğrulama\nfunction validateAnswer(answer, fieldType) {\n  const cleanAnswer = answer.trim();\n  \n  switch (fieldType) {\n    case 'number':\n      const number = parseInt(cleanAnswer);\n      if (isNaN(number)) {\n        return {\n          isValid: false,\n          errorMessage: 'Geçersiz sayı formatı. Lütfen sadece rakam girin.'\n        };\n      }\n      return { isValid: true, cleanedValue: number };\n      \n    case 'date':\n      const dateRegex = /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/;\n      const match = cleanAnswer.match(dateRegex);\n      if (!match) {\n        return {\n          isValid: false,\n          errorMessage: 'Geçersiz tarih formatı. Lütfen Gün/Ay/Yıl formatında girin (Örnek: 15/01/2024).'\n        };\n      }\n      return { isValid: true, cleanedValue: cleanAnswer };\n      \n    case 'phone':\n      const phoneRegex = /^[5][0-9]{2}\\s?[0-9]{3}\\s?[0-9]{2}\\s?[0-9]{2}$/;\n      const cleanPhone = cleanAnswer.replace(/\\s/g, '');\n      if (!phoneRegex.test(cleanPhone)) {\n        return {\n          isValid: false,\n          errorMessage: 'Geçersiz telefon formatı. Lütfen 5XX XXX XX XX formatında girin.'\n        };\n      }\n      return { isValid: true, cleanedValue: cleanAnswer };\n      \n    case 'text':\n    default:\n      if (cleanAnswer.length < 2) {\n        return {\n          isValid: false,\n          errorMessage: 'Cevap çok kısa. Lütfen daha detaylı bilgi verin.'\n        };\n      }\n      return { isValid: true, cleanedValue: cleanAnswer };\n  }\n}\n\nmodule.exports = {\n  validateAnswer\n};\n\n\n============================================================\n// DOSYA: modules/serviceloader.js\n============================================================\n\nconst fs = require('fs');\nconst path = require('path');\nconst logger = require('./logger');\n\n// JSON verilerini yükleme fonksiyonu\nfunction loadJSON(filePath) {\n  try {\n    if (fs.existsSync(filePath)) {\n      const data = fs.readFileSync(filePath, 'utf8');\n      return JSON.parse(data);\n    }\n    return null;\n  } catch (error) {\n    logger.error(`JSON yükleme hatası (${filePath}): ${error.message}`);\n    return null;\n  }\n}\n\n// Tüm servisleri yükle\nfunction loadAllServices() {\n  const services = {};\n  \n  // Ana kategorileri yükle\n  const anaKategoriDosyalari = fs.readdirSync('./ana_kategoriler');\n  anaKategoriDosyalari.forEach(file => {\n    if (file.endsWith('.json')) {\n      const key = file.replace('.json', '');\n      services[key] = loadJSON(path.join('./ana_kategoriler', file));\n    }\n  });\n  \n  // Data klasöründeki servisleri yükle\n  const dataKlasorleri = fs.readdirSync('./data');\n  dataKlasorleri.forEach(klasor => {\n    const klasorYolu = path.join('./data', klasor);\n    if (fs.statSync(klasorYolu).isDirectory()) {\n      services[klasor] = {};\n      const servisDosyalari = fs.readdirSync(klasorYolu);\n      servisDosyalari.forEach(file => {\n        if (file.endsWith('.json')) {\n          const servisAdi = file.replace('.json', '');\n          services[klasor][servisAdi] = loadJSON(path.join(klasorYolu, file));\n        }\n      });\n    }\n  });\n  \n  // Fiyat listelerini yükle\n  const fiyatKlasoru = './fiyat_listeleri';\n  if (fs.existsSync(fiyatKlasoru)) {\n    services['fiyat_listeleri'] = {};\n    const fiyatDosyalari = fs.readdirSync(fiyatKlasoru);\n    fiyatDosyalari.forEach(file => {\n      if (file.endsWith('.json')) {\n        const fiyatAdi = file.replace('.json', '');\n        services['fiyat_listeleri'][fiyatAdi] = loadJSON(path.join(fiyatKlasoru, file));\n      }\n    });\n  }\n  \n  return services;\n}\n\nmodule.exports = {\n  loadJSON,\n  loadAllServices\n};\n\n\n============================================================\n// DOSYA: modules/sessionmanager.js\n============================================================\n\nconst logger = require('./logger');\n\n// Kullanıcı oturumlarını takip etmek için\nconst userSessions = new Map();\n\n// Kullanıcı oturumu oluştur\nfunction createUserSession(userId) {\n  const session = {\n    userId: userId,\n    lastActivity: Date.now(),\n    waitingForResponse: false,\n    waitingForHelp: false,\n    menuTimer: null,\n    saleTimer: null,\n    helpTimer: null,\n    goodbyeTimer: null,\n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {},\n    serviceFlow: null\n  };\n  \n  userSessions.set(userId, session);\n  return session;\n}\n\n// Kullanıcı oturumunu güncelle\nfunction updateUserSession(userId, updates) {\n  const session = userSessions.get(userId) || createUserSession(userId);\n  Object.assign(session, updates);\n  session.lastActivity = Date.now();\n  userSessions.set(userId, session);\n  return session;\n}\n\n// Yardım timer'ı başlat\nfunction startHelpTimer(userId, message, services) {\n  const session = getUserSession(userId);\n  if (session && session.helpTimer) {\n    clearTimeout(session.helpTimer);\n  }\n  if (session && session.goodbyeTimer) {\n    clearTimeout(session.goodbyeTimer);\n  }\n\n  logger.info(`⏰ Yardım timer başlatıldı - Kullanıcı: ${userId}`);\n\n  // 1. Timer: 3 dakika sonra menüyü göster\n  const helpTimer = setTimeout(async () => {\n    const currentSession = getUserSession(userId);\n    if (currentSession && currentSession.waitingForHelp) {\n      logger.info(`⏰ Yardım zaman aşımı - Menü gösteriliyor: ${userId}`);\n      \n      const menuHandler = require('./menuHandler');\n      await menuHandler.showMainMenu(message, services);\n      \n      // 2. Timer: 3 dakika sonra vedalaşma\n      const goodbyeTimer = setTimeout(async () => {\n        await handleGoodbye(message);\n      }, 3 * 60 * 1000); // 3 dakika\n      \n      updateUserSession(userId, { \n        waitingForHelp: false, \n        helpTimer: null,\n        goodbyeTimer: goodbyeTimer\n      });\n    }\n  }, 3 * 60 * 1000); // 3 dakika\n\n  updateUserSession(userId, { \n    waitingForHelp: true, \n    helpTimer: helpTimer\n  });\n}\n\n// Vedalaşma işlemi\nasync function handleGoodbye(message) {\n  const serviceLoader = require('./serviceLoader');\n  const greetings = serviceLoader.loadJSON('./genel_diyalog/selamlama_vedalasma.json');\n  const goodbyeMsg = greetings?.vedalasma?.hoscakal?.[0] || \n                    'Hoşça kalın! PlanB Global Network Ltd Şti adına iyi günler dilerim.';\n  \n  await message.reply(goodbyeMsg);\n  \n  logger.info(`👋 Vedalaşma mesajı gönderildi - Kullanıcı: ${message.from}`);\n  \n  // Oturumu temizle\n  updateUserSession(message.from, {\n    currentState: 'main_menu',\n    waitingForHelp: false,\n    helpTimer: null,\n    goodbyeTimer: null\n  });\n}\n\n// Yardım timer'ını durdur (kullanıcı cevap verdiğinde)\nfunction stopHelpTimer(userId) {\n  const session = getUserSession(userId);\n  if (session) {\n    if (session.helpTimer) {\n      clearTimeout(session.helpTimer);\n      logger.info(`⏰ Yardım timer durduruldu - Kullanıcı: ${userId}`);\n    }\n    if (session.goodbyeTimer) {\n      clearTimeout(session.goodbyeTimer);\n      logger.info(`⏰ Vedalaşma timer durduruldu - Kullanıcı: ${userId}`);\n    }\n    updateUserSession(userId, { \n      waitingForHelp: false, \n      helpTimer: null,\n      goodbyeTimer: null\n    });\n  }\n}\n\n// Menü zamanlayıcı başlat\nfunction startMenuTimer(userId, message, services) {\n  const session = getUserSession(userId);\n  if (session && session.menuTimer) {\n    clearTimeout(session.menuTimer);\n  }\n\n  const timer = setTimeout(async () => {\n    const currentSession = getUserSession(userId);\n    if (currentSession && currentSession.waitingForResponse) {\n      logger.info(`⏰ Menü zaman aşımı - Kullanıcı: ${userId}`);\n      const menuHandler = require('./menuHandler');\n      await menuHandler.showMainMenu(message, services);\n      updateUserSession(userId, { \n        waitingForResponse: false, \n        menuTimer: null,\n        currentState: 'main_menu'\n      });\n    }\n  }, 60000);\n\n  updateUserSession(userId, { \n    waitingForResponse: true, \n    menuTimer: timer,\n    currentState: 'waiting_for_service'\n  });\n}\n\n// Menü zamanlayıcıyı durdur\nfunction stopMenuTimer(userId) {\n  const session = getUserSession(userId);\n  if (session && session.menuTimer) {\n    clearTimeout(session.menuTimer);\n    updateUserSession(userId, { \n      waitingForResponse: false, \n      menuTimer: null\n    });\n  }\n}\n\n// Satış zamanlayıcısını temizle\nfunction clearSaleTimer(userId) {\n  const session = getUserSession(userId);\n  if (session && session.saleTimer) {\n    clearTimeout(session.saleTimer);\n    updateUserSession(userId, { saleTimer: null });\n  }\n}\n\n// Oturumu getir\nfunction getUserSession(userId) {\n  return userSessions.get(userId);\n}\n\nmodule.exports = {\n  createUserSession,\n  updateUserSession,\n  startMenuTimer,\n  stopMenuTimer,\n  clearSaleTimer,\n  getUserSession,\n  userSessions,\n  startHelpTimer,\n  stopHelpTimer,\n  handleGoodbye\n};\n\n\n============================================================\n// DOSYA: modules/menuHandler/numberhandler.js\n============================================================\n\n// modules/menuHandler/numberHandler.js - TAMAMEN GÜNCELLENDİ\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendNumberMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Sayı mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\n// Sayı seçimini işleme\nasync function handleNumberSelection(message, number, services) {\n  const session = sessionManager.getUserSession(message.from);\n  const currentState = session?.currentState || 'main_menu';\n\n  console.log(`🔢 Sayı işleniyor: ${number}, Durum: ${currentState}`);\n\n  // Alt menü durumu kontrolü\n  if (currentState.startsWith('submenu_')) {\n    const categoryName = currentState.replace('submenu_', '');\n    const subMenu = require('./subMenu');\n    await subMenu.handleSubMenuSelection(message, number, categoryName, services);\n    return;\n  }\n\n  // Ana menü durumu\n  const mainMenu = require('./mainMenu');\n  const mainCategories = mainMenu.getMainCategories();\n\n  // Sayı aralığını kontrol et\n  if (number >= 1 && number <= mainCategories.length) {\n    const selectedCategory = mainCategories[number - 1];\n    const categoryData = services[selectedCategory];\n    \n    if (categoryData) {\n      console.log(`✅ Kategori seçildi: ${selectedCategory}`);\n      const subMenu = require('./subMenu');\n      await subMenu.showCategoryOptions(message, { data: categoryData, name: selectedCategory }, services);\n      sessionManager.updateUserSession(message.from, { currentState: `submenu_${selectedCategory}` });\n    } else {\n      console.log(`❌ Kategori verisi bulunamadı: ${selectedCategory}`);\n      await sendNumberMessage(message, '❌ Bu kategori bulunamadı. Lütfen tekrar deneyin.');\n      \n      // Ana menüyü tekrar göster\n      setTimeout(async () => {\n        await mainMenu.showMainMenu(message, services);\n      }, 1000);\n    }\n  } else {\n    console.log(`❌ Geçersiz sayı aralığı: ${number}, Beklenen: 1-${mainCategories.length}`);\n    await sendNumberMessage(message, `❌ Geçersiz numara. Lütfen 1-${mainCategories.length} arası bir numara girin.`);\n    \n    // Ana menüyü tekrar göster\n    setTimeout(async () => {\n      await mainMenu.showMainMenu(message, services);\n    }, 1000);\n  }\n}\n\n// Sayı doğrulama\nfunction validateNumberInput(number, min, max) {\n  console.log(`🔍 Sayı doğrulanıyor: ${number}, Min: ${min}, Max: ${max}`);\n  \n  // Sayısal değilse\n  if (isNaN(number)) {\n    return { \n      isValid: false, \n      error: 'Geçersiz sayı formatı. Lütfen sadece rakam girin.' \n    };\n  }\n  \n  const parsedNumber = parseInt(number);\n  \n  // Aralık kontrolü\n  if (parsedNumber < min || parsedNumber > max) {\n    return { \n      isValid: false, \n      error: `Lütfen ${min}-${max} arası bir numara girin` \n    };\n  }\n  \n  return { \n    isValid: true, \n    number: parsedNumber \n  };\n}\n\n// Menü numaralarını formatla\nfunction formatMenuNumbers(options, startFrom = 1) {\n  console.log(`📝 Menü numaraları formatlanıyor: ${options.length} seçenek, Başlangıç: ${startFrom}`);\n  \n  const formattedOptions = options.map((option, index) => {\n    // Eğer option_number zaten varsa, onu kullan\n    if (option.option_number) {\n      return option;\n    }\n    \n    // Yoksa yeni numara ata\n    return {\n      ...option,\n      option_number: startFrom + index\n    };\n  });\n  \n  console.log(`✅ ${formattedOptions.length} seçenek formatlandı`);\n  return formattedOptions;\n}\n\n// Geçerli sayı aralığını getir\nfunction getValidNumberRange(session, services) {\n  const currentState = session?.currentState || 'main_menu';\n  \n  if (currentState.startsWith('submenu_')) {\n    const categoryName = currentState.replace('submenu_', '');\n    const categoryData = services[categoryName];\n    \n    if (categoryData && categoryData.category_options) {\n      const numbers = categoryData.category_options.map(opt => opt.option_number);\n      return {\n        min: Math.min(...numbers),\n        max: Math.max(...numbers),\n        count: numbers.length,\n        type: 'submenu'\n      };\n    }\n  } else {\n    // Ana menü\n    const mainMenu = require('./mainMenu');\n    const mainCategories = mainMenu.getMainCategories();\n    return {\n      min: 1,\n      max: mainCategories.length,\n      count: mainCategories.length,\n      type: 'main_menu'\n    };\n  }\n  \n  return {\n    min: 1,\n    max: 1,\n    count: 0,\n    type: 'unknown'\n  };\n}\n\n// Hata mesajı gönder\nasync function sendErrorMessage(message, session, services) {\n  const range = getValidNumberRange(session, services);\n  \n  let errorMessage = '';\n  \n  switch (range.type) {\n    case 'main_menu':\n      errorMessage = `❌ Geçersiz numara. Lütfen 1-${range.max} arası bir numara girin.`;\n      break;\n    case 'submenu':\n      errorMessage = `❌ Geçersiz numara. Lütfen ${range.min}-${range.max} arası bir numara girin.`;\n      break;\n    default:\n      errorMessage = '❌ Geçersiz seçim. Lütfen menüden bir numara seçin.';\n  }\n  \n  await sendNumberMessage(message, errorMessage);\n  \n  // Duruma göre uygun menüyü tekrar göster\n  setTimeout(async () => {\n    if (range.type === 'main_menu') {\n      const mainMenu = require('./mainMenu');\n      await mainMenu.showMainMenu(message, services);\n    } else if (range.type === 'submenu') {\n      const categoryName = session.currentState.replace('submenu_', '');\n      const categoryData = services[categoryName];\n      if (categoryData) {\n        const subMenu = require('./subMenu');\n        await subMenu.showCategoryOptions(message, { data: categoryData, name: categoryName }, services);\n      }\n    }\n  }, 1000);\n}\n\n// Sayı girişini işle (ana fonksiyon)\nasync function processNumberInput(message, input, services) {\n  const session = sessionManager.getUserSession(message.from);\n  const range = getValidNumberRange(session, services);\n  \n  console.log(`🔢 Sayı işleniyor: \"${input}\", Durum: ${session?.currentState}, Beklenen aralık: ${range.min}-${range.max}`);\n  \n  // Sayıyı doğrula\n  const validation = validateNumberInput(input, range.min, range.max);\n  \n  if (!validation.isValid) {\n    console.log(`❌ Sayı doğrulama başarısız: ${validation.error}`);\n    await sendNumberMessage(message, `❌ ${validation.error}`);\n    return false;\n  }\n  \n  const number = validation.number;\n  console.log(`✅ Sayı doğrulandı: ${number}`);\n  \n  // Sayıyı işle\n  await handleNumberSelection(message, number, services);\n  return true;\n}\n\n// Debug bilgilerini logla\nfunction logNumberProcessing(session, number, services) {\n  const range = getValidNumberRange(session, services);\n  \n  console.log('🔍 SAYI İŞLEME DEBUG:');\n  console.log(`- Mevcut durum: ${session?.currentState || 'main_menu'}`);\n  console.log(`- Girilen sayı: ${number}`);\n  console.log(`- Beklenen aralık: ${range.min}-${range.max}`);\n  console.log(`- Menü tipi: ${range.type}`);\n  console.log(`- Seçenek sayısı: ${range.count}`);\n  \n  if (range.type === 'submenu') {\n    const categoryName = session.currentState.replace('submenu_', '');\n    const categoryData = services[categoryName];\n    if (categoryData && categoryData.category_options) {\n      console.log(`- Mevcut seçenekler:`, categoryData.category_options.map(opt => ({\n        num: opt.option_number,\n        name: opt.category_name\n      })));\n    }\n  }\n}\n\nmodule.exports = {\n  handleNumberSelection,\n  validateNumberInput,\n  formatMenuNumbers,\n  getValidNumberRange,\n  sendErrorMessage,\n  processNumberInput,\n  logNumberProcessing\n};\n\n\n============================================================\n// DOSYA: modules/menuHandler/serviceconverter.js\n============================================================\n\n// modules/menuHandler/serviceConverter.js\nconst logger = require('../logger');\n\n// Servis anahtarını dönüştürme - DÜZELTİLDİ\nfunction convertToServiceKey(categoryName) {\n  const conversions = {\n    // === SİGORTA HİZMETLERİ ===\n    'Yeşil Sigorta': 'yesil_sigorta', // yesil_sigortasi → yesil_sigorta\n    'Trafik Sigortası': 'trafik_sigortasi',\n    'KASKO': 'kasko',\n    'Koltuk Sigortası': 'koltuk_sigortasi',\n    'DASK': 'dask',\n    'Konut Sigortası': 'konut_sigortasi',\n    'İşyeri Sigortası': 'isyeri_sigortasi',\n    'Seyahat Sağlık Sigortası': 'seyahat_saglik_sigortasi',\n    'Tamamlayıcı Sağlık Sigortası': 'tamamlayici_saglik_sigortasi',\n    'Özel Sağlık Sigortası': 'ozel_saglik_sigortasi',\n\n    // === YAZILIM TALEPLERİ ===\n    'Özel Yazılım Geliştirme': 'ozel_yazilim_gelistirme',\n    'Mobil Uygulama Geliştirme': 'mobil_uygulama_gelistirme',\n\n    // === SİBER GÜVENLİK ===\n    'Genel Ağ Güvenliği': 'genel_ag_guvenligi',\n    'Kullanıcı Güvenliği': 'kullanici_guvenligi',\n    'Veri Güvenliği': 'veri_guvenligi',\n    'Uygulama Güvenliği': 'uygulama_guvenligi',\n    'Kimlik ve Erişim Yönetimi': 'kimlik_erisim_yonetimi',\n    'Güvenlik Yönetimi': 'guvenlik_yonetimi',\n    'Penetrasyon Test Talebi': 'penetrasyon_test_talebi',\n    'Eğitim Talepleri': 'egitim_talepleri',\n\n    // === LOJİSTİK HİZMETLERİ ===\n    'Yurtiçi Yük Nakli': 'yurtici_yuk_nakli',\n    'Yurtdışı Yük Nakli': 'yurtdisi_yuk_nakli',\n    'Depo/Antrepo Hizmeti': 'depo_antrepo_hizmeti',\n\n    // === İTHALAT İHRACAT ===\n    'Yurtdışı Müşteri Araştırma': 'yurtdisi_musteri_arastirma',\n    'Yurtiçi Tedarikçi Araştırma': 'yurtici_tedarikci_arastirma',\n    'Gümrük Operasyon Hizmetleri': 'gumruk_operasyon_hizmetleri',\n    'Yurtiçi Ürün Araştırma': 'yurtici_urun_arastirma',\n    'Yurtdışı Pazar Araştırma': 'yurtdisi_pazar_arastirma',\n\n    // === PROFESYONEL DENETLEME ===\n    'İç Denetim Hizmeti': 'ic_denetim_hizmeti',\n    'Tedarikçi Müşteri Mali Denetim': 'tedarikci_musteri_mali_denetim',\n    'Tedarikçi Kalite Denetim': 'tedarikci_kalite_denetim',\n    'Tedarikçi Üretim Denetleme': 'tedarikci_uretim_denetleme',\n    'Firma Temsil Hizmeti': 'firma_temsil_hizmeti',\n\n    // === İNŞAAT EMLAK ===\n    'Satılık Gayrimenkul': 'satilik_gayrimenkul',\n    'Kiralık Gayrimenkul': 'kiralik_gayrimenkul',\n    'Yurtdışı Gayrimenkul Yatırım': 'yurtdisi_gayrimenkul_yatirim',\n    'İnşaat Taahhüt Hizmeti': 'insaat_taahhut_hizmeti',\n\n    // === CRM HİZMETLERİ ===\n    'Müşteri Seçimi': 'musteri_secimi',\n    'Müşteri Edinme': 'musteri_edinme',\n    'Müşteri Koruma': 'musteri_koruma',\n    'Müşteri Derinleştirme': 'musteri_derinlestirme',\n\n    // === TEKSTİL ÜRÜNLERİ ===\n    'Erkek Giyim': 'erkek_giyim',\n    'Kadın Giyim': 'kadin_giyim',\n    'Ev Tekstil Ürünleri': 'ev_tekstil_urunleri',\n\n    // === KOZMETİK ÜRÜNLERİ ===\n    'Parfüm': 'parfum',\n    'Deodorant': 'deodorant',\n    'Kişisel Bakım': 'kisisel_bakim',\n    'Medikal Kozmetik': 'medikal_kozmetik',\n\n    // === TUR ORGANİZASYON ===\n    'Yurtiçi Özel Gezi Talebi': 'yurtici_ozel_gezi_talebi',\n    'Yurtdışı Özel Gezi Talebi': 'yurtdisi_ozel_gezi_talebi',\n    'Personel Servis Talebi': 'personel_servis_talebi',\n\n    // === GÜNEŞ ENERJİSİ SİSTEMLERİ ===\n    'Güneş Verimlilik Hesabı': 'gunes_verimlilik_hesabi',\n    'GES Üretim Hesaplama': 'ges_uretim_hesaplama',\n    'GES Kurulum Hesaplama': 'ges_kurulum_hesaplama',\n\n    // === KURUMSAL HİZMETLER ===\n    'İnsan Kaynakları Danışmanlığı': 'insan_kaynaklari_danismanligi',\n    'Stratejik Planlama Danışmanlığı': 'stratejik_planlama_danismanligi',\n    'Finansal Danışmanlık': 'finansal_danismanlik',\n    'Operasyonel İyileştirme': 'operasyonel_iyilestirme',\n    'Kurumsal İletişim Danışmanlığı': 'kurumsal_iletisim_danismanligi',\n    'Yasal Danışmanlık': 'yasal_danismanlik',\n    'Teknoloji Danışmanlığı': 'teknoloji_danismanlik',\n    'Kurumsal Eğitim Hizmetleri': 'kurumsal_egitim_hizmetleri'\n  };\n\n  const serviceKey = conversions[categoryName];\n  \n  if (serviceKey) {\n    console.log(`🔄 Servis dönüşümü: \"${categoryName}\" -> \"${serviceKey}\"`);\n    return serviceKey;\n  } else {\n    // Fallback: otomatik dönüşüm\n    const autoConverted = categoryName.toLowerCase()\n      .replace(/ /g, '_')\n      .replace(/[ıİ]/g, 'i')\n      .replace(/[şŞ]/g, 's')\n      .replace(/[ğĞ]/g, 'g')\n      .replace(/[üÜ]/g, 'u')\n      .replace(/[çÇ]/g, 'c')\n      .replace(/[öÖ]/g, 'o');\n    \n    console.log(`⚠️  Servis bulunamadı, otomatik dönüşüm: \"${categoryName}\" -> \"${autoConverted}\"`);\n    return autoConverted;\n  }\n}\n\n// Tüm mevcut servis anahtarlarını listele - DÜZELTİLDİ\nfunction getAllServiceKeys() {\n  return {\n    sigorta: [\n      'yesil_sigorta', // yesil_sigortasi → yesil_sigorta\n      'trafik_sigortasi',\n      'kasko',\n      'koltuk_sigortasi',\n      'dask',\n      'konut_sigortasi',\n      'isyeri_sigortasi',\n      'seyahat_saglik_sigortasi',\n      'tamamlayici_saglik_sigortasi',\n      'ozel_saglik_sigortasi'\n    ],\n    // ... diğer kategoriler aynı kalacak\n    yazilim: [\n      'ozel_yazilim_gelistirme', 'mobil_uygulama_gelistirme'\n    ],\n    siber_guvenlik: [\n      'genel_ag_guvenligi',\n      'kullanici_guvenligi',\n      'veri_guvenligi',\n      'uygulama_guvenligi',\n      'kimlik_erisim_yonetimi',\n      'guvenlik_yonetimi',\n      'penetrasyon_test_talebi',\n      'egitim_talepleri'\n    ],\n    lojistik: [\n      'yurtici_yuk_nakli', 'yurtdisi_yuk_nakli', 'depo_antrepo_hizmeti'\n    ],\n    ithalat_ihracat: [\n      'yurtdisi_musteri_arastirma',\n      'yurtici_tedarikci_arastirma',\n      'gumruk_operasyon_hizmetleri',\n      'yurtici_urun_arastirma',\n      'yurtdisi_pazar_arastirma'\n    ],\n    profesyonel_denetleme: [\n      'ic_denetim_hizmeti',\n      'tedarikci_musteri_mali_denetim',\n      'tedarikci_kalite_denetim',\n      'tedarikci_uretim_denetleme',\n      'firma_temsil_hizmeti'\n    ],\n    insaat_emlak: [\n      'satilik_gayrimenkul',\n      'kiralik_gayrimenkul',\n      'yurtdisi_gayrimenkul_yatirim',\n      'insaat_taahhut_hizmeti'\n    ],\n    crm: [\n      'musteri_secimi',\n      'musteri_edinme',\n      'musteri_koruma',\n      'musteri_derinlestirme'\n    ],\n    tekstil: [ 'erkek_giyim', 'kadin_giyim', 'ev_tekstil_urunleri' ],\n    kozmetik: [ 'parfum', 'deodorant', 'kisisel_bakim', 'medikal_kozmetik' ],\n    tur: [\n      'yurtici_ozel_gezi_talebi',\n      'yurtdisi_ozel_gezi_talebi',\n      'personel_servis_talebi'\n    ],\n    gunes_enerjisi: [\n      'gunes_verimlilik_hesabi',\n      'ges_uretim_hesaplama',\n      'ges_kurulum_hesaplama'\n    ],\n    kurumsal: [\n      'insan_kaynaklari_danismanligi',\n      'stratejik_planlama_danismanligi',\n      'finansal_danismanlik',\n      'operasyonel_iyilestirme',\n      'kurumsal_iletisim_danismanligi',\n      'yasal_danismanlik',\n      'teknoloji_danismanlik',\n      'kurumsal_egitim_hizmetleri'\n    ]\n  };\n}\n\n// Servis anahtarını doğrula\nfunction validateServiceKey(serviceKey, services) {\n  for (const [category, categoryServices] of Object.entries(services)) {\n    if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n      return {\n        isValid: true,\n        category: category,\n        serviceData: categoryServices[serviceKey]\n      };\n    }\n  }\n  \n  return {\n    isValid: false,\n    error: `Servis bulunamadı: ${serviceKey}`\n  };\n}\n\nmodule.exports = {\n  convertToServiceKey,\n  getAllServiceKeys,\n  validateServiceKey\n};\n\n\n============================================================\n// DOSYA: modules/menuHandler/categorymanager.js\n============================================================\n\n// modules/menuHandler/categoryManager.js\nconst logger = require('../logger');\n\n// Kategori verilerini yükle\nfunction loadCategoryData(categoryName, services) {\n  console.log(`📁 Kategori yükleniyor: ${categoryName}`);\n  \n  // Önce ana kategorilerde ara\n  if (services[categoryName]) {\n    return services[categoryName];\n  }\n  \n  // Alternatif isimlerle dene\n  const alternativeNames = getAlternativeCategoryNames(categoryName);\n  for (const altName of alternativeNames) {\n    if (services[altName]) {\n      console.log(`🔄 Alternatif kategori bulundu: ${altName}`);\n      return services[altName];\n    }\n  }\n  \n  console.log(`❌ Kategori bulunamadı: ${categoryName}`);\n  return null;\n}\n\n// Alternatif kategori isimlerini getir\nfunction getAlternativeCategoryNames(categoryName) {\n  const alternatives = [];\n  \n  // \"_ana\" ekle/çıkar\n  if (categoryName.includes('_ana')) {\n    alternatives.push(categoryName.replace('_ana', ''));\n  } else {\n    alternatives.push(categoryName + '_ana');\n  }\n  \n  // \"_kategori\" ekle/çıkar\n  if (categoryName.includes('_kategori')) {\n    alternatives.push(categoryName.replace('_kategori', ''));\n  } else {\n    alternatives.push(categoryName + '_kategori');\n  }\n  \n  // \"_hizmetleri\" ekle/çıkar\n  if (categoryName.includes('_hizmetleri')) {\n    alternatives.push(categoryName.replace('_hizmetleri', ''));\n  } else {\n    alternatives.push(categoryName + '_hizmetleri');\n  }\n  \n  return alternatives.filter((value, index, self) => self.indexOf(value) === index);\n}\n\n// Kategori seçeneklerini doğrula\nfunction validateCategoryOptions(categoryData) {\n  if (!categoryData || !categoryData.category_options) {\n    return { isValid: false, error: 'Kategori seçenekleri bulunamadı' };\n  }\n  \n  const options = categoryData.category_options;\n  const validOptions = options.filter(opt => \n    opt.option_number && opt.category_name && opt.category_name.trim().length > 0\n  );\n  \n  if (validOptions.length === 0) {\n    return { isValid: false, error: 'Geçerli kategori seçenekleri bulunamadı' };\n  }\n  \n  return { \n    isValid: true, \n    options: validOptions,\n    count: validOptions.length \n  };\n}\n\n// Kategori bilgilerini getir\nfunction getCategoryInfo(categoryName, services) {\n  const categoryData = loadCategoryData(categoryName, services);\n  if (!categoryData) {\n    return null;\n  }\n  \n  return {\n    name: categoryName,\n    displayName: categoryData.bot_greeting || categoryName.replace(/_/g, ' '),\n    options: categoryData.category_options || [],\n    completionMessage: categoryData.completion_message || 'Lütfen bir numara seçin:'\n  };\n}\n\nmodule.exports = {\n  loadCategoryData,\n  getAlternativeCategoryNames,\n  validateCategoryOptions,\n  getCategoryInfo\n};\n\n\n============================================================\n// DOSYA: modules/menuHandler/submenu.js\n============================================================\n\n// modules/menuHandler/subMenu.js\nconst logger = require('../logger');\nconst serviceConverter = require('./serviceConverter');\n\n// Alt menü seçimini işleme\nasync function handleSubMenuSelection(message, number, categoryName, services) {\n  console.log(`🎯 Alt menü seçimi: Kategori: ${categoryName}, Sayı: ${number}`);\n  \n  const categoryData = services[categoryName];\n  \n  if (!categoryData || !categoryData.category_options) {\n    await message.reply('❌ Alt menü bulunamadı. Ana menüye dönülüyor.');\n    const sessionManager = require('../sessionManager');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    const mainMenu = require('./mainMenu');\n    await mainMenu.showMainMenu(message, services);\n    return;\n  }\n\n  const selectedOption = categoryData.category_options.find(opt => opt.option_number === number);\n  \n  if (selectedOption) {\n    console.log(`✅ Alt menü seçildi: ${selectedOption.category_name}`);\n    \n    const serviceKey = serviceConverter.convertToServiceKey(selectedOption.category_name);\n    \n    // Servis anahtarını doğrula\n    const validation = serviceConverter.validateServiceKey(serviceKey, services);\n    \n    if (validation.isValid) {\n      const foundService = {\n        type: 'service',\n        data: validation.serviceData,\n        category: validation.category,\n        name: serviceKey\n      };\n      \n      console.log(`✅ Servis bulundu: ${validation.category}/${serviceKey}`);\n      const serviceFlow = require('../serviceFlow');\n      await serviceFlow.startServiceFlow(message, foundService);\n    } else {\n      console.log(`❌ Servis bulunamadı: ${serviceKey}`);\n      \n      // Debug için tüm servisleri listele\n      const allServices = serviceConverter.getAllServiceKeys();\n      console.log('📋 Mevcut servisler:', allServices);\n      \n      // Hangi kategoride aradığını göster\n      console.log(`🔍 Arama yapılan kategoriler:`, Object.keys(services).filter(key => \n        key.includes('sigorta') || key.includes('yazilim') || key.includes('lojistik')\n      ));\n      \n      await message.reply(`✅ *${selectedOption.category_name}* seçildi!\\n\\n` +\n                         `Bu hizmetle ilgili detaylı bilgi için en kısa sürede sizinle iletişime geçeceğiz.\\n\\n` +\n                         `_Servis dosyası henüz hazırlanıyor, yakında aktif olacaktır._`);\n      \n      const sessionManager = require('../sessionManager');\n      sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n      const mainMenu = require('./mainMenu');\n      await mainMenu.showMainMenu(message, services);\n    }\n  } else {\n    const validNumbers = categoryData.category_options.map(opt => opt.option_number);\n    await message.reply(`❌ Geçersiz numara. Lütfen ${Math.min(...validNumbers)}-${Math.max(...validNumbers)} arası bir numara girin.`);\n  }\n}\n\n// Kategori seçeneklerini göster\nasync function showCategoryOptions(message, category, services) {\n  const categoryData = category.data;\n  \n  if (!categoryData) {\n    await message.reply('❌ Kategori verileri bulunamadı. Ana menüye dönülüyor.');\n    const sessionManager = require('../sessionManager');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    const mainMenu = require('./mainMenu');\n    await mainMenu.showMainMenu(message, services);\n    return;\n  }\n  \n  let optionsText = `🎯 *${categoryData.bot_greeting || category.name.replace(/_/g, ' ').toUpperCase()}*\\n\\n`;\n  \n  if (categoryData.category_options && categoryData.category_options.length > 0) {\n    categoryData.category_options.forEach(option => {\n      optionsText += `${option.option_number}. ${option.category_name}\\n`;\n    });\n    \n    optionsText += `\\n${categoryData.completion_message || 'Lütfen bir numara seçin:'}`;\n    \n    await message.reply(optionsText);\n  } else {\n    await message.reply('❌ Bu kategoride henüz hizmet bulunmuyor. Ana menüye dönülüyor.');\n    const sessionManager = require('../sessionManager');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    const mainMenu = require('./mainMenu');\n    await mainMenu.showMainMenu(message, services);\n  }\n}\n\n// Kategori seçeneklerini doğrula\nfunction validateCategoryOptions(categoryData) {\n  if (!categoryData || !categoryData.category_options) {\n    return { isValid: false, error: 'Kategori seçenekleri bulunamadı' };\n  }\n  \n  const validOptions = categoryData.category_options.filter(opt => \n    opt.option_number && opt.category_name && opt.category_name.trim().length > 0\n  );\n  \n  if (validOptions.length === 0) {\n    return { isValid: false, error: 'Geçerli kategori seçenekleri bulunamadı' };\n  }\n  \n  // Sayıların sıralı olup olmadığını kontrol et\n  const numbers = validOptions.map(opt => opt.option_number).sort((a, b) => a - b);\n  const isSequential = numbers.every((num, index) => num === index + 1);\n  \n  if (!isSequential) {\n    console.log('⚠️  Kategori numaraları sıralı değil:', numbers);\n  }\n  \n  return { \n    isValid: true, \n    options: validOptions,\n    count: validOptions.length,\n    isSequential: isSequential\n  };\n}\n\n// Kategori bilgilerini getir\nfunction getCategoryInfo(categoryName, services) {\n  const categoryData = services[categoryName];\n  if (!categoryData) {\n    return null;\n  }\n  \n  const validation = validateCategoryOptions(categoryData);\n  \n  return {\n    name: categoryName,\n    displayName: categoryData.bot_greeting || categoryName.replace(/_/g, ' '),\n    options: validation.isValid ? validation.options : [],\n    optionCount: validation.isValid ? validation.count : 0,\n    isValid: validation.isValid,\n    error: validation.error,\n    completionMessage: categoryData.completion_message || 'Lütfen bir numara seçin:'\n  };\n}\n\n// Servis arama (debug için)\nfunction searchServiceInAllCategories(serviceKey, services) {\n  console.log(`🔍 Servis aranıyor: ${serviceKey}`);\n  \n  const foundIn = [];\n  \n  for (const [categoryName, categoryServices] of Object.entries(services)) {\n    if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n      foundIn.push({\n        category: categoryName,\n        service: categoryServices[serviceKey]\n      });\n    }\n  }\n  \n  if (foundIn.length > 0) {\n    console.log(`✅ Servis bulundu:`, foundIn.map(f => f.category));\n    return foundIn;\n  } else {\n    console.log(`❌ Servis hiçbir kategoride bulunamadı: ${serviceKey}`);\n    \n    // Benzer servisleri öner\n    const similarServices = findSimilarServices(serviceKey, services);\n    if (similarServices.length > 0) {\n      console.log(`💡 Benzer servisler:`, similarServices);\n    }\n    \n    return [];\n  }\n}\n\n// Benzer servisleri bul\nfunction findSimilarServices(serviceKey, services) {\n  const similar = [];\n  const searchTerm = serviceKey.toLowerCase();\n  \n  for (const [categoryName, categoryServices] of Object.entries(services)) {\n    if (typeof categoryServices === 'object') {\n      for (const [key, serviceData] of Object.entries(categoryServices)) {\n        if (key.toLowerCase().includes(searchTerm) || \n            (serviceData.service_name && serviceData.service_name.toLowerCase().includes(searchTerm))) {\n          similar.push({\n            category: categoryName,\n            key: key,\n            name: serviceData.service_name || key\n          });\n        }\n      }\n    }\n  }\n  \n  return similar;\n}\n\nmodule.exports = {\n  handleSubMenuSelection,\n  showCategoryOptions,\n  validateCategoryOptions,\n  getCategoryInfo,\n  searchServiceInAllCategories,\n  findSimilarServices\n};\n\n\n============================================================\n// DOSYA: modules/menuHandler/navigation.js\n============================================================\n\n// modules/menuHandler/navigation.js\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\n\n// Ana menüye dön\nasync function returnToMainMenu(message, services, contactName = '') {\n  console.log(`🏠 Ana menüye dönülüyor`);\n  \n  sessionManager.updateUserSession(message.from, { \n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {}\n  });\n  \n  const mainMenu = require('./mainMenu');\n  \n  if (contactName) {\n    await message.reply(`👋 ${contactName}, ana menüye döndünüz!`);\n  }\n  \n  await mainMenu.showMainMenu(message, services);\n}\n\n// Önceki menüye dön\nasync function goBackToPreviousMenu(message, services, currentState) {\n  console.log(`↩️ Önceki menüye dönülüyor: ${currentState}`);\n  \n  if (currentState.startsWith('submenu_')) {\n    const categoryName = currentState.replace('submenu_', '');\n    const categoryManager = require('./categoryManager');\n    const subMenu = require('./subMenu');\n    \n    const categoryData = categoryManager.loadCategoryData(categoryName, services);\n    if (categoryData) {\n      await subMenu.showCategoryOptions(message, { data: categoryData, name: categoryName }, services);\n      return;\n    }\n  }\n  \n  // Önceki menü bulunamazsa ana menüye dön\n  await returnToMainMenu(message, services);\n}\n\n// Menü geçmişini yönet\nfunction updateMenuHistory(userId, newState) {\n  const session = sessionManager.getUserSession(userId);\n  const history = session.menuHistory || [];\n  \n  // Son state'i history'e ekle (tekrarları önle)\n  if (history.length === 0 || history[history.length - 1] !== session.currentState) {\n    history.push(session.currentState);\n  }\n  \n  // History'yi sınırla (max 10)\n  if (history.length > 10) {\n    history.shift();\n  }\n  \n  sessionManager.updateUserSession(userId, { \n    menuHistory: history,\n    currentState: newState\n  });\n  \n  return history;\n}\n\n// Menü durumunu kontrol et\nfunction getMenuStateInfo(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (!session) return null;\n  \n  return {\n    currentState: session.currentState,\n    menuHistory: session.menuHistory || [],\n    inService: session.currentService !== null,\n    waitingForResponse: session.waitingForResponse || false\n  };\n}\n\n// Menü zaman aşımını kontrol et\nfunction checkMenuTimeout(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (!session || !session.lastActivity) return false;\n  \n  const timeoutDuration = 10 * 60 * 1000; // 10 dakika\n  const timeSinceLastActivity = Date.now() - session.lastActivity;\n  \n  return timeSinceLastActivity > timeoutDuration;\n}\n\nmodule.exports = {\n  returnToMainMenu,\n  goBackToPreviousMenu,\n  updateMenuHistory,\n  getMenuStateInfo,\n  checkMenuTimeout\n};\n\n\n============================================================\n// DOSYA: modules/menuHandler/mainmenu.js\n============================================================\n\n// modules/menuHandler/mainMenu.js - GÜNCELLENDİ\nconst logger = require('../logger');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Ana menü göster - GÜNCELLENDİ\nasync function showMainMenu(message, services) {\n  let menuText = `📋 *ANA HİZMET KATEGORİLERİ*\\n\\n`;\n  \n  const mainCategories = [\n    '🛡️  Sigorta Hizmetleri',\n    '💻 Yazılım Talepleri', \n    '🔒 Siber Güvenlik',\n    '🚚 Lojistik Hizmetleri',\n    '🌍 İthalat İhracat',\n    '📊 Profesyonel Denetleme',\n    '🏠 İnşaat Emlak',\n    '🤝 CRM Hizmetleri',\n    '👕 Tekstil Ürünleri',\n    '💄 Kozmetik Ürünleri',\n    '✈️  Tur Organizasyon',\n    '☀️  Güneş Enerjisi',\n    '🏢 Kurumsal Hizmetler'\n  ];\n  \n  mainCategories.forEach((category, index) => {\n    menuText += `${index + 1}. ${category}\\n`;\n  });\n  \n  menuText += `\\nİlgilendiğiniz hizmetin *numarasını* yazın veya *doğrudan hizmet adını* belirtin.`;\n  \n  try {\n    await sendMessageWithoutQuote(message.from, menuText);\n  } catch (error) {\n    console.error('Menü gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(menuText);\n  }\n  \n  // Menü gösterildikten sonra timer başlat\n  const sessionManager = require('../sessionManager');\n  sessionManager.startMenuTimer(message.from, message, services);\n}\n\n// Ana menü kategorilerini getir\nfunction getMainCategories() {\n  return [\n    'sigorta_ana_kategori',\n    'yazilim_talepleri_ana_kategori', \n    'siber_guvenlik_ana',\n    'lojistik_hizmetleri_ana',\n    'ithalat_ihracat_ana',\n    'profesyonel_denetleme_ana',\n    'insaat_emlak_ana',\n    'crm_hizmetleri_ana',\n    'tekstil_urunleri_ana',\n    'kozmetik_urunleri_ana',\n    'tur_organizasyon_ana',\n    'gunes_enerjisi_sistemleri_ana',\n    'kurumsal_hizmetler_ana'\n  ];\n}\n\nmodule.exports = {\n  showMainMenu,\n  getMainCategories\n};\n\n\n============================================================\n// DOSYA: modules/menuhandler.js\n============================================================\n\n// modules/menuHandler.js - ANA YÖNLENDİRİCİ DOSYA\nconst mainMenu = require('./menuHandler/mainMenu');\nconst subMenu = require('./menuHandler/subMenu');\nconst numberHandler = require('./menuHandler/numberHandler');\nconst serviceConverter = require('./menuHandler/serviceConverter');\nconst categoryManager = require('./menuHandler/categoryManager');\nconst navigation = require('./menuHandler/navigation');\n\n// Ana menü göster\nasync function showMainMenu(message, services) {\n  await mainMenu.showMainMenu(message, services);\n}\n\n// Sayı seçimini işle\nasync function handleNumberSelection(message, number, services) {\n  await numberHandler.handleNumberSelection(message, number, services);\n}\n\n// Alt menü seçimini işle\nasync function handleSubMenuSelection(message, number, categoryName, services) {\n  await subMenu.handleSubMenuSelection(message, number, categoryName, services);\n}\n\n// Kategori seçeneklerini göster\nasync function showCategoryOptions(message, category, services) {\n  await subMenu.showCategoryOptions(message, category, services);\n}\n\n// Servis anahtarını dönüştür\nfunction convertToServiceKey(categoryName) {\n  return serviceConverter.convertToServiceKey(categoryName);\n}\n\n// Ana menüye dön\nasync function returnToMainMenu(message, services, contactName = '') {\n  await navigation.returnToMainMenu(message, services, contactName);\n}\n\nmodule.exports = {\n  showMainMenu,\n  handleNumberSelection,\n  handleSubMenuSelection,\n  showCategoryOptions,\n  convertToServiceKey,\n  returnToMainMenu,\n  \n  // Alt modüllere erişim için\n  mainMenu,\n  subMenu,\n  numberHandler,\n  serviceConverter,\n  categoryManager,\n  navigation\n};\n\n\n============================================================\n// DOSYA: modules/messagehandler/validation.js\n============================================================\n\nconst logger = require('../logger');\n\nfunction validateMessage(message) {\n  // Temel validasyonlar\n  if (message.fromMe) {\n    return { isValid: false, reason: 'fromMe' };\n  }\n  \n  if (message.from === 'status@broadcast') {\n    return { isValid: false, reason: 'status_broadcast' };\n  }\n  \n  if (message.isGroupMsg) {\n    return { isValid: false, reason: 'group_message' };\n  }\n  \n  const messageBody = message.body?.toLowerCase().trim();\n  if (!messageBody || messageBody.length === 0) {\n    return { isValid: false, reason: 'empty_message' };\n  }\n  \n  if (message.hasMedia) {\n    return { isValid: false, reason: 'has_media' };\n  }\n  \n  return { isValid: true, messageBody };\n}\n\nfunction validateInput(message, expectedType) {\n  const cleanMessage = message.trim();\n  \n  switch (expectedType) {\n    case 'number':\n      const number = parseInt(cleanMessage);\n      if (isNaN(number)) {\n        return {\n          isValid: false,\n          errorMessage: 'Geçersiz sayı formatı. Lütfen sadece rakam girin.'\n        };\n      }\n      return { isValid: true, value: number };\n      \n    case 'text':\n      if (cleanMessage.length < 2) {\n        return {\n          isValid: false,\n          errorMessage: 'Cevap çok kısa. Lütfen daha detaylı bilgi verin.'\n        };\n      }\n      return { isValid: true, value: cleanMessage };\n      \n    default:\n      return { isValid: true, value: cleanMessage };\n  }\n}\n\nmodule.exports = {\n  validateMessage,\n  validateInput\n};\n\n\n============================================================\n// DOSYA: modules/messagehandler/personalization.js\n============================================================\n\nconst serviceLoader = require('../serviceLoader');\n\nfunction createPersonalizedGreeting(contactName, greetingType) {\n  const greetings = serviceLoader.loadJSON('./genel_diyalog/selamlama_vedalasma.json');\n  const baseGreeting = greetings?.selamlama?.[greetingType] || \n                      'Merhaba! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?';\n  \n  if (contactName && contactName.trim().length > 0) {\n    const personalizedGreetings = {\n      gunaydin: `🌞 Günaydın ${contactName}! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?`,\n      merhaba: `👋 Merhaba ${contactName}! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?`,\n      iyi_aksamlar: `🌙 İyi akşamlar ${contactName}! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?`\n    };\n    \n    return personalizedGreetings[greetingType] || \n           `👋 Merhaba ${contactName}! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?`;\n  }\n  \n  return baseGreeting;\n}\n\nfunction createPersonalizedUnknownMessage(contactName) {\n  const baseText = `🤔 Anlayamadım. Lütfen aşağıdaki seçeneklerden birini belirtin:`;\n  \n  if (contactName) {\n    return `🤔 ${contactName}, anlayamadım. Lütfen aşağıdaki seçeneklerden birini belirtin:`;\n  }\n  \n  return baseText;\n}\n\nmodule.exports = {\n  createPersonalizedGreeting,\n  createPersonalizedUnknownMessage\n};\n\n\n============================================================\n// DOSYA: modules/messagehandler/servicematcher.js\n============================================================\n\n// modules/messageHandler/serviceMatcher.js\nconst logger = require('../logger');\n\nfunction findMatchingService(message, services) {\n  const cleanMessage = message.toLowerCase().replace(/[.,!?]/g, '').trim();\n  \n  console.log(`🔍 Servis aranıyor: \"${cleanMessage}\"`);\n\n  // ÖNCE: FİYAT SORGULARI\n  const priceQueries = {\n    'yeşil sigorta fiyat': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta fiyat': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta fiyatı': 'yesil_sigorta_fiyatlari', \n    'yesil sigorta fiyati': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta ne kadar': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta ne kadar': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta ücreti': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta ucreti': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta fiyatları': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta fiyatlari': 'yesil_sigorta_fiyatlari',\n    'trafik sigortası fiyat': 'trafik_sigortasi_fiyat_akisi',\n    'trafik sigortasi fiyat': 'trafik_sigortasi_fiyat_akisi'\n  };\n\n  for (const [priceQuery, serviceKey] of Object.entries(priceQueries)) {\n    if (cleanMessage.includes(priceQuery)) {\n      console.log(`💰 Fiyat sorgusu eşleşti: \"${priceQuery}\" -> ${serviceKey}`);\n      \n      if (services['fiyat_listeleri'] && services['fiyat_listeleri'][serviceKey]) {\n        return { \n          type: 'service', \n          data: services['fiyat_listeleri'][serviceKey], \n          category: 'fiyat_listeleri', \n          name: serviceKey \n        };\n      }\n    }\n  }\n\n  // TAM EŞLEŞMELER - TÜM SERVİSLER\n  const exactMatches = {\n    // === SİGORTA HİZMETLERİ ===\n    'yeşil sigorta': 'yesil_sigorta',\n    'yesil sigorta': 'yesil_sigorta',\n    'trafik sigortası': 'trafik_sigortasi',\n    'trafik sigortasi': 'trafik_sigortasi',\n    'kasko sigortası': 'kasko',\n    'kasko sigortasi': 'kasko',\n    'koltuk sigortası': 'koltuk_sigortasi',\n    'koltuk sigortasi': 'koltuk_sigortasi',\n    'dask sigortası': 'dask',\n    'dask sigortasi': 'dask',\n    'konut sigortası': 'konut_sigortasi',\n    'konut sigortasi': 'konut_sigortasi',\n    'işyeri sigortası': 'isyeri_sigortasi',\n    'isyeri sigortasi': 'isyeri_sigortasi',\n    'seyahat sağlık sigortası': 'seyahat_saglik_sigortasi',\n    'seyahat saglik sigortasi': 'seyahat_saglik_sigortasi',\n    'tamamlayıcı sağlık sigortası': 'tamamlayici_saglik_sigortasi',\n    'tamamlayici saglik sigortasi': 'tamamlayici_saglik_sigortasi',\n    'özel sağlık sigortası': 'ozel_saglik_sigortasi',\n    'ozel saglik sigortasi': 'ozel_saglik_sigortasi',\n\n    // === YAZILIM TALEPLERİ ===\n    'özel yazılım geliştirme': 'ozel_yazilim_gelistirme',\n    'ozel yazilim geliştirme': 'ozel_yazilim_gelistirme',\n    'yazılım geliştirme': 'ozel_yazilim_gelistirme',\n    'yazilim geliştirme': 'ozel_yazilim_gelistirme',\n    'mobil uygulama geliştirme': 'mobil_uygulama_gelistirme',\n    'mobil uygulama': 'mobil_uygulama_gelistirme',\n    'uygulama geliştirme': 'mobil_uygulama_gelistirme',\n\n    // === SİBER GÜVENLİK ===\n    'genel ağ güvenliği': 'genel_ag_guvenligi',\n    'genel ag guvenligi': 'genel_ag_guvenligi',\n    'kullanıcı güvenliği': 'kullanici_guvenligi',\n    'kullanici guvenligi': 'kullanici_guvenligi',\n    'veri güvenliği': 'veri_guvenligi',\n    'veri guvenligi': 'veri_guvenligi',\n    'uygulama güvenliği': 'uygulama_guvenligi',\n    'uygulama guvenligi': 'uygulama_guvenligi',\n    'kimlik ve erişim yönetimi': 'kimlik_erisim_yonetimi',\n    'kimlik erisim yonetimi': 'kimlik_erisim_yonetimi',\n    'güvenlik yönetimi': 'guvenlik_yonetimi',\n    'guvenlik yonetimi': 'guvenlik_yonetimi',\n    'penetrasyon test talebi': 'penetrasyon_test_talebi',\n    'penetrasyon test': 'penetrasyon_test_talebi',\n    'siber güvenlik eğitimi': 'egitim_talepleri',\n    'siber guvenlik egitimi': 'egitim_talepleri',\n\n    // === LOJİSTİK HİZMETLERİ ===\n    'yurtiçi yük nakli': 'yurtici_yuk_nakli',\n    'yurtici yuk nakli': 'yurtici_yuk_nakli',\n    'yurtiçi nakliye': 'yurtici_yuk_nakli',\n    'yurtdışı yük nakli': 'yurtdisi_yuk_nakli',\n    'yurtdisi yuk nakli': 'yurtdisi_yuk_nakli',\n    'yurtdışı nakliye': 'yurtdisi_yuk_nakli',\n    'depo antrepo hizmeti': 'depo_antrepo_hizmeti',\n    'depo hizmeti': 'depo_antrepo_hizmeti',\n    'antrepo hizmeti': 'depo_antrepo_hizmeti',\n\n    // === İTHALAT İHRACAT ===\n    'yurtdışı müşteri araştırma': 'yurtdisi_musteri_arastirma',\n    'yurtdisi musteri arastirma': 'yurtdisi_musteri_arastirma',\n    'yurtiçi tedarikçi araştırma': 'yurtici_tedarikci_arastirma',\n    'yurtici tedarikci arastirma': 'yurtici_tedarikci_arastirma',\n    'gümrük operasyon hizmetleri': 'gumruk_operasyon_hizmetleri',\n    'gumruk operasyon hizmetleri': 'gumruk_operasyon_hizmetleri',\n    'gümrük hizmetleri': 'gumruk_operasyon_hizmetleri',\n    'yurtiçi ürün araştırma': 'yurtici_urun_arastirma',\n    'yurtici urun arastirma': 'yurtici_urun_arastirma',\n    'yurtdışı pazar araştırma': 'yurtdisi_pazar_arastirma',\n    'yurtdisi pazar arastirma': 'yurtdisi_pazar_arastirma',\n\n    // === PROFESYONEL DENETLEME ===\n    'iç denetim hizmeti': 'ic_denetim_hizmeti',\n    'ic denetim hizmeti': 'ic_denetim_hizmeti',\n    'tedarikçi müşteri mali denetim': 'tedarikci_musteri_mali_denetim',\n    'tedarikci musteri mali denetim': 'tedarikci_musteri_mali_denetim',\n    'tedarikçi kalite denetim': 'tedarikci_kalite_denetim',\n    'tedarikci kalite denetim': 'tedarikci_kalite_denetim',\n    'tedarikçi üretim denetleme': 'tedarikci_uretim_denetleme',\n    'tedarikci uretim denetleme': 'tedarikci_uretim_denetleme',\n    'firma temsil hizmeti': 'firma_temsil_hizmeti',\n\n    // === İNŞAAT EMLAK ===\n    'satılık gayrimenkul': 'satilik_gayrimenkul',\n    'satilik gayrimenkul': 'satilik_gayrimenkul',\n    'kiralık gayrimenkul': 'kiralik_gayrimenkul',\n    'kiralik gayrimenkul': 'kiralik_gayrimenkul',\n    'yurtdışı gayrimenkul yatırım': 'yurtdisi_gayrimenkul_yatirim',\n    'yurtdisi gayrimenkul yatirim': 'yurtdisi_gayrimenkul_yatirim',\n    'inşaat taahhüt hizmeti': 'insaat_taahhut_hizmeti',\n    'insaat taahhut hizmeti': 'insaat_taahhut_hizmeti',\n\n    // === CRM HİZMETLERİ ===\n    'müşteri seçimi': 'musteri_secimi',\n    'musteri secimi': 'musteri_secimi',\n    'müşteri edinme': 'musteri_edinme',\n    'musteri edinme': 'musteri_edinme',\n    'müşteri koruma': 'musteri_koruma',\n    'musteri koruma': 'musteri_koruma',\n    'müşteri derinleştirme': 'musteri_derinlestirme',\n    'musteri derinlestirme': 'musteri_derinlestirme',\n\n    // === TEKSTİL ÜRÜNLERİ ===\n    'erkek giyim': 'erkek_giyim',\n    'kadın giyim': 'kadin_giyim',\n    'kadin giyim': 'kadin_giyim',\n    'ev tekstil ürünleri': 'ev_tekstil_urunleri',\n    'ev tekstil urunleri': 'ev_tekstil_urunleri',\n\n    // === KOZMETİK ÜRÜNLERİ ===\n    'parfüm': 'parfum',\n    'parfum': 'parfum',\n    'deodorant': 'deodorant',\n    'kişisel bakım': 'kisisel_bakim',\n    'kisisel bakim': 'kisisel_bakim',\n    'medikal kozmetik': 'medikal_kozmetik',\n\n    // === TUR ORGANİZASYON ===\n    'yurtiçi özel gezi talebi': 'yurtici_ozel_gezi_talebi',\n    'yurtici ozel gezi talebi': 'yurtici_ozel_gezi_talebi',\n    'yurtdışı özel gezi talebi': 'yurtdisi_ozel_gezi_talebi',\n    'yurtdisi ozel gezi talebi': 'yurtdisi_ozel_gezi_talebi',\n    'personel servis talebi': 'personel_servis_talebi',\n\n    // === GÜNEŞ ENERJİSİ SİSTEMLERİ ===\n    'güneş verimlilik hesabı': 'gunes_verimlilik_hesabi',\n    'gunes verimlilik hesabi': 'gunes_verimlilik_hesabi',\n    'ges üretim hesaplama': 'ges_uretim_hesaplama',\n    'ges uretim hesaplama': 'ges_uretim_hesaplama',\n    'ges kurulum hesaplama': 'ges_kurulum_hesaplama',\n\n    // === KURUMSAL HİZMETLER ===\n    'insan kaynakları danışmanlığı': 'insan_kaynaklari_danismanligi',\n    'stratejik planlama danışmanlığı': 'stratejik_planlama_danismanligi',\n    'finansal danışmanlık': 'finansal_danismanlik',\n    'operasyonel iyileştirme': 'operasyonel_iyilestirme',\n    'kurumsal iletişim danışmanlığı': 'kurumsal_iletisim_danismanligi',\n    'yasal danışmanlık': 'yasal_danismanlik',\n    'teknoloji danışmanlığı': 'teknoloji_danismanligi',\n    'kurumsal eğitim hizmetleri': 'kurumsal_egitim_hizmetleri'\n  };\n\n  for (const [exactPhrase, serviceKey] of Object.entries(exactMatches)) {\n    if (cleanMessage.includes(exactPhrase.toLowerCase())) {\n      console.log(`✅ Tam ifade eşleşti: \"${exactPhrase}\" -> ${serviceKey}`);\n      \n      // Önce servis olarak ara\n      for (const [categoryName, categoryServices] of Object.entries(services)) {\n        if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n          return { \n            type: 'service', \n            data: categoryServices[serviceKey], \n            category: categoryName, \n            name: serviceKey \n          };\n        }\n      }\n      \n      // Servis bulunamazsa kategori olarak ara\n      if (services[serviceKey]) {\n        return { type: 'category', data: services[serviceKey], name: serviceKey };\n      }\n    }\n  }\n\n  // ANAHTAR KELİMELER (kategori eşleştirme) - DÜZELTİLDİ\n  const keywordMatches = {\n    'sigorta': 'sigorta_ana_kategori',\n    'yazılım': 'yazilim_talepleri_ana_kategori',\n    'yazilim': 'yazilim_talepleri_ana_kategori',\n    'siber': 'siber_guvenlik_ana',\n    'güvenlik': 'siber_guvenlik_ana',\n    'lojistik': 'lojistik_hizmetleri_ana',\n    'nakliye': 'lojistik_hizmetleri_ana',\n    'ithalat': 'ithalat_ihracat_ana',\n    'ihracat': 'ithalat_ihracat_ana',\n    'denetim': 'profesyonel_denetleme_ana',\n    'denetleme': 'profesyonel_denetleme_ana',\n    'emlak': 'insaat_emlak_ana',\n    'inşaat': 'insaat_emlak_ana',\n    'crm': 'crm_hizmetleri_ana',\n    'tekstil': 'tekstil_urunleri_ana',\n    'kozmetik': 'kozmetik_urunleri_ana',\n    'tur': 'tur_organizasyon_ana',\n    'turizm': 'tur_organizasyon_ana',\n    'güneş': 'gunes_enerjisi_sistemleri_ana',\n    'enerji': 'gunes_enerjisi_sistemleri_ana',\n    'kurumsal': 'kurumsal_hizmetler_ana',\n    'danışmanlık': 'kurumsal_hizmetler_ana'\n  };\n\n  for (const [keyword, serviceKey] of Object.entries(keywordMatches)) {\n    if (cleanMessage.includes(keyword)) {\n      console.log(`✅ Anahtar kelime eşleşti: \"${keyword}\" -> ${serviceKey}`);\n      \n      const categoryData = services[serviceKey];\n      if (categoryData) {\n        console.log(`✅ Kategori bulundu: ${serviceKey}`);\n        return { type: 'category', data: categoryData, name: serviceKey };\n      } else {\n        console.log(`❌ Kategori bulunamadı: ${serviceKey}`);\n        // Alternatif kategori isimlerini dene\n        const alternativeKeys = Object.keys(services).filter(key => \n          key.includes(keyword.replace(/[^a-z0-9]/gi, ''))\n        );\n        if (alternativeKeys.length > 0) {\n          console.log(`🔄 Alternatif kategoriler:`, alternativeKeys);\n          const alternativeKey = alternativeKeys[0];\n          return { type: 'category', data: services[alternativeKey], name: alternativeKey };\n        }\n      }\n    }\n  }\n\n  console.log('❌ Eşleşme bulunamadı');\n  return null;\n}\n\nmodule.exports = {\n  findMatchingService\n};\n\n\n============================================================\n// DOSYA: modules/messagehandler/errorhandler.js\n============================================================\n\n// modules/messageHandler/errorHandler.js - GÜNCELLENDİ\nconst logger = require('../logger');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendErrorMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Hata mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\nasync function handleError(message, error) {\n  logger.error(`Mesaj işleme hatası: ${error.message}`);\n  console.error('❌ Mesaj işlenirken hata:', error);\n  \n  try {\n    await sendErrorMessage(message, '❌ Üzgünüm, bir hata oluştu. Lütfen tekrar deneyin.');\n    \n    // Hata detayını logla\n    const errorDetails = {\n      userId: message.from,\n      message: message.body,\n      error: error.message,\n      stack: error.stack,\n      timestamp: new Date().toISOString()\n    };\n    \n    logger.error(`Hata detayları: ${JSON.stringify(errorDetails)}`);\n    \n  } catch (replyError) {\n    logger.error(`Hata mesajı gönderilemedi: ${replyError.message}`);\n  }\n}\n\nasync function handleMediaError(message) {\n  try {\n    await sendErrorMessage(message, '📎 Şu anda sadece metin mesajlarını işleyebiliyorum. Lütfen metin olarak yazın.');\n  } catch (error) {\n    logger.error(`Medya hatası mesajı gönderilemedi: ${error.message}`);\n  }\n}\n\nasync function handleUnknownCommand(message, contactName = '') {\n  const personalization = require('./personalization');\n  const unknownText = personalization.createPersonalizedUnknownMessage(contactName);\n  \n  try {\n    await sendErrorMessage(message, `${unknownText}\\n\\n` +\n                       `• \"sigorta\" - Sigorta hizmetleri\\n` +\n                       `• \"yazılım\" - Yazılım geliştirme\\n` +\n                       `• \"lojistik\" - Nakliye hizmetleri\\n` +\n                       `• Veya diğer hizmetlerimiz...\\n\\n` +\n                       `Yardım için \"menü\" yazabilirsiniz.`);\n  } catch (error) {\n    logger.error(`Bilinmeyen komut mesajı gönderilemedi: ${error.message}`);\n  }\n}\n\nmodule.exports = {\n  handleError,\n  handleMediaError,\n  handleUnknownCommand\n};\n\n\n============================================================\n// DOSYA: modules/messagehandler/greetingmanager.js\n============================================================\n\n// modules/messageHandler/greetingManager.js - GÜNCELLENDİ\nconst serviceLoader = require('../serviceLoader');\nconst personalization = require('./personalization');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendGreetingMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Selamlama mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\nfunction getTimeBasedGreeting() {\n  const hour = new Date().getHours();\n  \n  if (hour >= 5 && hour < 11) return 'gunaydin';\n  if (hour >= 11 && hour < 17) return 'merhaba';\n  return 'iyi_aksamlar';\n}\n\nasync function handleGreeting(message, services, contactName = '') {\n  const greetingType = getTimeBasedGreeting();\n  const greetingMsg = personalization.createPersonalizedGreeting(contactName, greetingType);\n  \n  await sendGreetingMessage(message, greetingMsg);\n  \n  // Hemen ardından yardım sorusunu sor\n  setTimeout(async () => {\n    const helpQuestion = contactName ? \n      `🤔 ${contactName}, size yardımcı olabilmem için lütfen bana hangi konuda yardım istediğinizi yazarmısınız?` :\n      `🤔 Size yardımcı olabilmem için lütfen bana hangi konuda yardım istediğinizi yazarmısınız?`;\n    \n    await sendGreetingMessage(message, helpQuestion);\n    \n    const sessionManager = require('../sessionManager');\n    sessionManager.startHelpTimer(message.from, message, services);\n  }, 1000);\n  \n  return true;\n}\n\n// Teşekkür mesajını işle - GÜNCELLENDİ\nasync function handleThanks(message, contactName = '') {\n  const greetings = serviceLoader.loadJSON('./genel_diyalog/selamlama_vedalasma.json');\n  const thanksResponses = greetings?.tesekkur?.tesekkur_cevaplari || [\n    '🙏 Rica ederim! Size yardımcı olabildiğim için ben teşekkür ederim. 🎯'\n  ];\n  \n  // Rastgele bir teşekkür cevabı seç\n  const randomThanks = thanksResponses[Math.floor(Math.random() * thanksResponses.length)];\n  \n  let thanksMsg = randomThanks;\n  if (contactName) {\n    thanksMsg = `${contactName}, ${randomThanks.toLowerCase()}`;\n  }\n  \n  thanksMsg += `\\n\\nBaşka bir konuda yardıma ihtiyacınız varsa \"menü\" yazabilirsiniz.`;\n  \n  await sendGreetingMessage(message, thanksMsg);\n  return true;\n}\n\n// Vedalaşma mesajını işle - GÜNCELLENDİ\nasync function handleGoodbye(message, contactName = '') {\n  const greetings = serviceLoader.loadJSON('./genel_diyalog/selamlama_vedalasma.json');\n  const goodbyeResponses = greetings?.vedalasma?.hoscakal || [\n    '👋 Hoşça kalın! PlanB Global Network Ltd Şti adına iyi günler dilerim.'\n  ];\n  \n  // Rastgele bir vedalaşma mesajı seç\n  const randomGoodbye = goodbyeResponses[Math.floor(Math.random() * goodbyeResponses.length)];\n  \n  let goodbyeMsg = randomGoodbye;\n  if (contactName) {\n    goodbyeMsg = `${contactName}, ${randomGoodbye}`;\n  }\n  \n  await sendGreetingMessage(message, goodbyeMsg);\n  \n  // Oturumu temizle\n  const sessionManager = require('../sessionManager');\n  sessionManager.updateUserSession(message.from, {\n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {}\n  });\n  \n  return true;\n}\n\nmodule.exports = {\n  getTimeBasedGreeting,\n  handleGreeting,\n  handleThanks,\n  handleGoodbye\n};\n\n\n============================================================\n// DOSYA: modules/messagehandler/contactmanager.js\n============================================================\n\n// modules/messageHandler/contactManager.js\nconst logger = require('../logger');\n\nasync function getContactInfo(message) {\n  try {\n    const contact = await message.getContact();\n    const contactName = contact.name || contact.pushname || '';\n    const phoneNumber = contact.id.user || '';\n    \n    console.log(`👤 Müşteri bilgisi: ${contactName} (${phoneNumber})`);\n    \n    return {\n      name: contactName,\n      phone: phoneNumber,\n      isBusiness: contact.isBusiness || false,\n      isEnterprise: contact.isEnterprise || false\n    };\n  } catch (contactError) {\n    logger.error(`Müşteri bilgisi alınamadı: ${contactError.message}`);\n    console.log('⚠️  Müşteri bilgisi alınamadı:', contactError.message);\n    \n    return {\n      name: '',\n      phone: '',\n      isBusiness: false,\n      isEnterprise: false\n    };\n  }\n}\n\n// logContactInteraction fonksiyonunu ekliyoruz\nasync function logContactInteraction(message, action) {\n  const contactInfo = await getContactInfo(message);\n  \n  logger.info(`📞 ${action} - Müşteri: ${contactInfo.name} (${contactInfo.phone}) - Mesaj: \"${message.body}\"`);\n  \n  return contactInfo;\n}\n\nmodule.exports = {\n  getContactInfo,\n  logContactInteraction  // Bu fonksiyonu ekledik\n};\n\n\n============================================================\n// DOSYA: modules/messagehandler/sessionrouter.js\n============================================================\n\n// modules/messageHandler/sessionRouter.js - GÜNCELLENDİ\nconst sessionManager = require('../sessionManager');\nconst serviceLoader = require('../serviceLoader');\nconst menuHandler = require('../menuHandler');\nconst serviceFlow = require('../serviceFlow');\nconst greetingManager = require('./greetingManager');\nconst serviceMatcher = require('./serviceMatcher');\nconst messageParser = require('./messageParser');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendResponse(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Alıntısız mesaj gönderme hatası, fallback kullanılıyor:', error.message);\n    // Fallback: normal reply\n    await message.reply(text);\n  }\n}\n\nasync function route(message, parsedMessage, contactName = '') {\n  const { greetingPart, servicePart, cleanMessage, originalMessage } = parsedMessage;\n  const services = serviceLoader.loadAllServices();\n  const session = sessionManager.getUserSession(message.from);\n  \n  console.log(`🔍 Route: Durum=${session?.currentState}, Mesaj=${cleanMessage}`);\n  \n  // TEŞEKKÜR MESAJLARI - EN ÖNCELİKLİ\n  if (messageParser.isThanksMessage(cleanMessage)) {\n    console.log(`🙏 Teşekkür mesajı algılandı`);\n    await greetingManager.handleThanks(message, contactName);\n    return;\n  }\n  \n  // VEDALAŞMA MESAJLARI - ÖNCELİKLİ\n  if (messageParser.isGoodbyeMessage(cleanMessage)) {\n    console.log(`👋 Vedalaşma mesajı algılandı`);\n    await greetingManager.handleGoodbye(message, contactName);\n    return;\n  }\n  \n  // ÇIKIŞ KOMUTLARI - ÖNCELİKLİ\n  if (isExitCommand(cleanMessage)) {\n    console.log(`🚪 Çıkış komutu algılandı`);\n    await handleExitCommand(message, services, contactName);\n    return;\n  }\n  \n  // DİĞER HİZMETLER İSTEĞİ - ÖNCELİKLİ\n  if (messageParser.isOtherServicesRequest(cleanMessage)) {\n    console.log(`🔄 Diğer hizmetler isteği algılandı`);\n    await handleOtherServicesRequest(message, services, contactName);\n    return;\n  }\n  \n  // ÖNCE: Satış cevabı durumunu kontrol et\n  if (session && session.currentState === 'waiting_for_sale_response') {\n    const saleFlow = require('../saleFlow');\n    await saleFlow.handleSaleResponse(message, cleanMessage, services);\n    return;\n  }\n  \n  // SONRA: Soru-cevap akışı\n  if (session && session.currentState === 'collecting_answer') {\n    const success = await serviceFlow.handleAnswer(message, cleanMessage, session);\n    return;\n  }\n  \n  // MENÜ İSTEĞİ - ÖNCELİKLİ\n  if (messageParser.isMenuRequest(cleanMessage)) {\n    console.log(`📋 Menü isteği algılandı`);\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    await menuHandler.showMainMenu(message, services);\n    return;\n  }\n  \n  // SAYI SEÇİMİ - ÖNCELİKLİ\n  if (messageParser.isNumberInput(cleanMessage)) {\n    const number = parseInt(cleanMessage);\n    console.log(`🔢 Sayı seçimi algılandı: ${number}, Durum: ${session?.currentState}`);\n    await menuHandler.handleNumberSelection(message, number, services);\n    return;\n  }\n  \n  // YARDIM İSTEĞİ\n  if (messageParser.isHelpRequest(cleanMessage)) {\n    console.log(`❓ Yardım isteği algılandı`);\n    await handleHelpRequest(message, services, contactName);\n    return;\n  }\n  \n  // İPTAL İSTEĞİ\n  if (messageParser.isCancelRequest(cleanMessage)) {\n    console.log(`⏹️ İptal isteği algılandı`);\n    await handleCancelRequest(message, services, contactName);\n    return;\n  }\n  \n  // Eğer selamlama varsa, önce selamla\n  if (greetingPart && messageParser.isGreeting(greetingPart)) {\n    await greetingManager.handleGreeting(message, services, contactName);\n    \n    // Eğer selamlamadan sonra işlem de varsa, 2 saniye bekle ve işlemi başlat\n    if (servicePart && servicePart.length > 0) {\n      setTimeout(async () => {\n        await processServiceRequest(message, servicePart, services);\n      }, 2000);\n      return;\n    }\n    return;\n  }\n  \n  // Sadece işlem varsa, direkt işlemi başlat\n  if (servicePart && servicePart.length > 0) {\n    await processServiceRequest(message, servicePart, services);\n    return;\n  }\n  \n  // Bilinmeyen mesaj\n  await handleUnknownMessage(message, services, contactName);\n}\n\n// Çıkış komutu kontrolü\nfunction isExitCommand(message) {\n  const exitCommands = ['çıkış', 'çıkıs', 'exit', 'quit', 'geri', 'ana menü', 'ana menu', 'menüye dön', 'menuye don', 'back', 'return'];\n  return exitCommands.some(cmd => message.includes(cmd));\n}\n\n// Çıkış komutu işleme - GÜNCELLENDİ\nasync function handleExitCommand(message, services, contactName = '') {\n  sessionManager.updateUserSession(message.from, { \n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {}\n  });\n  \n  const personalization = require('./personalization');\n  const exitText = contactName ? \n    `👋 ${contactName}, ana menüye döndünüz!` :\n    `👋 Ana menüye döndünüz!`;\n  \n  await sendResponse(message, exitText);\n  await menuHandler.showMainMenu(message, services);\n}\n\n// Diğer hizmetler isteği işleme - GÜNCELLENDİ\nasync function handleOtherServicesRequest(message, services, contactName = '') {\n  console.log(`🔍 Diğer hizmetler isteği algılandı`);\n  \n  const personalization = require('./personalization');\n  const otherServicesText = contactName ? \n    `🔄 ${contactName}, diğer hizmetlerimizi gösteriyorum...` :\n    `🔄 Diğer hizmetlerimizi gösteriyorum...`;\n  \n  await sendResponse(message, otherServicesText);\n  \n  // Ana menüyü göster\n  sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n  await menuHandler.showMainMenu(message, services);\n}\n\n// Yardım isteği işleme - GÜNCELLENDİ\nasync function handleHelpRequest(message, services, contactName = '') {\n  const personalization = require('./personalization');\n  const helpText = contactName ? \n    `❓ ${contactName}, size nasıl yardımcı olabilirim?\\n\\n` :\n    `❓ Size nasıl yardımcı olabilirim?\\n\\n`;\n  \n  await sendResponse(message, helpText +\n    `• Bir hizmet adı yazın (örnek: \"sigorta\", \"yazılım\")\\n` +\n    `• \"menü\" yazarak tüm seçenekleri görebilirsiniz\\n` +\n    `• Sayı yazarak seçim yapabilirsiniz\\n` +\n    `• \"çıkış\" yazarak ana menüye dönebilirsiniz\\n` +\n    `• \"teşekkür ederim\" diyerek konuşmayı bitirebilirsiniz`);\n}\n\n// İptal isteği işleme - GÜNCELLENDİ\nasync function handleCancelRequest(message, services, contactName = '') {\n  sessionManager.updateUserSession(message.from, { \n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {}\n  });\n  \n  const personalization = require('./personalization');\n  const cancelText = contactName ? \n    `⏹️ ${contactName}, işleminiz iptal edildi. Ana menüye döndünüz.` :\n    `⏹️ İşleminiz iptal edildi. Ana menüye döndünüz.`;\n  \n  await sendResponse(message, cancelText);\n  await menuHandler.showMainMenu(message, services);\n}\n\nasync function processServiceRequest(message, serviceRequest, services) {\n  console.log(`🔍 Servis isteği işleniyor: \"${serviceRequest}\"`);\n  \n  // Özel durumlar - servis olarak aranmamalı\n  if (serviceRequest.toLowerCase().includes('menü') || serviceRequest.toLowerCase().includes('menu')) {\n    console.log(`📋 Menü isteği - servis olarak aranmayacak`);\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    await menuHandler.showMainMenu(message, services);\n    return;\n  }\n  \n  // Anlamsız mesaj kontrolü\n  if (isMeaninglessMessage(serviceRequest)) {\n    console.log(`❓ Anlamsız mesaj algılandı`);\n    await handleMeaninglessMessage(message, services);\n    return;\n  }\n  \n  const matchedService = serviceMatcher.findMatchingService(serviceRequest, services);\n  \n  if (matchedService) {\n    console.log(`✅ Servis eşleşti: ${matchedService.type} - ${matchedService.name}`);\n    if (matchedService.type === 'category') {\n      await menuHandler.showCategoryOptions(message, matchedService, services);\n      sessionManager.updateUserSession(message.from, { currentState: `submenu_${matchedService.name}` });\n    } else {\n      await serviceFlow.startServiceFlow(message, matchedService);\n    }\n  } else {\n    console.log(`❌ Servis eşleşmedi: \"${serviceRequest}\"`);\n    await handleUnknownMessage(message, services);\n  }\n}\n\n// Anlamsız mesaj kontrolü\nfunction isMeaninglessMessage(message) {\n  const meaninglessPatterns = [\n    /^[\\u{1F600}-\\u{1F64F}]+$/u, // Sadece emoji\n    /^[^\\w\\s]+$/, // Sadece özel karakterler\n    /^.{1,2}$/, // 1-2 karakter\n    /^(.)\\1+$/, // Aynı karakterin tekrarı (aaa, ???)\n  ];\n  \n  return meaninglessPatterns.some(pattern => pattern.test(message));\n}\n\n// Anlamsız mesaj işleme - GÜNCELLENDİ\nasync function handleMeaninglessMessage(message, services) {\n  await sendResponse(message, `🤔 Anlayamadım. Lütfen:\\n\\n` +\n    `• Bir hizmet adı yazın\\n` +\n    `• \"menü\" yazarak seçenekleri görün\\n` +\n    `• \"yardım\" yazarak destek alın`);\n}\n\n// Bilinmeyen mesaj işleme - GÜNCELLENDİ\nasync function handleUnknownMessage(message, services, contactName = '') {\n  const personalization = require('./personalization');\n  const unknownText = personalization.createPersonalizedUnknownMessage(contactName);\n  \n  await sendResponse(message, `${unknownText}\\n\\n` +\n    `• \"sigorta\" - Sigorta hizmetleri\\n` +\n    `• \"yazılım\" - Yazılım geliştirme\\n` +\n    `• \"lojistik\" - Nakliye hizmetleri\\n` +\n    `• \"diğer hizmetler\" - Tüm seçenekleri görün\\n` +\n    `• Veya diğer hizmetlerimiz...\\n\\n` +\n    `Yardım için \"menü\" yazabilirsiniz.\\n` +\n    `Çıkmak için \"çıkış\" yazabilirsiniz.`);\n}\n\nmodule.exports = {\n  route,\n  processServiceRequest,\n  handleUnknownMessage,\n  handleExitCommand,\n  handleOtherServicesRequest,\n  handleHelpRequest,\n  handleCancelRequest\n};\n\n\n============================================================\n// DOSYA: modules/messagehandler.js\n============================================================\n\n// modules/messageHandler.js - GÜNCELLENDİ\nconst logger = require('./logger');\nconst messageParser = require('./messageHandler/messageParser');\nconst sessionRouter = require('./messageHandler/sessionRouter');\nconst contactManager = require('./messageHandler/contactManager');\nconst validation = require('./messageHandler/validation');\nconst errorHandler = require('./messageHandler/errorHandler');\nconst { sendMessageWithoutQuote } = require('./utils/globalClient'); // YENİ EKLENDİ\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendReply(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n    logger.info(`📤 Mesaj gönderildi (alıntısız): ${message.from}`);\n  } catch (error) {\n    logger.error(`Mesaj gönderme hatası: ${error.message}`);\n    // Fallback: normal reply kullan\n    try {\n      await message.reply(text);\n    } catch (fallbackError) {\n      logger.error(`Fallback mesaj gönderme de başarısız: ${fallbackError.message}`);\n    }\n  }\n}\n\n// Ana mesaj işleme fonksiyonu\nasync function handleMessage(message) {\n  try {\n    // 1. Mesajı doğrula\n    const validationResult = validation.validateMessage(message);\n    if (!validationResult.isValid) {\n      if (validationResult.reason === 'has_media') {\n        await errorHandler.handleMediaError(message);\n      }\n      return;\n    }\n\n    // 2. Müşteri bilgilerini al ve logla\n    const contactInfo = await contactManager.logContactInteraction(message, 'Mesaj alındı');\n    \n    // 3. Kullanıcı cevap verdiğinde tüm timer'ları durdur\n    const sessionManager = require('./sessionManager');\n    sessionManager.stopHelpTimer(message.from);\n    sessionManager.stopMenuTimer(message.from);\n    \n    // 4. Mesajı ayrıştır\n    const parsedMessage = messageParser.parseMessage(validationResult.messageBody);\n    \n    // 5. Oturum durumuna göre yönlendir\n    await sessionRouter.route(message, parsedMessage, contactInfo.name);\n    \n  } catch (error) {\n    await errorHandler.handleError(message, error);\n  }\n}\n\nmodule.exports = {\n  handleMessage,\n  sendReply, // YENİ EKLENDİ\n  getTimeBasedGreeting: require('./messageHandler/greetingManager').getTimeBasedGreeting,\n  isGreeting: messageParser.isGreeting,\n  parseMessage: messageParser.parseMessage,\n  handleGreeting: require('./messageHandler/greetingManager').handleGreeting,\n  findMatchingService: require('./messageHandler/serviceMatcher').findMatchingService,\n  createPersonalizedGreeting: require('./messageHandler/personalization').createPersonalizedGreeting\n};\n\n\n============================================================\n// DOSYA: modules/saleflow/timeoutmanager.js\n============================================================\n\n// modules/saleFlow/timeoutManager.js\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\nconst { getGlobalClient } = require('../utils/globalClient');\n\n// Satış zaman aşımı başlat\nfunction startSaleTimeout(userId, message) {\n  const session = sessionManager.getUserSession(userId);\n  \n  // Önceki timer'ı temizle\n  if (session && session.saleTimer) {\n    clearTimeout(session.saleTimer);\n  }\n  \n  console.log(`⏰ Satış zaman aşımı başlatıldı: ${userId}`);\n  \n  const saleTimer = setTimeout(async () => {\n    await handleSaleTimeout(userId);\n  }, 5 * 60 * 1000); // 5 dakika\n  \n  // Konuşmayı başlat\n  const conversationManager = require('./conversationManager');\n  conversationManager.startSaleConversation(userId);\n  \n  sessionManager.updateUserSession(userId, {\n    saleTimer: saleTimer,\n    currentState: 'waiting_for_sale_response'\n  });\n}\n\n// Satış zaman aşımı işleme - CLIENT FIX İLE GÜNCELLENDİ\nasync function handleSaleTimeout(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (session && session.currentState === 'waiting_for_sale_response') {\n    logger.info(`⏰ Satış zaman aşımı - Kullanıcı: ${userId}`);\n    \n    try {\n      // Global client instance'ını kullan\n      const client = getGlobalClient();\n      \n      if (client && client.info) {\n        const chat = await client.getChatById(userId);\n        await chat.sendMessage('⏰ *Cevap süresi doldu*\\n\\n' +\n                              'Yeşil Sigorta ihtiyacınız olduğunda tekrar \"yeşil sigorta\" yazabilirsiniz. 🛡️\\n\\n' +\n                              'İyi günler dilerim! ✨');\n        logger.info(`Zaman aşımı mesajı gönderildi: ${userId}`);\n      } else {\n        logger.warn('Client instance hazır değil, zaman aşımı mesajı gönderilemedi');\n      }\n      \n    } catch (error) {\n      logger.error(`Zaman aşımı mesajı gönderme hatası: ${error.message}`);\n    }\n    \n    // Konuşmayı bitir\n    const conversationManager = require('./conversationManager');\n    await conversationManager.endSaleConversation(userId);\n    conversationManager.logSaleStatistics(userId, 'timeout', false);\n  }\n}\n\n// Satış timer'ını temizle\nfunction clearSaleTimer(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (session && session.saleTimer) {\n    clearTimeout(session.saleTimer);\n    sessionManager.updateUserSession(userId, { saleTimer: null });\n    console.log(`⏰ Satış timer temizlendi: ${userId}`);\n  }\n}\n\n// Tüm satış timer'larını temizle (shutdown için)\nfunction clearAllSaleTimers() {\n  const sessions = sessionManager.userSessions;\n  let clearedCount = 0;\n  \n  sessions.forEach((session, userId) => {\n    if (session.saleTimer) {\n      clearTimeout(session.saleTimer);\n      clearedCount++;\n    }\n  });\n  \n  console.log(`⏰ ${clearedCount} satış timer temizlendi`);\n}\n\nmodule.exports = {\n  startSaleTimeout,\n  handleSaleTimeout,\n  clearSaleTimer,\n  clearAllSaleTimers\n};\n\n\n============================================================\n// DOSYA: modules/saleflow/servicefinder.js\n============================================================\n\n// modules/saleFlow/serviceFinder.js\nconst logger = require('../logger');\n\n// Yeşil Sigorta servisini bul - DÜZELTİLDİ\nfunction findYesilSigortaService(services) {\n  console.log(`🔍 Yeşil Sigorta servisi aranıyor...`);\n  \n  for (const [categoryName, categoryServices] of Object.entries(services)) {\n    if (typeof categoryServices === 'object' && categoryServices['yesil_sigorta']) { // yesil_sigortasi → yesil_sigorta\n      console.log(`✅ Yeşil Sigorta bulundu: ${categoryName}/yesil_sigorta`);\n      return {\n        type: 'service',\n        data: categoryServices['yesil_sigorta'],\n        category: categoryName,\n        name: 'yesil_sigorta'\n      };\n    }\n  }\n  \n  console.log(`❌ Yeşil Sigorta servisi bulunamadı`);\n  \n  // Alternatif servisleri kontrol et\n  const alternativeServices = findAlternativeServices(services);\n  if (alternativeServices.length > 0) {\n    console.log(`💡 Alternatif servisler bulundu:`, alternativeServices);\n  }\n  \n  return null;\n}\n\n// Alternatif servisleri bul\nfunction findAlternativeServices(services) {\n  const alternatives = [];\n  const targetServices = ['yesil_sigorta', 'trafik_sigortasi', 'kasko']; // yesil_sigortasi → yesil_sigorta\n  \n  for (const serviceKey of targetServices) {\n    for (const [categoryName, categoryServices] of Object.entries(services)) {\n      if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n        alternatives.push({\n          name: serviceKey,\n          category: categoryName,\n          displayName: categoryServices[serviceKey].service_name || serviceKey\n        });\n      }\n    }\n  }\n  \n  return alternatives;\n}\n\n// Tüm sigorta servislerini listele\nfunction getAllInsuranceServices(services) {\n  const insuranceServices = [];\n  \n  // Sigorta kategorilerinde ara\n  const insuranceCategories = ['sigorta_hizmetleri', 'sigorta_ana_kategori'];\n  \n  for (const category of insuranceCategories) {\n    if (services[category]) {\n      for (const [serviceKey, serviceData] of Object.entries(services[category])) {\n        if (typeof serviceData === 'object' && serviceData.service_name) {\n          insuranceServices.push({\n            key: serviceKey,\n            name: serviceData.service_name,\n            category: category\n          });\n        }\n      }\n    }\n  }\n  \n  return insuranceServices;\n}\n\n// Servis öncelik sıralaması - DÜZELTİLDİ\nfunction getServicePriority(serviceName) {\n  const priorityMap = {\n    'yesil_sigorta': 1, // yesil_sigortasi → yesil_sigorta\n    'trafik_sigortasi': 2,\n    'kasko': 3,\n    'konut_sigortasi': 4,\n    'dask': 5\n  };\n  \n  return priorityMap[serviceName] || 999;\n}\n\nmodule.exports = {\n  findYesilSigortaService,\n  findAlternativeServices,\n  getAllInsuranceServices,\n  getServicePriority\n};\n\n\n============================================================\n// DOSYA: modules/saleflow/responsehandler.js\n============================================================\n\n// modules/saleFlow/responseHandler.js - GÜNCELLENDİ\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendSaleResponse(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Satış cevabı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\n// Satış cevabını işleme - GÜNCELLENDİ\nasync function handleSaleResponse(message, response, services) {\n  const cleanResponse = response.toLowerCase().trim();\n  \n  console.log(`💰 Satış cevabı işleniyor: \"${cleanResponse}\"`);\n  \n  // Olumlu cevaplar\n  const positiveResponses = ['evet', 'yes', 'ok', 'tamam', 'başla', 'başlayalım', 'oluştur', 'yapalım', '✅', '👍'];\n  \n  // Olumsuz cevaplar\n  const negativeResponses = ['hayır', 'no', 'yok', 'later', 'sonra', '❌', '👎'];\n  \n  if (isPositiveResponse(cleanResponse, positiveResponses)) {\n    // Olumlu cevap - Yeşil Sigorta soru-cevap akışını başlat\n    await handlePositiveResponse(message, services);\n    \n  } else if (isNegativeResponse(cleanResponse, negativeResponses)) {\n    // Olumsuz cevap\n    await handleNegativeResponse(message);\n    \n  } else {\n    // Anlaşılamayan cevap\n    await handleUnknownResponse(message);\n  }\n}\n\n// Olumlu cevap kontrolü\nfunction isPositiveResponse(response, positiveResponses) {\n  return positiveResponses.some(pos => response.includes(pos));\n}\n\n// Olumsuz cevap kontrolü\nfunction isNegativeResponse(response, negativeResponses) {\n  return negativeResponses.some(neg => response.includes(neg));\n}\n\n// Olumlu cevap işleme - GÜNCELLENDİ\nasync function handlePositiveResponse(message, services) {\n  await sendSaleResponse(message, '🎉 Harika! Yeşil Sigorta poliçenizi oluşturmaya başlıyorum...');\n  \n  // Yeşil Sigorta servisini bul\n  const serviceFinder = require('./serviceFinder');\n  const yesilSigortaService = serviceFinder.findYesilSigortaService(services);\n  \n  if (yesilSigortaService) {\n    // Satış zamanlayıcısını temizle\n    const timeoutManager = require('./timeoutManager');\n    timeoutManager.clearSaleTimer(message.from);\n    \n    // Yeşil Sigorta akışını başlat\n    const serviceFlow = require('../serviceFlow');\n    await serviceFlow.startServiceFlow(message, yesilSigortaService);\n  } else {\n    await sendSaleResponse(message, '❌ Yeşil Sigorta servisi bulunamadı. Lütfen daha sonra tekrar deneyin.');\n    await endConversation(message);\n  }\n}\n\n// Olumsuz cevap işleme - GÜNCELLENDİ\nasync function handleNegativeResponse(message) {\n  await sendSaleResponse(message, '👍 Anladım. Yeşil Sigorta ihtiyacınız olduğunda buradayım! 🛡️');\n  await endConversation(message);\n}\n\n// Anlaşılamayan cevap işleme - GÜNCELLENDİ\nasync function handleUnknownResponse(message) {\n  await sendSaleResponse(message, '❌ Anlayamadım. Lütfen *Evet* veya *Hayır* olarak cevap verin.\\n\\n' +\n                     '✅ *Evet* - Poliçe oluşturmaya başlayalım\\n' +\n                     '❌ *Hayır* - Şimdilik sadece fiyat bilgisi yeterli');\n}\n\n// Konuşmayı bitir\nasync function endConversation(message) {\n  const conversationManager = require('./conversationManager');\n  await conversationManager.endSaleConversation(message.from);\n  \n  const serviceLoader = require('../serviceLoader');\n  const menuHandler = require('../menuHandler');\n  \n  setTimeout(async () => {\n    await menuHandler.showMainMenu(message, serviceLoader.loadAllServices());\n  }, 3000);\n}\n\nmodule.exports = {\n  handleSaleResponse,\n  isPositiveResponse,\n  isNegativeResponse,\n  handlePositiveResponse,\n  handleNegativeResponse,\n  handleUnknownResponse,\n  endConversation\n};\n\n\n============================================================\n// DOSYA: modules/saleflow/conversationmanager.js\n============================================================\n\n// modules/saleFlow/conversationManager.js\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\n\n// Satış konuşmasını başlat\nfunction startSaleConversation(userId) {\n  console.log(`💰 Satış konuşması başlatılıyor: ${userId}`);\n  \n  sessionManager.updateUserSession(userId, {\n    currentState: 'waiting_for_sale_response',\n    inSaleConversation: true,\n    saleStartTime: Date.now()\n  });\n}\n\n// Satış konuşmasını bitir\nasync function endSaleConversation(userId) {\n  console.log(`💰 Satış konuşması bitiriliyor: ${userId}`);\n  \n  const session = sessionManager.getUserSession(userId);\n  const saleDuration = session?.saleStartTime ? Date.now() - session.saleStartTime : 0;\n  \n  logger.info(`Satış konuşması tamamlandı - Kullanıcı: ${userId}, Süre: ${saleDuration}ms`);\n  \n  sessionManager.updateUserSession(userId, {\n    currentState: 'main_menu',\n    inSaleConversation: false,\n    saleStartTime: null,\n    saleTimer: null\n  });\n}\n\n// Satış istatistiklerini kaydet\nfunction logSaleStatistics(userId, responseType, success = false) {\n  const session = sessionManager.getUserSession(userId);\n  const saleDuration = session?.saleStartTime ? Date.now() - session.saleStartTime : 0;\n  \n  const stats = {\n    userId: userId,\n    responseType: responseType,\n    success: success,\n    duration: saleDuration,\n    timestamp: new Date().toISOString()\n  };\n  \n  logger.info(`Satış istatistiği: ${JSON.stringify(stats)}`);\n  \n  // İsteğe bağlı: Veritabanına veya dosyaya kaydet\n  saveSaleStatsToFile(stats);\n}\n\n// Satış istatistiklerini dosyaya kaydet\nfunction saveSaleStatsToFile(stats) {\n  try {\n    const statsDir = './sales_stats';\n    if (!require('fs').existsSync(statsDir)) {\n      require('fs').mkdirSync(statsDir, { recursive: true });\n    }\n    \n    const filename = `sale_stats_${new Date().toISOString().split('T')[0]}.json`;\n    const filePath = require('path').join(statsDir, filename);\n    \n    let existingStats = [];\n    if (require('fs').existsSync(filePath)) {\n      const fileContent = require('fs').readFileSync(filePath, 'utf8');\n      existingStats = JSON.parse(fileContent);\n    }\n    \n    existingStats.push(stats);\n    require('fs').writeFileSync(filePath, JSON.stringify(existingStats, null, 2), 'utf8');\n    \n  } catch (error) {\n    logger.error(`Satış istatistiği kaydetme hatası: ${error.message}`);\n  }\n}\n\n// Satış başarı oranını hesapla\nfunction calculateSaleSuccessRate() {\n  // Bu fonksiyon istatistik dosyalarını analiz edebilir\n  // Şu anlık basit bir implementasyon\n  return {\n    totalConversations: 0,\n    successfulSales: 0,\n    successRate: 0\n  };\n}\n\nmodule.exports = {\n  startSaleConversation,\n  endSaleConversation,\n  logSaleStatistics,\n  saveSaleStatsToFile,\n  calculateSaleSuccessRate\n};\n\n\n============================================================\n// DOSYA: modules/saleflow/salemanager.js\n============================================================\n\n// modules/saleFlow/saleManager.js - GÜNCELLENDİ\nconst logger = require('../logger');\nconst sessionManager = require('../sessionManager');\nconst { sendMessageWithoutQuote } = require('../utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendSaleMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Satış mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\n// Satış teklifi sorma - GÜNCELLENDİ\nasync function askForSale(message) {\n  const saleQuestion = `🎯 *Yeşil Sigorta Poliçenizi hemen düzenleyelim mi?*\\n\\n` +\n                      `Poliçenizi oluşturmak için sadece birkaç bilgiye ihtiyacımız var.\\n\\n` +\n                      `✅ *Evet* - Poliçe oluşturmaya başlayalım\\n` +\n                      `❌ *Hayır* - Şimdilik sadece fiyat bilgisi yeterli`;\n  \n  await sendSaleMessage(message, saleQuestion);\n  \n  // Satış oturumu başlat\n  const timeoutManager = require('./timeoutManager');\n  timeoutManager.startSaleTimeout(message.from, message);\n}\n\n// Satış teklifi formatları\nfunction getSaleQuestions() {\n  return {\n    yesil_sigorta: {\n      question: `🎯 *Yeşil Sigorta Poliçenizi hemen düzenleyelim mi?*`,\n      options: `✅ *Evet* - Poliçe oluşturmaya başlayalım\\n❌ *Hayır* - Şimdilik sadece fiyat bilgisi yeterli`\n    },\n    trafik_sigortasi: {\n      question: `🎯 *Trafik Sigortası poliçenizi hemen oluşturalım mı?*`,\n      options: `✅ *Evet* - Poliçe oluşturmaya başlayalım\\n❌ *Hayır* - Şimdilik sadece fiyat bilgisi yeterli`\n    }\n  };\n}\n\n// Servise özel satış sorusu oluştur - GÜNCELLENDİ\nasync function askServiceSpecificSale(message, serviceName) {\n  const questions = getSaleQuestions();\n  const serviceQuestion = questions[serviceName] || questions['yesil_sigorta'];\n  \n  const saleQuestion = `${serviceQuestion.question}\\n\\n${serviceQuestion.options}`;\n  \n  await sendSaleMessage(message, saleQuestion);\n  \n  // Satış oturumu başlat\n  const timeoutManager = require('./timeoutManager');\n  timeoutManager.startSaleTimeout(message.from, message);\n}\n\nmodule.exports = {\n  askForSale,\n  askServiceSpecificSale,\n  getSaleQuestions\n};\n\n\n============================================================\n// DOSYA: modules/saleflow.js\n============================================================\n\n// modules/saleFlow.js - ANA YÖNLENDİRİCİ DOSYA\nconst saleManager = require('./saleFlow/saleManager');\nconst responseHandler = require('./saleFlow/responseHandler');\nconst serviceFinder = require('./saleFlow/serviceFinder');\nconst conversationManager = require('./saleFlow/conversationManager');\nconst timeoutManager = require('./saleFlow/timeoutManager');\n\n// Satış teklifi sorma\nasync function askForSale(message) {\n  await saleManager.askForSale(message);\n}\n\n// Servise özel satış teklifi sorma\nasync function askServiceSpecificSale(message, serviceName) {\n  await saleManager.askServiceSpecificSale(message, serviceName);\n}\n\n// Satış cevabını işleme\nasync function handleSaleResponse(message, response, services) {\n  await responseHandler.handleSaleResponse(message, response, services);\n}\n\n// Satış zaman aşımı işleme\nasync function handleSaleTimeout(userId) {\n  await timeoutManager.handleSaleTimeout(userId);\n}\n\n// Yeşil Sigorta servisini bul\nfunction findYesilSigortaService(services) {\n  return serviceFinder.findYesilSigortaService(services);\n}\n\n// Satış konuşmasını başlat\nfunction startSaleConversation(userId) {\n  conversationManager.startSaleConversation(userId);\n}\n\n// Satış konuşmasını bitir\nasync function endSaleConversation(userId) {\n  await conversationManager.endSaleConversation(userId);\n}\n\n// Satış timer'ını temizle\nfunction clearSaleTimer(userId) {\n  timeoutManager.clearSaleTimer(userId);\n}\n\n// Tüm satış timer'larını temizle\nfunction clearAllSaleTimers() {\n  timeoutManager.clearAllSaleTimers();\n}\n\n// Satış istatistiklerini kaydet\nfunction logSaleStatistics(userId, responseType, success = false) {\n  conversationManager.logSaleStatistics(userId, responseType, success);\n}\n\nmodule.exports = {\n  // Ana fonksiyonlar\n  askForSale,\n  askServiceSpecificSale,\n  handleSaleResponse,\n  handleSaleTimeout,\n  \n  // Yardımcı fonksiyonlar\n  findYesilSigortaService,\n  startSaleConversation,\n  endSaleConversation,\n  clearSaleTimer,\n  clearAllSaleTimers,\n  logSaleStatistics,\n  \n  // Alt modüllere erişim için\n  saleManager,\n  responseHandler,\n  serviceFinder,\n  conversationManager,\n  timeoutManager\n};\n\n\n============================================================\n// DOSYA: modules/serviceflow.js\n============================================================\n\n// modules/serviceFlow.js - GÜNCELLENDİ\nconst fs = require('fs');\nconst path = require('path');\nconst logger = require('./logger');\nconst sessionManager = require('./sessionManager');\nconst validationUtils = require('./validationUtils');\nconst { sendMessageWithoutQuote } = require('./utils/globalClient');\n\n// Alıntısız mesaj gönderme yardımcı fonksiyonu\nasync function sendServiceMessage(message, text) {\n  try {\n    await sendMessageWithoutQuote(message.from, text);\n  } catch (error) {\n    console.error('Servis mesajı gönderme hatası, fallback kullanılıyor:', error.message);\n    await message.reply(text);\n  }\n}\n\n// Servis akışını başlat - GÜNCELLENDİ\nasync function startServiceFlow(message, service) {\n  const serviceData = service.data;\n  \n  console.log(`🚀 Servis başlatılıyor: ${service.name}, Kategori: ${service.category}`);\n  \n  // FİYAT LİSTESİ İSE ÖZEL İŞLEM\n  if (service.category === 'fiyat_listeleri') {\n    await handlePriceList(message, service);\n    return;\n  }\n  \n  // NORMAL SERVİS İSE SORU-CEVAP AKIŞI\n  sessionManager.updateUserSession(message.from, {\n    currentService: service,\n    currentQuestions: serviceData.questions || [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {},\n    serviceFlow: serviceData.service_name,\n    currentState: 'in_service'\n  });\n\n  await sendServiceMessage(message, serviceData.bot_greeting);\n  \n  const session = sessionManager.getUserSession(message.from);\n  if (session.currentQuestions.length > 0) {\n    await askNextQuestion(message, session);\n  } else {\n    await completeServiceFlow(message, session);\n  }\n}\n\n// Fiyat listesi işleme - GÜNCELLENDİ\nasync function handlePriceList(message, service) {\n  const priceData = service.data;\n  \n  console.log(`💰 Fiyat listesi işleniyor: ${service.name}`, priceData);\n  \n  let priceText = `💰 *${service.name.replace(/_/g, ' ').toUpperCase()}*\\n\\n`;\n  \n  if (priceData.fiyat_tablosu) {\n    // Yeşil Sigorta fiyat formatı\n    for (const [aracTipi, fiyatlar] of Object.entries(priceData.fiyat_tablosu)) {\n      priceText += `*${aracTipi}:*\\n`;\n      for (const [sure, fiyat] of Object.entries(fiyatlar)) {\n        const sureText = sure.replace('_gun', ' gün').replace('15_gun', '15 gün').replace('30_gun', '30 gün').replace('90_gun', '90 gün');\n        priceText += `  • ${sureText}: ${fiyat}\\n`;\n      }\n      priceText += '\\n';\n    }\n  }\n  \n  // ÖNEMLİ BİLGİLENDİRME ekle\n  if (priceData.önemli_bilgilendirme) {\n    priceText += `⚠️ *Önemli Bilgilendirme:*\\n${priceData.önemli_bilgilendirme}\\n\\n`;\n  }\n  \n  // AÇIKLAMA ekle\n  if (priceData.aciklama) {\n    priceText += `📝 *Açıklama:* ${priceData.aciklama}\\n\\n`;\n  }\n  \n  await sendServiceMessage(message, priceText);\n  \n  // 2 saniye bekle ve satış teklifini göster\n  setTimeout(async () => {\n    try {\n      const saleFlow = require('./saleFlow');\n      await saleFlow.askForSale(message);\n    } catch (error) {\n      logger.error(`Satış teklifi hatası: ${error.message}`);\n      console.log('❌ Satış teklifi gösterilemedi:', error.message);\n      \n      // Fallback: Ana menüye dön\n      const serviceLoader = require('./serviceLoader');\n      const menuHandler = require('./menuHandler');\n      await menuHandler.showMainMenu(message, serviceLoader.loadAllServices());\n    }\n  }, 2000);\n}\n\n// Sonraki soruyu sor - GÜNCELLENDİ\nasync function askNextQuestion(message, session) {\n  const currentQuestion = session.currentQuestions[session.currentQuestionIndex];\n  \n  if (currentQuestion) {\n    let questionText = `📝 *Soru ${session.currentQuestionIndex + 1}/${session.currentQuestions.length}*\\n\\n`;\n    questionText += `${currentQuestion.question}`;\n    \n    if (currentQuestion.field_type === 'number') {\n      questionText += `\\n\\n💡 *Lütfen sadece sayı giriniz.*`;\n    } else if (currentQuestion.field_type === 'date') {\n      questionText += `\\n\\n💡 *Format: Gün/Ay/Yıl (Örnek: 15/01/2024)*`;\n    } else if (currentQuestion.field_type === 'phone') {\n      questionText += `\\n\\n💡 *Format: 5XX XXX XX XX*`;\n    }\n    \n    await sendServiceMessage(message, questionText);\n    \n    sessionManager.updateUserSession(message.from, {\n      currentState: 'collecting_answer',\n      waitingForResponse: true\n    });\n  } else {\n    await completeServiceFlow(message, session);\n  }\n}\n\n// Cevabı işle - GÜNCELLENDİ\nasync function handleAnswer(message, answer, session) {\n  const currentQuestion = session.currentQuestions[session.currentQuestionIndex];\n  const fieldName = currentQuestion.field_name;\n  \n  const validationResult = validationUtils.validateAnswer(answer, currentQuestion.field_type);\n  \n  if (!validationResult.isValid) {\n    await sendServiceMessage(message, `❌ ${validationResult.errorMessage}\\n\\nLütfen tekrar cevap verin:`);\n    return false;\n  }\n  \n  const updatedAnswers = {\n    ...session.collectedAnswers,\n    [fieldName]: validationResult.cleanedValue\n  };\n  \n  sessionManager.updateUserSession(message.from, {\n    collectedAnswers: updatedAnswers,\n    currentQuestionIndex: session.currentQuestionIndex + 1\n  });\n  \n  const updatedSession = sessionManager.getUserSession(message.from);\n  if (updatedSession.currentQuestionIndex < updatedSession.currentQuestions.length) {\n    await askNextQuestion(message, updatedSession);\n  } else {\n    await completeServiceFlow(message, updatedSession);\n  }\n  \n  return true;\n}\n\n// Servis akışını tamamla - GÜNCELLENDİ\nasync function completeServiceFlow(message, session) {\n  if (!session.currentService || !session.currentService.data) {\n    console.log('❌ Servis verisi bulunamadı');\n    await sendServiceMessage(message, '❌ Bir hata oluştu. Lütfen tekrar deneyin.');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    \n    const serviceLoader = require('./serviceLoader');\n    const menuHandler = require('./menuHandler');\n    await menuHandler.showMainMenu(message, serviceLoader.loadAllServices());\n    return;\n  }\n  \n  const serviceData = session.currentService.data;\n  const serviceName = serviceData.service_name || session.currentService.name || 'Servis';\n  \n  console.log(`✅ Servis tamamlandı: ${serviceName}`);\n  console.log(`📊 Toplanan cevaplar:`, session.collectedAnswers);\n  \n  let completionText = `🎉 *${serviceName}* başvurunuz tamamlandı!\\n\\n`;\n  \n  if (session.currentQuestions.length > 0) {\n    completionText += `✅ Toplam ${session.currentQuestions.length} soru cevaplandı.\\n\\n`;\n  }\n  \n  completionText += serviceData.completion_message || 'En kısa sürede size dönüş yapacağız.';\n\n  await sendServiceMessage(message, completionText);\n  \n  // Sadece normal servisler için kaydet (fiyat listeleri değil)\n  if (session.currentService.category !== 'fiyat_listeleri') {\n    await saveServiceApplication(session);\n  }\n  \n  sessionManager.updateUserSession(message.from, {\n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {},\n    serviceFlow: null\n  });\n  \n  const serviceLoader = require('./serviceLoader');\n  const menuHandler = require('./menuHandler');\n  \n  setTimeout(async () => {\n    await menuHandler.showMainMenu(message, serviceLoader.loadAllServices());\n  }, 2000);\n}\n\n// Servis başvurusunu kaydet\nasync function saveServiceApplication(session) {\n  try {\n    const applicationData = {\n      service: session.serviceFlow,\n      answers: session.collectedAnswers,\n      timestamp: new Date().toISOString(),\n      userId: session.userId\n    };\n    \n    const applicationsDir = './applications';\n    if (!fs.existsSync(applicationsDir)) {\n      fs.mkdirSync(applicationsDir, { recursive: true });\n    }\n    \n    const filename = `application_${Date.now()}_${session.userId.replace('@c.us', '')}.json`;\n    fs.writeFileSync(\n      path.join(applicationsDir, filename),\n      JSON.stringify(applicationData, null, 2),\n      'utf8'\n    );\n    \n    logger.info(`Başvuru kaydedildi: ${filename}`);\n    console.log(`📄 Başvuru kaydedildi: ${filename}`);\n    \n  } catch (error) {\n    logger.error(`Başvuru kaydetme hatası: ${error.message}`);\n    console.error('❌ Başvuru kaydetme hatası:', error);\n  }\n}\n\nmodule.exports = {\n  startServiceFlow,\n  handlePriceList,\n  askNextQuestion,\n  handleAnswer,\n  completeServiceFlow,\n  saveServiceApplication\n};\n\n\n============================================================\n// DOSYA: index.js\n============================================================\n\n// index.js - ARYA Bot Ana Dosyası (MODÜLER YAPILI - GÜNCELLENMİŞ)\nconst { Client, LocalAuth } = require('whatsapp-web.js');\nconst qrcode = require('qrcode-terminal');\nconst express = require('express');\nconst path = require('path');\n\n// Modülleri import et\nconst logger = require('./modules/logger');\nconst sessionManager = require('./modules/sessionManager');\nconst serviceLoader = require('./modules/serviceLoader');\nconst messageHandler = require('./modules/messageHandler');\nconst menuHandler = require('./modules/menuHandler');\n\n// Global client utility - EKLENDİ\nconst { setGlobalClient } = require('./modules/utils/globalClient');\n\n// WhatsApp client oluşturma\nconst client = new Client({\n  authStrategy: new LocalAuth({\n    dataPath: './session'\n  }),\n  puppeteer: {\n    headless: true,\n    args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']\n  }\n});\n\n// Global client'ı başlat - EKLENDİ\nsetGlobalClient(client);\nconsole.log('🌐 Global client instance başlatıldı');\n\n// QR kodu oluşturma\nclient.on('qr', (qr) => {\n  console.log('\\n📱 WHATSAPP BAĞLANTI KODU:');\n  console.log('========================');\n  qrcode.generate(qr, { small: true });\n  console.log('========================');\n  logger.info('QR kodu oluşturuldu - WhatsApp Web\\'e bağlanmak için tarayın');\n});\n\n// Bağlantı başarılı\nclient.on('ready', () => {\n  console.log('\\n✅ ARYA BOT BAŞARIYLA BAĞLANDI!');\n  console.log('🤖 Bot: ARYA');\n  console.log('🏢 Firma: PlanB Global Network Ltd Şti');\n  console.log('🚀 Geliştirici: EurAsia Trade And Technology Bulgaria EOOD - ÆSIR Ekibi');\n  \n  // Client'ın gerçekten hazır olduğunu kontrol et\n  if (client.info) {\n    console.log(`📱 Bağlı kullanıcı: ${client.info.pushname}`);\n    console.log(`📞 Telefon: ${client.info.wid.user}`);\n  }\n  \n  logger.info('ARYA Bot başlatıldı ve WhatsApp\\'a bağlandı');\n});\n\n// Bağlantı hatası\nclient.on('auth_failure', (msg) => {\n  logger.error('WhatsApp bağlantı hatası: ' + msg);\n  console.log('❌ WhatsApp bağlantı hatası. Lütfen tekrar deneyin.');\n  console.log('💡 Oturum dosyalarını silmek için: rm -rf session/');\n});\n\n// Bağlantı kesildi - OTOMATİK YENİDEN BAĞLANMA\nclient.on('disconnected', (reason) => {\n  logger.warn('WhatsApp bağlantısı kesildi: ' + reason);\n  console.log('🔌 WhatsApp bağlantısı kesildi. 5 saniye sonra yeniden bağlanılıyor...');\n  \n  setTimeout(() => {\n    console.log('🔄 WhatsApp bağlantısı yeniden deneniyor...');\n    client.initialize().catch(err => {\n      logger.error('Yeniden bağlanma hatası: ' + err.message);\n      console.log('❌ Yeniden bağlanma başarısız. Lütfen manuel olarak kontrol edin.');\n    });\n  }, 5000);\n});\n\n// Mesaj alma - YENİ MANTIK\nclient.on('message', async (message) => {\n  try {\n    await messageHandler.handleMessage(message);\n  } catch (error) {\n    logger.error(`Mesaj işleme hatası: ${error.message}`);\n    console.error('❌ Mesaj işlenirken hata:', error);\n    \n    // Kullanıcıya hata mesajı gönder\n    try {\n      await message.reply('❌ Üzgünüm, bir hata oluştu. Lütfen tekrar deneyin.');\n    } catch (replyError) {\n      logger.error(`Hata mesajı gönderilemedi: ${replyError.message}`);\n    }\n  }\n});\n\n// Express sunucusu\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Environment variable kontrolü\nif (!process.env.PORT) {\n  console.log('⚠️  PORT environment variable bulunamadı, varsayılan 3000 kullanılıyor');\n}\n\napp.use(express.json());\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  const botStatus = client.info ? 'connected' : 'disconnected';\n  \n  res.json({ \n    status: 'OK', \n    bot: 'ARYA', \n    version: '1.0.0',\n    company: 'PlanB Global Network Ltd Şti',\n    whatsapp_status: botStatus,\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory_usage: process.memoryUsage()\n  });\n});\n\n// Services endpoint\napp.get('/services', (req, res) => {\n  try {\n    const services = serviceLoader.loadAllServices();\n    res.json({\n      success: true,\n      data: services,\n      count: Object.keys(services).length,\n      loaded_at: new Date().toISOString()\n    });\n  } catch (error) {\n    logger.error(`Services endpoint hatası: ${error.message}`);\n    res.status(500).json({\n      success: false,\n      error: 'Servisler yüklenirken hata oluştu'\n    });\n  }\n});\n\n// Root endpoint\napp.get('/', (req, res) => {\n  res.json({\n    message: 'ARYA Bot API Service',\n    endpoints: {\n      health: '/health',\n      services: '/services'\n    },\n    documentation: 'ARYA Bot için REST API servisi'\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    error: 'Endpoint bulunamadı',\n    available_endpoints: ['/health', '/services']\n  });\n});\n\n// Sunucuyu başlat\napp.listen(PORT, () => {\n  console.log(`🌐 ARYA Bot API http://localhost:${PORT} adresinde çalışıyor`);\n  console.log(`📊 Health check: http://localhost:${PORT}/health`);\n  console.log(`📋 Servisler: http://localhost:${PORT}/services`);\n  logger.info(`ARYA Bot API ${PORT} portunda başlatıldı`);\n});\n\n// Botu başlat\nconsole.log('🚀 ARYA Bot başlatılıyor...');\nconsole.log('📁 Modüler yapı yükleniyor...');\n\nclient.initialize().catch(error => {\n  logger.error(`Bot başlatma hatası: ${error.message}`);\n  console.log('❌ Bot başlatılamadı:', error.message);\n  process.exit(1);\n});\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.log('\\n🛑 ARYA Bot kapatılıyor...');\n  \n  // Tüm timer'ları temizle - GÜNCELLENDİ\n  const timeoutManager = require('./modules/saleFlow/timeoutManager');\n  timeoutManager.clearAllSaleTimers();\n  \n  sessionManager.userSessions.forEach(session => {\n    if (session.menuTimer) clearTimeout(session.menuTimer);\n    if (session.helpTimer) clearTimeout(session.helpTimer);\n    if (session.goodbyeTimer) clearTimeout(session.goodbyeTimer);\n  });\n  \n  // Client'ı temizle\n  try {\n    await client.destroy();\n    console.log('✅ WhatsApp client temizlendi');\n  } catch (error) {\n    console.log('⚠️  Client temizleme hatası:', error.message);\n  }\n  \n  logger.info('ARYA Bot kapatıldı');\n  console.log('👋 ARYA Bot başarıyla kapatıldı');\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('\\n🛑 ARYA Bot SIGTERM sinyali aldı, kapatılıyor...');\n  await client.destroy();\n  process.exit(0);\n});\n\n// Beklenmeyen hatalar\nprocess.on('uncaughtException', (error) => {\n  logger.error(`Beklenmeyen hata: ${error.message}`);\n  console.log('❌ Kritik hata oluştu:', error.message);\n  console.log('🔄 Bot yeniden başlatılabilir...');\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error(`İşlenmemiş Promise: ${reason}`);\n  console.log('⚠️  İşlenmemiş Promise hatası:', reason);\n});\n\n// Başlangıç kontrolü\nsetTimeout(() => {\n  if (!client.info) {\n    console.log('⏳ WhatsApp bağlantısı bekleniyor... QR kodu tarayın.');\n  }\n}, 3000);\n\n","size_bytes":112308},"modules/serviceLoader.js":{"content":"const fs = require('fs');\nconst path = require('path');\nconst logger = require('./logger');\n\n// JSON verilerini yükleme fonksiyonu - GÜNCELLENDİ\nfunction loadJSON(filePath) {\n  try {\n    // Önce verilen yolu dene\n    if (fs.existsSync(filePath)) {\n      const data = fs.readFileSync(filePath, 'utf8');\n      const parsedData = JSON.parse(data);\n      console.log(`✅ JSON yüklendi: ${filePath}`);\n      return parsedData;\n    }\n    \n    // GENEL_DİYALOG klasöründe de dene\n    const genelDiyalogPath = path.join('./genel_diyalog', path.basename(filePath));\n    if (fs.existsSync(genelDiyalogPath)) {\n      const data = fs.readFileSync(genelDiyalogPath, 'utf8');\n      const parsedData = JSON.parse(data);\n      console.log(`✅ JSON yüklendi (genel_diyalog): ${genelDiyalogPath}`);\n      return parsedData;\n    }\n\n    // Ana dizinde de dene\n    const rootPath = path.join('./', path.basename(filePath));\n    if (fs.existsSync(rootPath)) {\n      const data = fs.readFileSync(rootPath, 'utf8');\n      const parsedData = JSON.parse(data);\n      console.log(`✅ JSON yüklendi (root): ${rootPath}`);\n      return parsedData;\n    }\n    \n    console.log(`❌ JSON dosyası bulunamadı: ${filePath}`);\n    return null;\n  } catch (error) {\n    logger.error(`JSON yükleme hatası (${filePath}): ${error.message}`);\n    console.log(`❌ JSON parse hatası: ${error.message}`);\n    return null;\n  }\n}\n\n// Tüm servisleri yükle - GÜNCELLENDİ\nfunction loadAllServices() {\n  const services = {};\n  \n  console.log('📁 Tüm servisler yükleniyor...');\n  \n  // Ana kategorileri yükle\n  const anaKategoriDosyalari = fs.readdirSync('./ana_kategoriler').filter(file => file.endsWith('.json'));\n  console.log(`📂 Ana kategoriler bulundu: ${anaKategoriDosyalari.length}`);\n  \n  anaKategoriDosyalari.forEach(file => {\n    const key = file.replace('.json', '');\n    services[key] = loadJSON(path.join('./ana_kategoriler', file));\n  });\n  \n  // Data klasöründeki servisleri yükle\n  if (fs.existsSync('./data')) {\n    const dataKlasorleri = fs.readdirSync('./data').filter(name => \n      fs.statSync(path.join('./data', name)).isDirectory()\n    );\n    \n    console.log(`📂 Data klasörleri: ${dataKlasorleri.length}`);\n    \n    dataKlasorleri.forEach(klasor => {\n      const klasorYolu = path.join('./data', klasor);\n      services[klasor] = {};\n      \n      const servisDosyalari = fs.readdirSync(klasorYolu).filter(file => file.endsWith('.json'));\n      servisDosyalari.forEach(file => {\n        const servisAdi = file.replace('.json', '');\n        services[klasor][servisAdi] = loadJSON(path.join(klasorYolu, file));\n      });\n    });\n  }\n  \n  // Fiyat listelerini yükle\n  const fiyatKlasoru = './fiyat_listeleri';\n  if (fs.existsSync(fiyatKlasoru)) {\n    services['fiyat_listeleri'] = {};\n    const fiyatDosyalari = fs.readdirSync(fiyatKlasoru).filter(file => file.endsWith('.json'));\n    \n    console.log(`💰 Fiyat dosyaları: ${fiyatDosyalari.length}`);\n    \n    fiyatDosyalari.forEach(file => {\n      const fiyatAdi = file.replace('.json', '');\n      services['fiyat_listeleri'][fiyatAdi] = loadJSON(path.join(fiyatKlasoru, file));\n    });\n  }\n  \n  // Genel diyalog dosyalarını yükle\n  const genelDiyalogKlasoru = './genel_diyalog';\n  if (fs.existsSync(genelDiyalogKlasoru)) {\n    services['genel_diyalog'] = {};\n    const diyalogDosyalari = fs.readdirSync(genelDiyalogKlasoru).filter(file => file.endsWith('.json'));\n    \n    console.log(`💬 Diyalog dosyaları: ${diyalogDosyalari.length}`);\n    \n    diyalogDosyalari.forEach(file => {\n      const diyalogAdi = file.replace('.json', '');\n      services['genel_diyalog'][diyalogAdi] = loadJSON(path.join(genelDiyalogKlasoru, file));\n    });\n  }\n  \n  console.log(`🎉 Toplam ${Object.keys(services).length} kategori yüklendi`);\n  return services;\n}\n\nmodule.exports = {\n  loadJSON,\n  loadAllServices\n};","size_bytes":3866},"micro-modules/message/handleUnknownMessage.js":{"content":"// micro-modules/message/handleUnknownMessage.js\nasync function handleUnknownMessage(message, services) {\n  await message.reply(`🤔 Anlayamadım. Lütfen aşağıdaki seçeneklerden birini belirtin:\\n\\n` +\n                     `• \"sigorta\" - Sigorta hizmetleri\\n` +\n                     `• \"yazılım\" - Yazılım geliştirme\\n` +\n                     `• \"lojistik\" - Nakliye hizmetleri\\n` +\n                     `• Veya diğer hizmetlerimiz...\\n\\n` +\n                     `Yardım için \"menü\" yazabilirsiniz.`);\n}\n\nmodule.exports = handleUnknownMessage;","size_bytes":566},"jsontopla.py":{"content":"import os\nimport json\nfrom collections import OrderedDict\n\ndef hedef_json_dosyalarini_birlestir(ana_klasor='.', cikti_dosyasi='tumjsondosyalari.json'):\n    \"\"\"\n    Sadece belirli klasörlerdeki JSON dosyalarını birleştirir.\n    \n    Args:\n        ana_klasor (str): Ana klasör yolu\n        cikti_dosyasi (str): Birleştirilmiş çıktı dosyası adı\n    \"\"\"\n    \n    # Hedef klasör listesi (sadece bu klasörlerdeki JSON'lar alınacak)\n    hedef_klasorler = [\n        'data',\n        'ana_kategoriler', \n        'fiyat_listeleri',\n        'genel_diyalog',\n        'config'\n    ]\n    \n    birlestirilmis_veri = OrderedDict()\n    toplam_dosya_sayisi = 0\n    \n    print(\"🎯 HEDEF KLASÖRLERDE JSON ARANIYOR...\")\n    print(\"=\" * 50)\n    \n    for hedef_klasor in hedef_klasorler:\n        klasor_yolu = os.path.join(ana_klasor, hedef_klasor)\n        \n        if not os.path.exists(klasor_yolu):\n            print(f\"❌ Klasör bulunamadı: {hedef_klasor}\")\n            continue\n            \n        print(f\"\\n📁 {hedef_klasor} klasörü taranıyor...\")\n        \n        # Ana klasördeki JSON'lar\n        ana_jsonlar = [f for f in os.listdir(klasor_yolu) if f.endswith('.json')]\n        \n        # Alt klasörlerdeki JSON'lar\n        alt_klasor_jsonlar = {}\n        for item in os.listdir(klasor_yolu):\n            item_yolu = os.path.join(klasor_yolu, item)\n            if os.path.isdir(item_yolu):\n                alt_jsonlar = [f for f in os.listdir(item_yolu) if f.endswith('.json')]\n                if alt_jsonlar:\n                    alt_klasor_jsonlar[item] = alt_jsonlar\n        \n        # Ana klasördeki JSON'ları işle\n        if ana_jsonlar:\n            birlestirilmis_veri[hedef_klasor] = {}\n            for json_dosya in ana_jsonlar:\n                dosya_yolu = os.path.join(klasor_yolu, json_dosya)\n                try:\n                    with open(dosya_yolu, 'r', encoding='utf-8') as f:\n                        veri = json.load(f)\n                    \n                    dosya_adi_uzantisiz = os.path.splitext(json_dosya)[0]\n                    birlestirilmis_veri[hedef_klasor][dosya_adi_uzantisiz] = veri\n                    toplam_dosya_sayisi += 1\n                    print(f\"   ✅ {json_dosya}\")\n                    \n                except Exception as e:\n                    print(f\"   ❌ {json_dosya} - Hata: {e}\")\n        \n        # Alt klasörlerdeki JSON'ları işle\n        for alt_klasor, json_listesi in alt_klasor_jsonlar.items():\n            alt_klasor_anahtari = f\"{hedef_klasor}/{alt_klasor}\"\n            birlestirilmis_veri[alt_klasor_anahtari] = {}\n            \n            for json_dosya in json_listesi:\n                dosya_yolu = os.path.join(klasor_yolu, alt_klasor, json_dosya)\n                try:\n                    with open(dosya_yolu, 'r', encoding='utf-8') as f:\n                        veri = json.load(f)\n                    \n                    dosya_adi_uzantisiz = os.path.splitext(json_dosya)[0]\n                    birlestirilmis_veri[alt_klasor_anahtari][dosya_adi_uzantisiz] = veri\n                    toplam_dosya_sayisi += 1\n                    print(f\"   ✅ {alt_klasor}/{json_dosya}\")\n                    \n                except Exception as e:\n                    print(f\"   ❌ {alt_klasor}/{json_dosya} - Hata: {e}\")\n    \n    # Birleştirilmiş veriyi kaydet\n    with open(cikti_dosyasi, 'w', encoding='utf-8') as f:\n        json.dump(birlestirilmis_veri, f, ensure_ascii=False, indent=2, sort_keys=False)\n    \n    print(f\"\\n🎉 BİRLEŞTİRME TAMAMLANDI!\")\n    print(\"=\" * 50)\n    print(f\"📄 Çıktı dosyası: {cikti_dosyasi}\")\n    print(f\"📁 İşlenen klasör: {len(hedef_klasorler)}\")\n    print(f\"📊 Toplam JSON dosyası: {toplam_dosya_sayisi}\")\n    \n    return birlestirilmis_veri\n\ndef detayli_rapor_olustur(birlestirilmis_veri):\n    \"\"\"Detaylı klasör ve dosya raporu oluşturur\"\"\"\n    print(\"\\n📊 DETAYLI RAPOR:\")\n    print(\"=\" * 60)\n    \n    for klasor_yolu, dosyalar in birlestirilmis_veri.items():\n        if '/' in klasor_yolu:\n            ana_klasor, alt_klasor = klasor_yolu.split('/', 1)\n            print(f\"📂 {ana_klasor}/\")\n            print(f\"   └── 📁 {alt_klasor}/ → {len(dosyalar)} dosya\")\n            for dosya_adi in dosyalar.keys():\n                print(f\"        └── 📄 {dosya_adi}.json\")\n        else:\n            print(f\"📂 {klasor_yolu}/ → {len(dosyalar)} dosya\")\n            for dosya_adi in dosyalar.keys():\n                print(f\"   └── 📄 {dosya_adi}.json\")\n\ndef json_yapisi_incele(birlestirilmis_veri, ornek_sayisi=2):\n    \"\"\"JSON dosyalarının yapısını inceler\"\"\"\n    print(f\"\\n🔍 JSON YAPI İNCELEMESİ (İlk {ornek_sayisi} örnek):\")\n    print(\"=\" * 60)\n    \n    sayac = 0\n    for klasor_yolu, dosyalar in birlestirilmis_veri.items():\n        for dosya_adi, icerik in dosyalar.items():\n            if sayac < ornek_sayisi:\n                print(f\"\\n📍 Konum: {klasor_yolu}/{dosya_adi}.json\")\n                \n                if isinstance(icerik, dict):\n                    print(f\"   📋 Sözlük yapısı ({len(icerik)} anahtar)\")\n                    \n                    # İlk 3 anahtarı göster\n                    for i, (anahtar, deger) in enumerate(list(icerik.items())[:3]):\n                        if isinstance(deger, (str, int, float, bool)) or deger is None:\n                            deger_goruntu = str(deger)[:30] + \"...\" if len(str(deger)) > 30 else str(deger)\n                            print(f\"      • '{anahtar}': {deger_goruntu}\")\n                        elif isinstance(deger, list):\n                            print(f\"      • '{anahtar}': Liste[{len(deger)} öğe]\")\n                        elif isinstance(deger, dict):\n                            print(f\"      • '{anahtar}': Sözlük[{len(deger)} anahtar]\")\n                        else:\n                            print(f\"      • '{anahtar}': {type(deger).__name__}\")\n                \n                elif isinstance(icerik, list):\n                    print(f\"   📋 Liste yapısı ({len(icerik)} öğe)\")\n                    if icerik and len(icerik) > 0:\n                        ilk_oge = icerik[0]\n                        print(f\"      • İlk öğe: {type(ilk_oge).__name__}\")\n                \n                print(\"   \" + \"─\" * 40)\n                sayac += 1\n\n# Ana çalıştırma fonksiyonu\nif __name__ == \"__main__\":\n    print(\"🚀 HEDEF JSON BİRLEŞTİRİCİ BAŞLATILIYOR...\")\n    print(\"🎯 İşlenecek klasörler: data, ana_kategoriler, fiyat_listeleri, genel_diyalog, config\")\n    print(\"=\" * 70)\n    \n    try:\n        # Birleştirme işlemini başlat\n        birlestirilmis_veri = hedef_json_dosyalarini_birlestir()\n        \n        # Detaylı rapor oluştur\n        detayli_rapor_olustur(birlestirilmis_veri)\n        \n        # JSON yapısını incele\n        json_yapisi_incele(birlestirilmis_veri)\n        \n        print(f\"\\n✅ Tüm işlemler başarıyla tamamlandı!\")\n        print(f\"📁 'tumjsondosyalari.json' dosyası oluşturuldu.\")\n        \n    except Exception as e:\n        print(f\"❌ Beklenmeyen hata: {e}\")","size_bytes":7101},"micro-modules/session/stopAllTimers.js":{"content":"","size_bytes":0},"micro-modules/menu/showCategoryOptions.js":{"content":"// micro-modules/menu/showCategoryOptions.js\nasync function showCategoryOptions(message, category, services) {\n  const categoryData = category.data;\n  let optionsText = `🎯 *${categoryData.bot_greeting}*\\n\\n`;\n  \n  if (categoryData.category_options) {\n    categoryData.category_options.forEach(option => {\n      optionsText += `${option.option_number}. ${option.category_name}\\n`;\n    });\n  }\n  \n  optionsText += `\\n${categoryData.completion_message || 'Lütfen bir numara seçin:'}`;\n  \n  await message.reply(optionsText);\n}\n\nmodule.exports = showCategoryOptions;","size_bytes":566},"micro-modules/utils/isGreeting.js":{"content":"// micro-modules/utils/isGreeting.js\nfunction isGreeting(message) {\n  const greetings = [\n    'merhaba', 'selam', 'hi', 'hello', 'hey', \n    'günaydın', 'iyi günler', 'iyi akşamlar', \n    'naber', 'slm', 'sa', 'selamun aleyküm',\n    'aleyküm selam', 'merhabalar', 'selamlar'\n  ];\n  return greetings.some(greet => message.toLowerCase().includes(greet));\n}\n\nmodule.exports = isGreeting;","size_bytes":390},"modules/sessionManager.js":{"content":"const logger = require('./logger');\n\n// Kullanıcı oturumlarını takip etmek için\nconst userSessions = new Map();\n\n// Kullanıcı oturumu oluştur - GÜNCELLENDİ\nfunction createUserSession(userId) {\n  const session = {\n    userId: userId,\n    lastActivity: Date.now(),\n    waitingForResponse: false,\n    waitingForHelp: false,\n    menuTimer: null,\n    saleTimer: null,\n    helpTimer: null,\n    goodbyeTimer: null,\n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {},\n    serviceFlow: null,\n    menuHistory: []\n  };\n  \n  userSessions.set(userId, session);\n  console.log(`🆕 Yeni oturum oluşturuldu: ${userId}`);\n  return session;\n}\n\n// Kullanıcı oturumunu güncelle - GÜNCELLENDİ\nfunction updateUserSession(userId, updates) {\n  const session = getUserSession(userId);\n  Object.assign(session, updates);\n  session.lastActivity = Date.now();\n  userSessions.set(userId, session);\n  \n  console.log(`📝 Oturum güncellendi: ${userId}, Durum: ${session.currentState}`);\n  return session;\n}\n\n// Oturumu getir - GÜNCELLENDİ\nfunction getUserSession(userId) {\n  let session = userSessions.get(userId);\n  if (!session) {\n    console.log(`🆕 Oturum bulunamadı, yeni oluşturuluyor: ${userId}`);\n    session = createUserSession(userId);\n  }\n  return session;\n}\n\n// Yardım timer'ı başlat - GÜNCELLENDİ\nfunction startHelpTimer(userId, message, services) {\n  const session = getUserSession(userId);\n  if (session && session.helpTimer) {\n    clearTimeout(session.helpTimer);\n  }\n  if (session && session.goodbyeTimer) {\n    clearTimeout(session.goodbyeTimer);\n  }\n\n  console.log(`⏰ Yardım timer başlatıldı - Kullanıcı: ${userId}`);\n\n  // 1. Timer: 3 dakika sonra menüyü göster\n  const helpTimer = setTimeout(async () => {\n    const currentSession = getUserSession(userId);\n    if (currentSession && currentSession.waitingForHelp) {\n      console.log(`⏰ Yardım zaman aşımı - Menü gösteriliyor: ${userId}`);\n      \n      const menuHandler = require('./menuHandler');\n      await menuHandler.showMainMenu(message, services);\n      \n      // 2. Timer: 3 dakika sonra vedalaşma\n      const goodbyeTimer = setTimeout(async () => {\n        await handleGoodbye(message);\n      }, 3 * 60 * 1000); // 3 dakika\n      \n      updateUserSession(userId, { \n        waitingForHelp: false, \n        helpTimer: null,\n        goodbyeTimer: goodbyeTimer\n      });\n    }\n  }, 3 * 60 * 1000); // 3 dakika\n\n  updateUserSession(userId, { \n    waitingForHelp: true, \n    helpTimer: helpTimer\n  });\n}\n\n// Vedalaşma işlemi - GÜNCELLENDİ\nasync function handleGoodbye(message) {\n  const serviceLoader = require('./serviceLoader');\n  const greetings = serviceLoader.loadJSON('./genel_diyalog/selamlama_vedalasma.json');\n  const goodbyeMsg = greetings?.vedalasma?.hoscakal?.[0] || \n                    'Hoşça kalın! PlanB Global Network Ltd Şti adına iyi günler dilerim.';\n  \n  await message.reply(goodbyeMsg);\n  \n  console.log(`👋 Vedalaşma mesajı gönderildi - Kullanıcı: ${message.from}`);\n  \n  // Oturumu temizle\n  updateUserSession(message.from, {\n    currentState: 'main_menu',\n    waitingForHelp: false,\n    helpTimer: null,\n    goodbyeTimer: null\n  });\n}\n\n// Yardım timer'ını durdur (kullanıcı cevap verdiğinde) - GÜNCELLENDİ\nfunction stopHelpTimer(userId) {\n  const session = getUserSession(userId);\n  if (session) {\n    if (session.helpTimer) {\n      clearTimeout(session.helpTimer);\n      console.log(`⏰ Yardım timer durduruldu - Kullanıcı: ${userId}`);\n    }\n    if (session.goodbyeTimer) {\n      clearTimeout(session.goodbyeTimer);\n      console.log(`⏰ Vedalaşma timer durduruldu - Kullanıcı: ${userId}`);\n    }\n    updateUserSession(userId, { \n      waitingForHelp: false, \n      helpTimer: null,\n      goodbyeTimer: null\n    });\n  }\n}\n\n// Menü zamanlayıcı başlat - GÜNCELLENDİ\nfunction startMenuTimer(userId, message, services) {\n  const session = getUserSession(userId);\n  if (session && session.menuTimer) {\n    clearTimeout(session.menuTimer);\n  }\n\n  const timer = setTimeout(async () => {\n    const currentSession = getUserSession(userId);\n    if (currentSession && currentSession.waitingForResponse) {\n      console.log(`⏰ Menü zaman aşımı - Kullanıcı: ${userId}`);\n      const menuHandler = require('./menuHandler');\n      await menuHandler.showMainMenu(message, services);\n      updateUserSession(userId, { \n        waitingForResponse: false, \n        menuTimer: null,\n        currentState: 'main_menu'\n      });\n    }\n  }, 60000);\n\n  updateUserSession(userId, { \n    waitingForResponse: true, \n    menuTimer: timer,\n    currentState: 'waiting_for_service'\n  });\n}\n\n// Menü zamanlayıcıyı durdur - GÜNCELLENDİ\nfunction stopMenuTimer(userId) {\n  const session = getUserSession(userId);\n  if (session && session.menuTimer) {\n    clearTimeout(session.menuTimer);\n    updateUserSession(userId, { \n      waitingForResponse: false, \n      menuTimer: null\n    });\n    console.log(`⏰ Menü timer durduruldu - Kullanıcı: ${userId}`);\n  }\n}\n\n// Satış zamanlayıcısını temizle - GÜNCELLENDİ\nfunction clearSaleTimer(userId) {\n  const session = getUserSession(userId);\n  if (session && session.saleTimer) {\n    clearTimeout(session.saleTimer);\n    updateUserSession(userId, { saleTimer: null });\n    console.log(`⏰ Satış timer temizlendi - Kullanıcı: ${userId}`);\n  }\n}\n\n// Tüm oturumları temizle (debug için)\nfunction clearAllSessions() {\n  const count = userSessions.size;\n  userSessions.clear();\n  console.log(`🧹 ${count} oturum temizlendi`);\n}\n\n// Aktif oturumları listele (debug için)\nfunction listActiveSessions() {\n  console.log(`📊 Aktif oturumlar: ${userSessions.size}`);\n  userSessions.forEach((session, userId) => {\n    console.log(`  👤 ${userId}: ${session.currentState}`);\n  });\n}\n\nmodule.exports = {\n  createUserSession,\n  updateUserSession,\n  getUserSession,\n  startMenuTimer,\n  stopMenuTimer,\n  clearSaleTimer,\n  startHelpTimer,\n  stopHelpTimer,\n  handleGoodbye,\n  userSessions,\n  clearAllSessions,\n  listActiveSessions\n};","size_bytes":6109},"micro-modules/menu/handleSubMenuSelection.js":{"content":"// micro-modules/menu/handleSubMenuSelection.js\nconst sessionManager = require('../../core/sessionManager');\nconst convertToServiceKey = require('./convertToServiceKey');\nconst startServiceFlow = require('../service/startServiceFlow');\nconst showMainMenu = require('./showMainMenu');\n\nasync function handleSubMenuSelection(message, number, categoryName, services) {\n  console.log(`🎯 Alt menü seçimi: Kategori: ${categoryName}, Sayı: ${number}`);\n  \n  const categoryData = services[categoryName];\n  \n  if (!categoryData || !categoryData.category_options) {\n    await message.reply('❌ Alt menü bulunamadı. Ana menüye dönülüyor.');\n    sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n    await showMainMenu(message, services);\n    return;\n  }\n\n  const selectedOption = categoryData.category_options.find(opt => opt.option_number === number);\n  \n  if (selectedOption) {\n    console.log(`✅ Alt menü seçildi: ${selectedOption.category_name}`);\n    \n    const serviceKey = convertToServiceKey(selectedOption.category_name);\n    let foundService = null;\n\n    console.log(`🔍 Servis aranıyor: ${serviceKey}`);\n\n    for (const [dataCategory, dataServices] of Object.entries(services)) {\n      if (typeof dataServices === 'object' && dataServices[serviceKey]) {\n        foundService = {\n          type: 'service',\n          data: dataServices[serviceKey],\n          category: dataCategory,\n          name: serviceKey\n        };\n        console.log(`✅ Servis bulundu: ${dataCategory}/${serviceKey}`);\n        break;\n      }\n    }\n\n    if (foundService) {\n      console.log(`🚀 Servis başlatılıyor: ${foundService.name}`);\n      await startServiceFlow(message, foundService);\n    } else {\n      console.log(`❌ Servis bulunamadı: ${serviceKey}`);\n      await message.reply(`✅ *${selectedOption.category_name}* seçildi!\\n\\n` +\n                         `Bu hizmetle ilgili detaylı bilgi için en kısa sürede sizinle iletişime geçeceğiz.`);\n      sessionManager.updateUserSession(message.from, { currentState: 'main_menu' });\n      await showMainMenu(message, services);\n    }\n  } else {\n    await message.reply(`❌ Geçersiz numara. Lütfen 1-${categoryData.category_options.length} arası bir numara girin.`);\n  }\n}\n\nmodule.exports = handleSubMenuSelection;","size_bytes":2314},"micro-modules/session/stopHelpTimer.js":{"content":"// micro-modules/session/stopHelpTimer.js\nconst logger = require('../../core/logger');\nconst sessionManager = require('../../core/sessionManager');\n\nfunction stopHelpTimer(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (session) {\n    if (session.helpTimer) {\n      clearTimeout(session.helpTimer);\n      logger.info(`⏰ Yardım timer durduruldu - Kullanıcı: ${userId}`);\n    }\n    if (session.goodbyeTimer) {\n      clearTimeout(session.goodbyeTimer);\n      logger.info(`⏰ Vedalaşma timer durduruldu - Kullanıcı: ${userId}`);\n    }\n    sessionManager.updateUserSession(userId, { \n      waitingForHelp: false, \n      helpTimer: null,\n      goodbyeTimer: null\n    });\n  }\n}\n\nmodule.exports = stopHelpTimer;","size_bytes":737},"modules/messageHandler/messageParser.js":{"content":"// modules/messageHandler/messageParser.js\nconst logger = require('../logger');\n\nfunction parseMessage(messageBody) {\n  const cleanMessage = messageBody.toLowerCase().replace(/[.,!?]/g, '').trim();\n  \n  let greetingPart = '';\n  let servicePart = messageBody; // Varsayılan: tüm mesaj işlem kısmı\n  \n  const greetingWords = ['merhaba', 'selam', 'hi', 'hello', 'hey', 'günaydın', 'iyi günler', 'iyi akşamlar', 'naber', 'slm', 'sa'];\n  \n  // Tüm mesajı kontrol et, selamlama bulunursa ayır\n  for (const word of greetingWords) {\n    if (cleanMessage.includes(word)) {\n      const index = cleanMessage.indexOf(word);\n      greetingPart = messageBody.substring(0, index + word.length);\n      servicePart = messageBody.substring(index + word.length).trim();\n      break;\n    }\n  }\n  \n  console.log(`📝 Mesaj ayrıştırma: Orijinal=\"${messageBody}\", Selamlama=\"${greetingPart}\", İşlem=\"${servicePart}\"`);\n  \n  return { \n    greetingPart, \n    servicePart, \n    cleanMessage: cleanMessage,\n    originalMessage: messageBody \n  };\n}\n\nfunction isGreeting(message) {\n  const greetings = [\n    'merhaba', 'selam', 'hi', 'hello', 'hey', \n    'günaydın', 'iyi günler', 'iyi akşamlar', \n    'naber', 'slm', 'sa', 'selamun aleyküm',\n    'aleyküm selam', 'merhabalar', 'selamlar',\n    'good morning', 'good afternoon', 'good evening'\n  ];\n  \n  const cleanMessage = message.toLowerCase().trim();\n  return greetings.some(greet => cleanMessage.includes(greet));\n}\n\nfunction isThanksMessage(message) {\n  const thanksWords = [\n    'teşekkür', 'tesekkür', 'teşekkürler', 'tesekkurler', 'teşekkür ederim', 'tesekkur ederim',\n    'sağol', 'sagol', 'sağolun', 'sagolun', 'sağ ol', 'sag ol',\n    'thank you', 'thanks', 'thx', 'ty', 'thank u',\n    'eyvallah', 'mersi', 'çok teşekkür', 'cok tesekkur', 'teşekkürler çok', 'tşk',\n    'teşekkür ederiz', 'tesekkur ederiz', 'minnettarım', 'minnettarim'\n  ];\n  \n  const cleanMessage = message.toLowerCase().trim();\n  return thanksWords.some(word => cleanMessage.includes(word));\n}\n\nfunction isGoodbyeMessage(message) {\n  const goodbyeWords = [\n    'güle güle', 'gule gule', 'hoşça kal', 'hoscakal', 'hoşçakal', 'hoscakal', \n    'allaha ısmarladık', 'allaha ısmarladik', 'bay bay', 'bye bye', 'bye',\n    'görüşürüz', 'gorusuruz', 'görüşmek üzere', 'gorusmek uzere',\n    'kendine iyi bak', 'kendine iyi bak', 'iyi günler', 'iyi gunler',\n    'iyi akşamlar', 'iyi aksamlar', 'iyi geceler', 'iyi geceler'\n  ];\n  \n  const cleanMessage = message.toLowerCase().trim();\n  return goodbyeWords.some(word => cleanMessage.includes(word));\n}\n\nfunction isNumberInput(message) {\n  return /^\\d+$/.test(message.trim());\n}\n\nfunction isMenuRequest(message) {\n  const menuWords = ['menü', 'menu', 'list', 'liste', 'seçenek', 'secenek', 'options'];\n  const cleanMessage = message.toLowerCase().trim();\n  return menuWords.some(word => cleanMessage.includes(word));\n}\n\nfunction hasMedia(message) {\n  return message.hasMedia;\n}\n\nfunction extractServiceKeywords(message) {\n  const cleanMessage = message.toLowerCase().replace(/[.,!?]/g, '').trim();\n  const keywords = [\n    'sigorta', 'yazılım', 'siber', 'güvenlik', 'lojistik', 'nakliye',\n    'ithalat', 'ihracat', 'denetim', 'emlak', 'inşaat', 'crm',\n    'tekstil', 'kozmetik', 'tur', 'güneş', 'enerji', 'kurumsal',\n    'danışmanlık', 'yazilim', 'saglik', 'seyahat', 'kasko', 'dask',\n    'konut', 'isyeri', 'mobil', 'uygulama', 'gümrük', 'depo',\n    'antrepo', 'parfüm', 'deodorant', 'ges', 'finansal', 'eğitim',\n    'diğer', 'diger', 'hizmet', 'servis', 'service'\n  ];\n  \n  return keywords.filter(keyword => cleanMessage.includes(keyword));\n}\n\nfunction isHelpRequest(message) {\n  const helpWords = ['yardım', 'yardim', 'help', 'nasıl', 'nasil', 'ne yapabilir', 'yapabilir'];\n  const cleanMessage = message.toLowerCase().trim();\n  return helpWords.some(word => cleanMessage.includes(word));\n}\n\nfunction isCancelRequest(message) {\n  const cancelWords = ['iptal', 'cancel', 'dur', 'stop', 'vazgeç', 'vazgec'];\n  const cleanMessage = message.toLowerCase().trim();\n  return cancelWords.some(word => cleanMessage.includes(word));\n}\n\nfunction isOtherServicesRequest(message) {\n  const otherServiceWords = ['diğer', 'diger', 'başka', 'baska', 'farklı', 'farkli', 'öteki', 'oteki'];\n  const serviceWords = ['hizmet', 'servis', 'service', 'seçenek', 'secenek'];\n  \n  const cleanMessage = message.toLowerCase().trim();\n  \n  const hasOtherWord = otherServiceWords.some(word => cleanMessage.includes(word));\n  const hasServiceWord = serviceWords.some(word => cleanMessage.includes(word));\n  \n  return hasOtherWord && hasServiceWord;\n}\n\nfunction getMessageType(message) {\n  const cleanMessage = message.toLowerCase().trim();\n  \n  if (isGreeting(cleanMessage)) return 'greeting';\n  if (isNumberInput(cleanMessage)) return 'number';\n  if (isMenuRequest(cleanMessage)) return 'menu';\n  if (isHelpRequest(cleanMessage)) return 'help';\n  if (isCancelRequest(cleanMessage)) return 'cancel';\n  if (isThanksMessage(cleanMessage)) return 'thanks';\n  if (isGoodbyeMessage(cleanMessage)) return 'goodbye';\n  if (isOtherServicesRequest(cleanMessage)) return 'other_services';\n  \n  const keywords = extractServiceKeywords(cleanMessage);\n  if (keywords.length > 0) return 'service_request';\n  \n  return 'unknown';\n}\n\nmodule.exports = {\n  parseMessage,\n  isGreeting,\n  isThanksMessage,\n  isGoodbyeMessage,\n  isNumberInput,\n  isMenuRequest,\n  hasMedia,\n  extractServiceKeywords,\n  isHelpRequest,\n  isCancelRequest,\n  isOtherServicesRequest,\n  getMessageType\n};","size_bytes":5558},"micro-modules/menu/convertToServiceKey.js":{"content":"// micro-modules/menu/convertToServiceKey.js\nfunction convertToServiceKey(categoryName) {\n  const conversions = {\n    'Yeşil Sigorta': 'yesil_sigorta',\n    'Trafik Sigortası': 'trafik_sigortasi',\n    'KASKO': 'kasko',\n    'Koltuk Sigortası': 'koltuk_sigortasi',\n    'DASK': 'dask',\n    'Konut Sigortası': 'konut_sigortasi',\n    'İşyeri Sigortası': 'isyeri_sigortasi',\n    'Seyahat Sağlık Sigortası': 'seyahat_saglik_sigortasi',\n    'Tamamlayıcı Sağlık Sigortası': 'tamamlayici_saglik_sigortasi',\n    'Özel Sağlık Sigortası': 'ozel_saglik_sigortasi',\n    \n    'Özel Yazılım Geliştirme': 'ozel_yazilim_gelistirme',\n    'Mobil Uygulama Geliştirme': 'mobil_uygulama_gelistirme',\n    \n    'Yurtiçi Yük Nakli': 'yurtici_yuk_nakli',\n    'Yurtdışı Yük Nakli': 'yurtdisi_yuk_nakli',\n    'Depo/Antrepo Hizmeti': 'depo_antrepo_hizmeti',\n    \n    'Yurtdışı Müşteri Araştırma': 'yurtdisi_musteri_arastirma',\n    'Yurtiçi Tedarikçi Araştırma': 'yurtici_tedarikci_arastirma',\n    'Gümrük Operasyon Hizmetleri': 'gumruk_operasyon_hizmetleri',\n    'Yurtiçi Ürün Araştırma': 'yurtici_urun_arastirma',\n    'Yurtdışı Pazar Araştırma': 'yurtdisi_pazar_arastirma',\n    \n    'Genel Ağ Güvenliği': 'genel_ag_guvenligi',\n    'Kullanıcı Güvenliği': 'kullanici_guvenligi',\n    'Veri Güvenliği': 'veri_guvenligi',\n    'Uygulama Güvenliği': 'uygulama_guvenligi',\n    'Kimlik ve Erişim Yönetimi': 'kimlik_erisim_yonetimi',\n    'Güvenlik Yönetimi': 'guvenlik_yonetimi',\n    'Penetrasyon Test Talebi': 'penetrasyon_test_talebi',\n    'Eğitim Talepleri': 'egitim_talepleri',\n    \n    'Satılık Gayrimenkul': 'satilik_gayrimenkul',\n    'Kiralık Gayrimenkul': 'kiralik_gayrimenkul',\n    'Yurtdışı Gayrimenkul Yatırım': 'yurtdisi_gayrimenkul_yatirim',\n    'İnşaat Taahhüt Hizmeti': 'insaat_taahhut_hizmeti',\n    \n    'Müşteri Seçimi': 'musteri_secimi',\n    'Müşteri Edinme': 'musteri_edinme',\n    'Müşteri Koruma': 'musteri_koruma',\n    'Müşteri Derinleştirme': 'musteri_derinlestirme',\n    \n    'Erkek Giyim': 'erkek_giyim',\n    'Kadın Giyim': 'kadin_giyim',\n    'Ev Tekstil Ürünleri': 'ev_tekstil_urunleri',\n    \n    'Parfüm': 'parfum',\n    'Deodorant': 'deodorant',\n    'Kişisel Bakım': 'kisisel_bakim',\n    'Medikal Kozmetik': 'medikal_kozmetik',\n    \n    'Yurtiçi Özel Gezi Talebi': 'yurtici_ozel_gezi_talebi',\n    'Yurtdışı Özel Gezi Talebi': 'yurtdisi_ozel_gezi_talebi',\n    'Personel Servis Talebi': 'personel_servis_talebi',\n    \n    'Güneş Verimlilik Hesabı': 'gunes_verimlilik_hesabi',\n    'GES Üretim Hesaplama': 'ges_uretim_hesaplama',\n    'GES Kurulum Hesaplama': 'ges_kurulum_hesaplama',\n    \n    'İnsan Kaynakları Danışmanlığı': 'insan_kaynaklari_danismanligi',\n    'Stratejik Planlama Danışmanlığı': 'stratejik_planlama_danismanligi',\n    'Finansal Danışmanlık': 'finansal_danismanlik',\n    'Operasyonel İyileştirme': 'operasyonel_iyilestirme',\n    'Kurumsal İletişim Danışmanlığı': 'kurumsal_iletisim_danismanligi',\n    'Yasal Danışmanlık': 'yasal_danismanlik',\n    'Teknoloji Danışmanlığı': 'teknoloji_danismanligi',\n    'Kurumsal Eğitim Hizmetleri': 'kurumsal_egitim_hizmetleri'\n  };\n\n  return conversions[categoryName] || categoryName.toLowerCase().replace(/ /g, '_').replace(/[ıİ]/g, 'i').replace(/[şŞ]/g, 's').replace(/[ğĞ]/g, 'g').replace(/[üÜ]/g, 'u').replace(/[çÇ]/g, 'c').replace(/[öÖ]/g, 'o');\n}\n\nmodule.exports = convertToServiceKey;","size_bytes":3475},"micro-modules/utils/findMatchingService.js":{"content":"// micro-modules/utils/findMatchingService.js\nfunction findMatchingService(message, services) {\n  const cleanMessage = message.toLowerCase().replace(/[.,!?]/g, '').trim();\n  \n  console.log(`🔍 Mesaj aranıyor: \"${cleanMessage}\"`);\n\n  // FİYAT SORGULARI\n  const priceQueries = {\n    'yeşil sigorta fiyat': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta fiyat': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta fiyatı': 'yesil_sigorta_fiyatlari', \n    'yesil sigorta fiyati': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta ne kadar': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta ne kadar': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta ücreti': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta ucreti': 'yesil_sigorta_fiyatlari',\n    'yeşil sigorta fiyatları': 'yesil_sigorta_fiyatlari',\n    'yesil sigorta fiyatlari': 'yesil_sigorta_fiyatlari'\n  };\n\n  for (const [priceQuery, serviceKey] of Object.entries(priceQueries)) {\n    if (cleanMessage.includes(priceQuery)) {\n      console.log(`💰 Fiyat sorgusu eşleşti: \"${priceQuery}\" -> ${serviceKey}`);\n      \n      if (services['fiyat_listeleri'] && services['fiyat_listeleri'][serviceKey]) {\n        return { \n          type: 'service', \n          data: services['fiyat_listeleri'][serviceKey], \n          category: 'fiyat_listeleri', \n          name: serviceKey \n        };\n      }\n    }\n  }\n\n  // NORMAL SERVİSLER\n  const exactMatches = {\n    'yeşil sigorta': 'yesil_sigorta',\n    'yesil sigorta': 'yesil_sigorta',\n    'trafik sigortası': 'trafik_sigortasi',\n    'trafik sigortasi': 'trafik_sigortasi',\n    'kasko sigortası': 'kasko',\n    'kasko sigortasi': 'kasko',\n    'konut sigortası': 'konut_sigortasi',\n    'konut sigortasi': 'konut_sigortasi',\n    'dask sigortası': 'dask',\n    'dask sigortasi': 'dask',\n    'koltuk sigortası': 'koltuk_sigortasi',\n    'koltuk sigortasi': 'koltuk_sigortasi',\n    'seyahat sigortası': 'seyahat_saglik_sigortasi',\n    'seyahat sigortasi': 'seyahat_saglik_sigortasi',\n    'sağlık sigortası': 'ozel_saglik_sigortasi',\n    'saglik sigortasi': 'ozel_saglik_sigortasi',\n    'tamamlayıcı sağlık sigortası': 'tamamlayici_saglik_sigortasi',\n    'tamamlayici saglik sigortasi': 'tamamlayici_saglik_sigortasi',\n    'işyeri sigortası': 'isyeri_sigortasi',\n    'isyeri sigortasi': 'isyeri_sigortasi'\n  };\n\n  for (const [exactPhrase, serviceKey] of Object.entries(exactMatches)) {\n    if (cleanMessage.includes(exactPhrase.toLowerCase())) {\n      console.log(`✅ Tam ifade eşleşti: \"${exactPhrase}\" -> ${serviceKey}`);\n      \n      for (const [categoryName, categoryServices] of Object.entries(services)) {\n        if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n          return { \n            type: 'service', \n            data: categoryServices[serviceKey], \n            category: categoryName, \n            name: serviceKey \n          };\n        }\n      }\n    }\n  }\n\n  // ANAHTAR KELİMELER\n  const keywordMatches = {\n    'sigorta': 'sigorta_ana_kategori',\n    'trafik': 'trafik_sigortasi', \n    'kasko': 'kasko',\n    'dask': 'dask',\n    'konut': 'konut_sigortasi',\n    'yeşil': 'yesil_sigorta',\n    'yesil': 'yesil_sigorta',\n    'koltuk': 'koltuk_sigortasi',\n    'seyahat': 'seyahat_saglik_sigortasi',\n    'sağlık': 'ozel_saglik_sigortasi',\n    'saglik': 'ozel_saglik_sigortasi',\n    'tamamlayıcı': 'tamamlayici_saglik_sigortasi',\n    'tamamlayici': 'tamamlayici_saglik_sigortasi',\n    'işyeri': 'isyeri_sigortasi',\n    'isyeri': 'isyeri_sigortasi',\n    \n    'yazılım': 'yazilim_talepleri_ana_kategori',\n    'yazilim': 'yazilim_talepleri_ana_kategori',\n    'mobil': 'mobil_uygulama_gelistirme',\n    'uygulama': 'mobil_uygulama_gelistirme',\n    \n    'lojistik': 'lojistik_hizmetleri_ana',\n    'nakliye': 'lojistik_hizmetleri_ana',\n    'yük': 'lojistik_hizmetleri_ana',\n    'depo': 'depo_antrepo_hizmeti',\n    'antrepo': 'depo_antrepo_hizmeti',\n    \n    'ithalat': 'ithalat_ihracat_ana',\n    'ihracat': 'ithalat_ihracat_ana',\n    'gümrük': 'gumruk_operasyon_hizmetleri',\n    \n    'siber': 'siber_guvenlik_ana',\n    'güvenlik': 'siber_guvenlik_ana',\n    'emlak': 'insaat_emlak_ana',\n    'crm': 'crm_hizmetleri_ana',\n    'tekstil': 'tekstil_urunleri_ana',\n    'kozmetik': 'kozmetik_urunleri_ana',\n    'tur': 'tur_organizasyon_ana',\n    'güneş': 'gunes_enerjisi_sistemleri_ana',\n    'kurumsal': 'kurumsal_hizmetler_ana'\n  };\n\n  for (const [keyword, serviceKey] of Object.entries(keywordMatches)) {\n    if (cleanMessage.includes(keyword)) {\n      console.log(`✅ Anahtar kelime eşleşti: \"${keyword}\" -> ${serviceKey}`);\n      \n      if (serviceKey.includes('_ana') || serviceKey.includes('_kategori')) {\n        const categoryData = services[serviceKey];\n        if (categoryData) {\n          return { type: 'category', data: categoryData, name: serviceKey };\n        }\n      } else {\n        for (const [categoryName, categoryServices] of Object.entries(services)) {\n          if (typeof categoryServices === 'object' && categoryServices[serviceKey]) {\n            return { \n              type: 'service', \n              data: categoryServices[serviceKey], \n              category: categoryName, \n              name: serviceKey \n            };\n          }\n        }\n      }\n    }\n  }\n\n  console.log('❌ Eşleşme bulunamadı');\n  return null;\n}\n\nmodule.exports = findMatchingService;","size_bytes":5332},"micro-modules/message/endConversation.js":{"content":"// micro-modules/message/endConversation.js\nconst sessionManager = require('../../core/sessionManager');\nconst serviceLoader = require('../../core/serviceLoader');\nconst showMainMenu = require('../menu/showMainMenu');\n\nasync function endConversation(message) {\n  sessionManager.updateUserSession(message.from, {\n    currentState: 'main_menu',\n    currentService: null,\n    currentQuestions: [],\n    currentQuestionIndex: 0,\n    collectedAnswers: {},\n    serviceFlow: null,\n    saleTimer: null\n  });\n  \n  setTimeout(async () => {\n    await showMainMenu(message, serviceLoader.loadAllServices());\n  }, 3000);\n}\n\nmodule.exports = endConversation;","size_bytes":643},"micro-modules/service/saveServiceApplication.js":{"content":"// micro-modules/service/saveServiceApplication.js\nconst fs = require('fs');\nconst path = require('path');\nconst logger = require('../../core/logger');\n\nasync function saveServiceApplication(session) {\n  try {\n    const applicationData = {\n      service: session.serviceFlow,\n      answers: session.collectedAnswers,\n      timestamp: new Date().toISOString(),\n      userId: session.userId\n    };\n    \n    const applicationsDir = './applications';\n    if (!fs.existsSync(applicationsDir)) {\n      fs.mkdirSync(applicationsDir, { recursive: true });\n    }\n    \n    const filename = `application_${Date.now()}_${session.userId.replace('@c.us', '')}.json`;\n    fs.writeFileSync(\n      path.join(applicationsDir, filename),\n      JSON.stringify(applicationData, null, 2),\n      'utf8'\n    );\n    \n    logger.info(`Başvuru kaydedildi: ${filename}`);\n    console.log(`📄 Başvuru kaydedildi: ${filename}`);\n    \n  } catch (error) {\n    logger.error(`Başvuru kaydetme hatası: ${error.message}`);\n    console.error('❌ Başvuru kaydetme hatası:', error);\n  }\n}\n\nmodule.exports = saveServiceApplication;","size_bytes":1100},"docs/DEVELOPMENT.md":{"content":"","size_bytes":0},"modules/messageHandler/contactManager.js":{"content":"// modules/messageHandler/contactManager.js\nconst logger = require('../logger');\n\nasync function getContactInfo(message) {\n  try {\n    const contact = await message.getContact();\n    const contactName = contact.name || contact.pushname || '';\n    const phoneNumber = contact.id.user || '';\n    \n    console.log(`👤 Müşteri bilgisi: ${contactName} (${phoneNumber})`);\n    \n    return {\n      name: contactName,\n      phone: phoneNumber,\n      isBusiness: contact.isBusiness || false,\n      isEnterprise: contact.isEnterprise || false\n    };\n  } catch (contactError) {\n    logger.error(`Müşteri bilgisi alınamadı: ${contactError.message}`);\n    console.log('⚠️  Müşteri bilgisi alınamadı:', contactError.message);\n    \n    return {\n      name: '',\n      phone: '',\n      isBusiness: false,\n      isEnterprise: false\n    };\n  }\n}\n\n// logContactInteraction fonksiyonunu ekliyoruz\nasync function logContactInteraction(message, action) {\n  const contactInfo = await getContactInfo(message);\n  \n  logger.info(`📞 ${action} - Müşteri: ${contactInfo.name} (${contactInfo.phone}) - Mesaj: \"${message.body}\"`);\n  \n  return contactInfo;\n}\n\nmodule.exports = {\n  getContactInfo,\n  logContactInteraction  // Bu fonksiyonu ekledik\n};","size_bytes":1237},"micro-modules/session/clearSaleTimer.js":{"content":"// micro-modules/session/clearSaleTimer.js\nconst sessionManager = require('../../core/sessionManager');\n\nfunction clearSaleTimer(userId) {\n  const session = sessionManager.getUserSession(userId);\n  if (session && session.saleTimer) {\n    clearTimeout(session.saleTimer);\n    sessionManager.updateUserSession(userId, { saleTimer: null });\n  }\n}\n\nmodule.exports = clearSaleTimer;","size_bytes":377},"docs/API.md":{"content":"","size_bytes":0},"modules/messageHandler/personalization.js":{"content":"const serviceLoader = require('../serviceLoader');\n\nfunction createPersonalizedGreeting(contactName, greetingType) {\n  const greetings = serviceLoader.loadJSON('./genel_diyalog/selamlama_vedalasma.json');\n  const baseGreeting = greetings?.selamlama?.[greetingType] || \n                      'Merhaba! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?';\n  \n  if (contactName && contactName.trim().length > 0) {\n    const personalizedGreetings = {\n      gunaydin: `🌞 Günaydın ${contactName}! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?`,\n      merhaba: `👋 Merhaba ${contactName}! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?`,\n      iyi_aksamlar: `🌙 İyi akşamlar ${contactName}! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?`\n    };\n    \n    return personalizedGreetings[greetingType] || \n           `👋 Merhaba ${contactName}! Ben ARYA, PlanB Global Network Ltd Şti için hizmet veren yapay zeka asistanıyım. Size nasıl yardımcı olabilirim?`;\n  }\n  \n  return baseGreeting;\n}\n\nfunction createPersonalizedUnknownMessage(contactName) {\n  const baseText = `🤔 Anlayamadım. Lütfen aşağıdaki seçeneklerden birini belirtin:`;\n  \n  if (contactName) {\n    return `🤔 ${contactName}, anlayamadım. Lütfen aşağıdaki seçeneklerden birini belirtin:`;\n  }\n  \n  return baseText;\n}\n\nmodule.exports = {\n  createPersonalizedGreeting,\n  createPersonalizedUnknownMessage\n};","size_bytes":1683},"micro-modules/service/findYesilSigortaService.js":{"content":"// micro-modules/service/findYesilSigortaService.js\nfunction findYesilSigortaService(services) {\n  for (const [categoryName, categoryServices] of Object.entries(services)) {\n    if (typeof categoryServices === 'object' && categoryServices['yesil_sigorta']) {\n      return {\n        type: 'service',\n        data: categoryServices['yesil_sigorta'],\n        category: categoryName,\n        name: 'yesil_sigorta'\n      };\n    }\n  }\n  return null;\n}\n\nmodule.exports = findYesilSigortaService;","size_bytes":488},"modules/logger.js":{"content":"// Basit logger fonksiyonu\nconst logger = {\n  info: (message) => console.log(`[INFO] ${new Date().toISOString()}: ${message}`),\n  error: (message) => console.error(`[ERROR] ${new Date().toISOString()}: ${message}`),\n  warn: (message) => console.warn(`[WARN] ${new Date().toISOString()}: ${message}`)\n};\n\nmodule.exports = logger;","size_bytes":328}},"version":2}